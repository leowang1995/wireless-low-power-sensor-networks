
c:/Users/Bryan/Desktop/LTE/target/2.0.1/boron/LTE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004b84  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8ba0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000078  2003e3b0  000d8ba4  0001e3b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000003c8  2003e428  2003e428  0002e428  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d8c1c  000d8c1c  00028c1c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8c44  000d8c44  00028c44  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00140dc3  00000000  00000000  00028c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00015ddf  00000000  00000000  00169a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002cf3a  00000000  00000000  0017f7ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d18  00000000  00000000  001ac724  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007b20  00000000  00000000  001af43c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036c0f  00000000  00000000  001b6f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00036e87  00000000  00000000  001edb6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00109d15  00000000  00000000  002249f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007c0c  00000000  00000000  0032e708  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f931 	bl	d8294 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f953 	bl	d82e4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e3b0 	.word	0x2003e3b0
   d4048:	000d8ba4 	.word	0x000d8ba4
   d404c:	2003e428 	.word	0x2003e428
   d4050:	2003e428 	.word	0x2003e428
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f002 ff49 	bl	d6ef4 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8b78 	.word	0x000d8b78
   d407c:	000d8b9c 	.word	0x000d8b9c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b892 	b.w	d41a8 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f955 	bl	d4334 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f002 bef3 	b.w	d6e78 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 b999 	b.w	d53c8 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 b997 	b.w	d53c8 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 b99d 	b.w	d53d8 <free>

000d409e <_ZdaPv>:
   d409e:	f001 b99b 	b.w	d53d8 <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f001 f8de 	bl	d526c <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d4f55 	.word	0x000d4f55

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c8:	4770      	bx	lr

000d40ca <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40ca:	6a00      	ldr	r0, [r0, #32]
   d40cc:	6803      	ldr	r3, [r0, #0]
   d40ce:	68db      	ldr	r3, [r3, #12]
   d40d0:	4718      	bx	r3
	...

000d40d4 <_Z8callbackPcPhj>:
    System.sleep(config);
}


// recieve message
void callback(char* topic, byte* payload, unsigned int length) {
   d40d4:	b510      	push	{r4, lr}
    digitalWrite(led, HIGH);
   d40d6:	4c0f      	ldr	r4, [pc, #60]	; (d4114 <_Z8callbackPcPhj+0x40>)
   d40d8:	2101      	movs	r1, #1
   d40da:	8820      	ldrh	r0, [r4, #0]
   d40dc:	f003 ff47 	bl	d7f6e <digitalWrite>
    delay(250);
   d40e0:	20fa      	movs	r0, #250	; 0xfa
   d40e2:	f002 fe87 	bl	d6df4 <delay>
    digitalWrite(led, LOW);
   d40e6:	8820      	ldrh	r0, [r4, #0]
   d40e8:	2100      	movs	r1, #0
   d40ea:	f003 ff40 	bl	d7f6e <digitalWrite>
    delay(250);
   d40ee:	20fa      	movs	r0, #250	; 0xfa
   d40f0:	f002 fe80 	bl	d6df4 <delay>
    digitalWrite(led, HIGH);
   d40f4:	8820      	ldrh	r0, [r4, #0]
   d40f6:	2101      	movs	r1, #1
   d40f8:	f003 ff39 	bl	d7f6e <digitalWrite>
    delay(250);
   d40fc:	20fa      	movs	r0, #250	; 0xfa
   d40fe:	f002 fe79 	bl	d6df4 <delay>
    digitalWrite(led, LOW);
   d4102:	8820      	ldrh	r0, [r4, #0]
   d4104:	2100      	movs	r1, #0
   d4106:	f003 ff32 	bl	d7f6e <digitalWrite>
    delay(250);
}
   d410a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(250);
   d410e:	20fa      	movs	r0, #250	; 0xfa
   d4110:	f002 be70 	b.w	d6df4 <delay>
   d4114:	2003e3b0 	.word	0x2003e3b0

000d4118 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4118:	b538      	push	{r3, r4, r5, lr}
   d411a:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d411c:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d411e:	b128      	cbz	r0, d412c <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4120:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4122:	210c      	movs	r1, #12
   d4124:	f003 ff81 	bl	d802a <_ZdlPvj>
            wakeupSource = next;
   d4128:	4628      	mov	r0, r5
        while (wakeupSource) {
   d412a:	e7f8      	b.n	d411e <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d412c:	4620      	mov	r0, r4
   d412e:	bd38      	pop	{r3, r4, r5, pc}

000d4130 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d4130:	4b0a      	ldr	r3, [pc, #40]	; (d415c <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d4132:	b510      	push	{r4, lr}
   d4134:	4604      	mov	r4, r0
   d4136:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4138:	f001 ffde 	bl	d60f8 <_ZN5spark10LogManager8instanceEv>
   d413c:	4621      	mov	r1, r4
   d413e:	f002 f9e0 	bl	d6502 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d4142:	f002 fffd 	bl	d7140 <_Z16_fetch_usbserialv>
   d4146:	f002 ffef 	bl	d7128 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d414a:	4620      	mov	r0, r4
   d414c:	4b04      	ldr	r3, [pc, #16]	; (d4160 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d414e:	f840 3b04 	str.w	r3, [r0], #4
   d4152:	f002 f8c3 	bl	d62dc <_ZN5spark6detail9LogFilterD1Ev>
    }
   d4156:	4620      	mov	r0, r4
   d4158:	bd10      	pop	{r4, pc}
   d415a:	bf00      	nop
   d415c:	000d85c4 	.word	0x000d85c4
   d4160:	000d85ac 	.word	0x000d85ac

000d4164 <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d4164:	b510      	push	{r4, lr}
   d4166:	4604      	mov	r4, r0
    }
   d4168:	f7ff ffe2 	bl	d4130 <_ZN5spark16SerialLogHandlerD1Ev>
   d416c:	4620      	mov	r0, r4
   d416e:	2124      	movs	r1, #36	; 0x24
   d4170:	f003 ff5b 	bl	d802a <_ZdlPvj>
   d4174:	4620      	mov	r0, r4
   d4176:	bd10      	pop	{r4, pc}

000d4178 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4178:	b40e      	push	{r1, r2, r3}
   d417a:	b510      	push	{r4, lr}
   d417c:	b08d      	sub	sp, #52	; 0x34
   d417e:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4180:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4182:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4186:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4188:	2300      	movs	r3, #0
   d418a:	2020      	movs	r0, #32
   d418c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4190:	e9cd 4200 	strd	r4, r2, [sp]
   d4194:	201e      	movs	r0, #30
   d4196:	aa04      	add	r2, sp, #16
   d4198:	f001 f878 	bl	d528c <log_message_v>
}
   d419c:	b00d      	add	sp, #52	; 0x34
   d419e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d41a2:	b003      	add	sp, #12
   d41a4:	4770      	bx	lr
	...

000d41a8 <setup>:
void setup() {
   d41a8:	b570      	push	{r4, r5, r6, lr}
  BLE.off();
   d41aa:	f001 fbe1 	bl	d5970 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d41ae:	f001 fc6f 	bl	d5a90 <_ZNK8particle14BleLocalDevice3offEv>
  pinMode(led, OUTPUT);
   d41b2:	4b3f      	ldr	r3, [pc, #252]	; (d42b0 <setup+0x108>)
        return true;
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
   d41b4:	4c3f      	ldr	r4, [pc, #252]	; (d42b4 <setup+0x10c>)
   d41b6:	8818      	ldrh	r0, [r3, #0]
   d41b8:	2101      	movs	r1, #1
   d41ba:	f003 fec7 	bl	d7f4c <pinMode>
  Serial1.begin(BASE_UART_BAUD);
   d41be:	f003 f893 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d41c2:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d41c6:	f003 f889 	bl	d72dc <_ZN11USARTSerial5beginEm>
   d41ca:	7d23      	ldrb	r3, [r4, #20]
   d41cc:	b10b      	cbz	r3, d41d2 <setup+0x2a>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41ce:	2302      	movs	r3, #2
   d41d0:	7223      	strb	r3, [r4, #8]
        .usart(Serial1)
   d41d2:	f003 f889 	bl	d72e8 <_Z22__fetch_global_Serial1v>
    SystemSleepConfiguration& duration(std::chrono::milliseconds ms) {
        return duration(ms.count());
    }

    SystemSleepConfiguration& usart(const USARTSerial& serial) {
        if (valid_) {
   d41d6:	7d23      	ldrb	r3, [r4, #20]
   d41d8:	4606      	mov	r6, r0
   d41da:	b32b      	cbz	r3, d4228 <setup+0x80>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41dc:	6823      	ldr	r3, [r4, #0]
   d41de:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41e0:	b173      	cbz	r3, d4200 <setup+0x58>
            if (start->type == type) {
   d41e2:	889a      	ldrh	r2, [r3, #4]
   d41e4:	2a06      	cmp	r2, #6
   d41e6:	d001      	beq.n	d41ec <setup+0x44>
            start = start->next;
   d41e8:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41ea:	e7f9      	b.n	d41e0 <setup+0x38>
            // Check if USART has been configured as wakeup source.
            auto wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_USART);
            while (wakeup) {
                auto usartkWakeup = reinterpret_cast<hal_wakeup_source_usart_t*>(wakeup);
                if (usartkWakeup->serial == serial.interface()) {
   d41ec:	7b19      	ldrb	r1, [r3, #12]
   d41ee:	7c32      	ldrb	r2, [r6, #16]
   d41f0:	4291      	cmp	r1, r2
   d41f2:	d019      	beq.n	d4228 <setup+0x80>
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_USART, wakeup->next);
   d41f4:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d41f6:	b11b      	cbz	r3, d4200 <setup+0x58>
            if (start->type == type) {
   d41f8:	889a      	ldrh	r2, [r3, #4]
   d41fa:	2a06      	cmp	r2, #6
   d41fc:	d1fa      	bne.n	d41f4 <setup+0x4c>
   d41fe:	e7f5      	b.n	d41ec <setup+0x44>
            }
            // Otherwise, configure USART as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_usart_t();
   d4200:	492d      	ldr	r1, [pc, #180]	; (d42b8 <setup+0x110>)
   d4202:	2010      	movs	r0, #16
   d4204:	f003 ff13 	bl	d802e <_ZnwjRKSt9nothrow_t>
   d4208:	4605      	mov	r5, r0
   d420a:	2800      	cmp	r0, #0
   d420c:	d04d      	beq.n	d42aa <setup+0x102>
   d420e:	2210      	movs	r2, #16
   d4210:	2100      	movs	r1, #0
   d4212:	f004 f867 	bl	d82e4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_usart_t);
   d4216:	4b29      	ldr	r3, [pc, #164]	; (d42bc <setup+0x114>)
   d4218:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_USART;
   d421a:	2306      	movs	r3, #6
   d421c:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d421e:	6923      	ldr	r3, [r4, #16]
   d4220:	60ab      	str	r3, [r5, #8]
            wakeupSource->serial = serial.interface();
   d4222:	7c33      	ldrb	r3, [r6, #16]
   d4224:	732b      	strb	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4226:	6125      	str	r5, [r4, #16]
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
        if (valid_) {
   d4228:	7d23      	ldrb	r3, [r4, #20]
   d422a:	b1ab      	cbz	r3, d4258 <setup+0xb0>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d422c:	6823      	ldr	r3, [r4, #0]
   d422e:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4230:	b31b      	cbz	r3, d427a <setup+0xd2>
            if (start->type == type) {
   d4232:	889a      	ldrh	r2, [r3, #4]
   d4234:	2a0e      	cmp	r2, #14
   d4236:	d006      	beq.n	d4246 <setup+0x9e>
            start = start->next;
   d4238:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d423a:	e7f9      	b.n	d4230 <setup+0x88>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d423c:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d423e:	b1e3      	cbz	r3, d427a <setup+0xd2>
            if (start->type == type) {
   d4240:	889a      	ldrh	r2, [r3, #4]
   d4242:	2a0e      	cmp	r2, #14
   d4244:	d1fa      	bne.n	d423c <setup+0x94>
                if (networkWakeup->index == netif) {
   d4246:	7b1a      	ldrb	r2, [r3, #12]
   d4248:	2a04      	cmp	r2, #4
   d424a:	d1f7      	bne.n	d423c <setup+0x94>
                    if (networkWakeup->flags != flags.value()) {
   d424c:	89da      	ldrh	r2, [r3, #14]
   d424e:	2a01      	cmp	r2, #1
   d4250:	d002      	beq.n	d4258 <setup+0xb0>
                        networkWakeup->flags |= flags.value();
   d4252:	f042 0201 	orr.w	r2, r2, #1
   d4256:	81da      	strh	r2, [r3, #14]
  Log.info("Starting");
   d4258:	4919      	ldr	r1, [pc, #100]	; (d42c0 <setup+0x118>)
   d425a:	481a      	ldr	r0, [pc, #104]	; (d42c4 <setup+0x11c>)
   d425c:	f7ff ff8c 	bl	d4178 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("Connecting to mqtt server");
   d4260:	4818      	ldr	r0, [pc, #96]	; (d42c4 <setup+0x11c>)
   d4262:	4919      	ldr	r1, [pc, #100]	; (d42c8 <setup+0x120>)
   d4264:	f7ff ff88 	bl	d4178 <_ZNK5spark6Logger4infoEPKcz>
  if (client.isConnected()) {
   d4268:	4818      	ldr	r0, [pc, #96]	; (d42cc <setup+0x124>)
   d426a:	f000 fb22 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d426e:	b118      	cbz	r0, d4278 <setup+0xd0>
    Log.info("Connected to mqtt server");
   d4270:	4917      	ldr	r1, [pc, #92]	; (d42d0 <setup+0x128>)
   d4272:	4814      	ldr	r0, [pc, #80]	; (d42c4 <setup+0x11c>)
   d4274:	f7ff ff80 	bl	d4178 <_ZNK5spark6Logger4infoEPKcz>
}
   d4278:	bd70      	pop	{r4, r5, r6, pc}
            }
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d427a:	490f      	ldr	r1, [pc, #60]	; (d42b8 <setup+0x110>)
   d427c:	2014      	movs	r0, #20
   d427e:	f003 fed6 	bl	d802e <_ZnwjRKSt9nothrow_t>
   d4282:	4605      	mov	r5, r0
   d4284:	b178      	cbz	r0, d42a6 <setup+0xfe>
   d4286:	2214      	movs	r2, #20
   d4288:	2100      	movs	r1, #0
   d428a:	f004 f82b 	bl	d82e4 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d428e:	4b0b      	ldr	r3, [pc, #44]	; (d42bc <setup+0x114>)
   d4290:	602b      	str	r3, [r5, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d4292:	230e      	movs	r3, #14
   d4294:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4296:	6923      	ldr	r3, [r4, #16]
   d4298:	60ab      	str	r3, [r5, #8]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d429a:	2304      	movs	r3, #4
   d429c:	732b      	strb	r3, [r5, #12]
            wakeupSource->flags = flags.value();
   d429e:	2301      	movs	r3, #1
   d42a0:	81eb      	strh	r3, [r5, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d42a2:	6125      	str	r5, [r4, #16]
   d42a4:	e7d8      	b.n	d4258 <setup+0xb0>
                valid_ = false;
   d42a6:	7520      	strb	r0, [r4, #20]
                return *this;
   d42a8:	e7d6      	b.n	d4258 <setup+0xb0>
                valid_ = false;
   d42aa:	7520      	strb	r0, [r4, #20]
                return *this;
   d42ac:	e7bc      	b.n	d4228 <setup+0x80>
   d42ae:	bf00      	nop
   d42b0:	2003e3b0 	.word	0x2003e3b0
   d42b4:	2003e48c 	.word	0x2003e48c
   d42b8:	000d8981 	.word	0x000d8981
   d42bc:	00030010 	.word	0x00030010
   d42c0:	000d8508 	.word	0x000d8508
   d42c4:	2003e710 	.word	0x2003e710
   d42c8:	000d8511 	.word	0x000d8511
   d42cc:	2003e42c 	.word	0x2003e42c
   d42d0:	000d852b 	.word	0x000d852b

000d42d4 <_Z12mqtt_connectv>:
  }
  client.publish(topic, msg);
}

void mqtt_connect()
{
   d42d4:	b508      	push	{r3, lr}
  client.connect(MQTT_DEVICE_NAME, MQTT_USER, MQTT_PASS) ? Log.info("Connected") : Log.info("Couldn't connect");
   d42d6:	4a07      	ldr	r2, [pc, #28]	; (d42f4 <_Z12mqtt_connectv+0x20>)
   d42d8:	4b07      	ldr	r3, [pc, #28]	; (d42f8 <_Z12mqtt_connectv+0x24>)
   d42da:	4908      	ldr	r1, [pc, #32]	; (d42fc <_Z12mqtt_connectv+0x28>)
   d42dc:	4808      	ldr	r0, [pc, #32]	; (d4300 <_Z12mqtt_connectv+0x2c>)
   d42de:	f000 fbd9 	bl	d4a94 <_ZN4MQTT7connectEPKcS1_S1_>
   d42e2:	b120      	cbz	r0, d42ee <_Z12mqtt_connectv+0x1a>
   d42e4:	4907      	ldr	r1, [pc, #28]	; (d4304 <_Z12mqtt_connectv+0x30>)
   d42e6:	4808      	ldr	r0, [pc, #32]	; (d4308 <_Z12mqtt_connectv+0x34>)
   d42e8:	f7ff ff46 	bl	d4178 <_ZNK5spark6Logger4infoEPKcz>
  //TODO: if can't connect -> while can't connect, sleep for a few seconds, then retry. Pulse led red each retry
   d42ec:	bd08      	pop	{r3, pc}
  client.connect(MQTT_DEVICE_NAME, MQTT_USER, MQTT_PASS) ? Log.info("Connected") : Log.info("Couldn't connect");
   d42ee:	4907      	ldr	r1, [pc, #28]	; (d430c <_Z12mqtt_connectv+0x38>)
   d42f0:	e7f9      	b.n	d42e6 <_Z12mqtt_connectv+0x12>
   d42f2:	bf00      	nop
   d42f4:	000d8556 	.word	0x000d8556
   d42f8:	000d8544 	.word	0x000d8544
   d42fc:	000d855c 	.word	0x000d855c
   d4300:	2003e42c 	.word	0x2003e42c
   d4304:	000d8569 	.word	0x000d8569
   d4308:	2003e710 	.word	0x2003e710
   d430c:	000d8573 	.word	0x000d8573

000d4310 <_Z12mqtt_publishPcS_>:
{
   d4310:	b538      	push	{r3, r4, r5, lr}
   d4312:	4604      	mov	r4, r0
  if (!client.isConnected()) {
   d4314:	4806      	ldr	r0, [pc, #24]	; (d4330 <_Z12mqtt_publishPcS_+0x20>)
{
   d4316:	460d      	mov	r5, r1
  if (!client.isConnected()) {
   d4318:	f000 facb 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d431c:	b908      	cbnz	r0, d4322 <_Z12mqtt_publishPcS_+0x12>
    mqtt_connect();
   d431e:	f7ff ffd9 	bl	d42d4 <_Z12mqtt_connectv>
  client.publish(topic, msg);
   d4322:	462a      	mov	r2, r5
   d4324:	4621      	mov	r1, r4
   d4326:	4802      	ldr	r0, [pc, #8]	; (d4330 <_Z12mqtt_publishPcS_+0x20>)
}
   d4328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  client.publish(topic, msg);
   d432c:	f000 bc3d 	b.w	d4baa <_ZN4MQTT7publishEPKcS1_>
   d4330:	2003e42c 	.word	0x2003e42c

000d4334 <loop>:
void loop() {
   d4334:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    uart_char = Serial1.read();
   d4338:	f8df 80f4 	ldr.w	r8, [pc, #244]	; d4430 <loop+0xfc>
    if(start)
   d433c:	4f33      	ldr	r7, [pc, #204]	; (d440c <loop+0xd8>)
void loop() {
   d433e:	b085      	sub	sp, #20
   d4340:	4d33      	ldr	r5, [pc, #204]	; (d4410 <loop+0xdc>)
  while(Serial1.available())
   d4342:	f002 ffd1 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d4346:	6803      	ldr	r3, [r0, #0]
   d4348:	691b      	ldr	r3, [r3, #16]
   d434a:	4798      	blx	r3
   d434c:	2800      	cmp	r0, #0
   d434e:	d044      	beq.n	d43da <loop+0xa6>
    uart_char = Serial1.read();
   d4350:	f002 ffca 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d4354:	6803      	ldr	r3, [r0, #0]
   d4356:	695b      	ldr	r3, [r3, #20]
   d4358:	4798      	blx	r3
    if(start)
   d435a:	783b      	ldrb	r3, [r7, #0]
    uart_char = Serial1.read();
   d435c:	b2c0      	uxtb	r0, r0
   d435e:	f888 0000 	strb.w	r0, [r8]
    if(start)
   d4362:	b12b      	cbz	r3, d4370 <loop+0x3c>
      nodeId = uart_char;
   d4364:	4b2b      	ldr	r3, [pc, #172]	; (d4414 <loop+0xe0>)
   d4366:	7018      	strb	r0, [r3, #0]
    if(publish)
   d4368:	782b      	ldrb	r3, [r5, #0]
   d436a:	2b00      	cmp	r3, #0
   d436c:	d0e9      	beq.n	d4342 <loop+0xe>
   d436e:	e004      	b.n	d437a <loop+0x46>
    else if(uart_char == ';')
   d4370:	283b      	cmp	r0, #59	; 0x3b
   d4372:	d122      	bne.n	d43ba <loop+0x86>
      start = true;
   d4374:	2301      	movs	r3, #1
   d4376:	703b      	strb	r3, [r7, #0]
      publish = true;
   d4378:	702b      	strb	r3, [r5, #0]
      msg[idx] = '\0';
   d437a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; d4424 <loop+0xf0>
   d437e:	4e26      	ldr	r6, [pc, #152]	; (d4418 <loop+0xe4>)
   d4380:	f8d9 3000 	ldr.w	r3, [r9]
      sprintf(topic, TOPIC, nodeId);
   d4384:	4925      	ldr	r1, [pc, #148]	; (d441c <loop+0xe8>)
   d4386:	4826      	ldr	r0, [pc, #152]	; (d4420 <loop+0xec>)
      msg[idx] = '\0';
   d4388:	2400      	movs	r4, #0
   d438a:	54f4      	strb	r4, [r6, r3]
      sprintf(topic, TOPIC, nodeId);
   d438c:	4b21      	ldr	r3, [pc, #132]	; (d4414 <loop+0xe0>)
   d438e:	781a      	ldrb	r2, [r3, #0]
   d4390:	f001 f832 	bl	d53f8 <sprintf>
      mqtt_publish(topic, msg);
   d4394:	4822      	ldr	r0, [pc, #136]	; (d4420 <loop+0xec>)
   d4396:	4631      	mov	r1, r6
   d4398:	f7ff ffba 	bl	d4310 <_Z12mqtt_publishPcS_>
      memset(msg, '\0', 512);
   d439c:	f44f 7200 	mov.w	r2, #512	; 0x200
   d43a0:	4621      	mov	r1, r4
   d43a2:	4630      	mov	r0, r6
   d43a4:	f003 ff9e 	bl	d82e4 <memset>
      memset(topic, '\0', 16);
   d43a8:	481d      	ldr	r0, [pc, #116]	; (d4420 <loop+0xec>)
   d43aa:	2210      	movs	r2, #16
   d43ac:	4621      	mov	r1, r4
   d43ae:	f003 ff99 	bl	d82e4 <memset>
      idx = 0;
   d43b2:	f8c9 4000 	str.w	r4, [r9]
      publish = false;
   d43b6:	702c      	strb	r4, [r5, #0]
   d43b8:	e7c2      	b.n	d4340 <loop+0xc>
   d43ba:	4a1a      	ldr	r2, [pc, #104]	; (d4424 <loop+0xf0>)
   d43bc:	4916      	ldr	r1, [pc, #88]	; (d4418 <loop+0xe4>)
   d43be:	6813      	ldr	r3, [r2, #0]
    else if(idx >= 512-2)
   d43c0:	f5b3 7fff 	cmp.w	r3, #510	; 0x1fe
   d43c4:	f103 0401 	add.w	r4, r3, #1
   d43c8:	db04      	blt.n	d43d4 <loop+0xa0>
      publish = true;
   d43ca:	2601      	movs	r6, #1
      msg[idx++] = uart_char;
   d43cc:	54c8      	strb	r0, [r1, r3]
      publish = true;
   d43ce:	702e      	strb	r6, [r5, #0]
      msg[idx++] = uart_char;
   d43d0:	6014      	str	r4, [r2, #0]
   d43d2:	e7d2      	b.n	d437a <loop+0x46>
      msg[idx++] = uart_char;
   d43d4:	54c8      	strb	r0, [r1, r3]
   d43d6:	6014      	str	r4, [r2, #0]
   d43d8:	e7c6      	b.n	d4368 <loop+0x34>
  if (client.isConnected()) {
   d43da:	4813      	ldr	r0, [pc, #76]	; (d4428 <loop+0xf4>)
   d43dc:	f000 fa69 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d43e0:	b110      	cbz	r0, d43e8 <loop+0xb4>
    client.loop();
   d43e2:	4811      	ldr	r0, [pc, #68]	; (d4428 <loop+0xf4>)
   d43e4:	f000 fc3d 	bl	d4c62 <_ZN4MQTT4loopEv>
  if(!Serial1.available())
   d43e8:	f002 ff7e 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d43ec:	6803      	ldr	r3, [r0, #0]
   d43ee:	691b      	ldr	r3, [r3, #16]
   d43f0:	4798      	blx	r3
   d43f2:	b938      	cbnz	r0, d4404 <loop+0xd0>
    System.sleep(config);
   d43f4:	a801      	add	r0, sp, #4
   d43f6:	490d      	ldr	r1, [pc, #52]	; (d442c <loop+0xf8>)
   d43f8:	f001 f8a2 	bl	d5540 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d43fc:	9801      	ldr	r0, [sp, #4]
   d43fe:	b108      	cbz	r0, d4404 <loop+0xd0>
            free(wakeupSource_);
   d4400:	f000 ffea 	bl	d53d8 <free>
}
   d4404:	b005      	add	sp, #20
   d4406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d440a:	bf00      	nop
   d440c:	2003e3b4 	.word	0x2003e3b4
   d4410:	2003e6cd 	.word	0x2003e6cd
   d4414:	2003e6cc 	.word	0x2003e6cc
   d4418:	2003e4cc 	.word	0x2003e4cc
   d441c:	000d8584 	.word	0x000d8584
   d4420:	2003e6ce 	.word	0x2003e6ce
   d4424:	2003e4a4 	.word	0x2003e4a4
   d4428:	2003e42c 	.word	0x2003e42c
   d442c:	2003e48c 	.word	0x2003e48c
   d4430:	2003e6de 	.word	0x2003e6de

000d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4434:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4436:	e9d0 5300 	ldrd	r5, r3, [r0]
   d443a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d443c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d443e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4442:	42ae      	cmp	r6, r5
   d4444:	d004      	beq.n	d4450 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4446:	4628      	mov	r0, r5
   d4448:	f001 f8fc 	bl	d5644 <_ZN6StringD1Ev>
   d444c:	3514      	adds	r5, #20
   d444e:	e7f8      	b.n	d4442 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4450:	6820      	ldr	r0, [r4, #0]
   d4452:	f000 ffc1 	bl	d53d8 <free>
    AllocatorT::free(data_);
}
   d4456:	4620      	mov	r0, r4
   d4458:	bd70      	pop	{r4, r5, r6, pc}

000d445a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d445a:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d445e:	4604      	mov	r4, r0
   d4460:	460d      	mov	r5, r1
   d4462:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d4464:	d916      	bls.n	d4494 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d4466:	4290      	cmp	r0, r2
   d4468:	d215      	bcs.n	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d446a:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d446e:	1a75      	subs	r5, r6, r1
   d4470:	f1a1 0714 	sub.w	r7, r1, #20
   d4474:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d4476:	42b7      	cmp	r7, r6
   d4478:	d01c      	beq.n	d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d447a:	b12c      	cbz	r4, d4488 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d447c:	4631      	mov	r1, r6
   d447e:	4620      	mov	r0, r4
   d4480:	f001 f95c 	bl	d573c <_ZN6StringC1EOS_>
   d4484:	7c33      	ldrb	r3, [r6, #16]
   d4486:	7423      	strb	r3, [r4, #16]
   d4488:	4630      	mov	r0, r6
   d448a:	f001 f8db 	bl	d5644 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d448e:	3e14      	subs	r6, #20
   d4490:	3c14      	subs	r4, #20
   d4492:	e7f0      	b.n	d4476 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d4494:	d00e      	beq.n	d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d4496:	42b5      	cmp	r5, r6
   d4498:	d00c      	beq.n	d44b4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d449a:	b12c      	cbz	r4, d44a8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d449c:	4629      	mov	r1, r5
   d449e:	4620      	mov	r0, r4
   d44a0:	f001 f94c 	bl	d573c <_ZN6StringC1EOS_>
   d44a4:	7c2b      	ldrb	r3, [r5, #16]
   d44a6:	7423      	strb	r3, [r4, #16]
   d44a8:	4628      	mov	r0, r5
   d44aa:	f001 f8cb 	bl	d5644 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d44ae:	3514      	adds	r5, #20
   d44b0:	3414      	adds	r4, #20
   d44b2:	e7f0      	b.n	d4496 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d44b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d44ba:	2300      	movs	r3, #0
   d44bc:	e9c0 3300 	strd	r3, r3, [r0]
   d44c0:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44c2:	684f      	ldr	r7, [r1, #4]
   d44c4:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d44c6:	4604      	mov	r4, r0
   d44c8:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d44ca:	dd23      	ble.n	d4514 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d44cc:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d44d0:	fb08 f007 	mul.w	r0, r8, r7
   d44d4:	f000 ff78 	bl	d53c8 <malloc>
            if (!d) {
   d44d8:	4605      	mov	r5, r0
   d44da:	b1d8      	cbz	r0, d4514 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d44dc:	e9d4 1200 	ldrd	r1, r2, [r4]
   d44e0:	fb08 1202 	mla	r2, r8, r2, r1
   d44e4:	f7ff ffb9 	bl	d445a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d44e8:	6820      	ldr	r0, [r4, #0]
   d44ea:	f000 ff75 	bl	d53d8 <free>
        data_ = d;
   d44ee:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d44f0:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d44f2:	e9d6 7300 	ldrd	r7, r3, [r6]
   d44f6:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d44fa:	45b8      	cmp	r8, r7
   d44fc:	d008      	beq.n	d4510 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d44fe:	4639      	mov	r1, r7
   d4500:	4628      	mov	r0, r5
   d4502:	f001 f935 	bl	d5770 <_ZN6StringC1ERKS_>
   d4506:	7c3b      	ldrb	r3, [r7, #16]
   d4508:	742b      	strb	r3, [r5, #16]
   d450a:	3714      	adds	r7, #20
   d450c:	3514      	adds	r5, #20
   d450e:	e7f4      	b.n	d44fa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4510:	6873      	ldr	r3, [r6, #4]
   d4512:	6063      	str	r3, [r4, #4]
}
   d4514:	4620      	mov	r0, r4
   d4516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d451c <_GLOBAL__sub_I_logHandler>:
   d451c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d451e:	b08f      	sub	sp, #60	; 0x3c
        capacity_(0) {
   d4520:	2400      	movs	r4, #0
   d4522:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d4526:	9404      	str	r4, [sp, #16]
            StreamLogHandler(Serial, level, filters) {
   d4528:	f002 fe0a 	bl	d7140 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d452c:	4d2d      	ldr	r5, [pc, #180]	; (d45e4 <_GLOBAL__sub_I_logHandler+0xc8>)
   d452e:	4606      	mov	r6, r0
   d4530:	a902      	add	r1, sp, #8
   d4532:	a805      	add	r0, sp, #20
   d4534:	f7ff ffbf 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4538:	462f      	mov	r7, r5
        stream_(&stream) {
   d453a:	a905      	add	r1, sp, #20
   d453c:	a808      	add	r0, sp, #32
   d453e:	f7ff ffba 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4542:	4b29      	ldr	r3, [pc, #164]	; (d45e8 <_GLOBAL__sub_I_logHandler+0xcc>)
   d4544:	f847 3b04 	str.w	r3, [r7], #4
   d4548:	a908      	add	r1, sp, #32
   d454a:	a80b      	add	r0, sp, #44	; 0x2c
   d454c:	f7ff ffb3 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4550:	aa0b      	add	r2, sp, #44	; 0x2c
   d4552:	211e      	movs	r1, #30
   d4554:	4638      	mov	r0, r7
   d4556:	f002 f927 	bl	d67a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d455a:	a80b      	add	r0, sp, #44	; 0x2c
   d455c:	f7ff ff6a 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4560:	a808      	add	r0, sp, #32
   d4562:	f7ff ff67 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4566:	4b21      	ldr	r3, [pc, #132]	; (d45ec <_GLOBAL__sub_I_logHandler+0xd0>)
   d4568:	602b      	str	r3, [r5, #0]
   d456a:	622e      	str	r6, [r5, #32]
   d456c:	a805      	add	r0, sp, #20
   d456e:	f7ff ff61 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4572:	4b1f      	ldr	r3, [pc, #124]	; (d45f0 <_GLOBAL__sub_I_logHandler+0xd4>)
   d4574:	602b      	str	r3, [r5, #0]
        Serial.begin();
   d4576:	f002 fde3 	bl	d7140 <_Z16_fetch_usbserialv>
   d457a:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d457e:	f002 fdcf 	bl	d7120 <_ZN9USBSerial5beginEl>
SerialLogHandler logHandler;
   d4582:	4e1c      	ldr	r6, [pc, #112]	; (d45f4 <_GLOBAL__sub_I_logHandler+0xd8>)
        LogManager::instance()->addHandler(this);
   d4584:	f001 fdb8 	bl	d60f8 <_ZN5spark10LogManager8instanceEv>
   d4588:	4629      	mov	r1, r5
   d458a:	f002 f89f 	bl	d66cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
   d458e:	a802      	add	r0, sp, #8
   d4590:	f7ff ff50 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4594:	4632      	mov	r2, r6
   d4596:	4918      	ldr	r1, [pc, #96]	; (d45f8 <_GLOBAL__sub_I_logHandler+0xdc>)
   d4598:	4628      	mov	r0, r5
   d459a:	f003 fd41 	bl	d8020 <__aeabi_atexit>
        : config_(config) {
   d459e:	4817      	ldr	r0, [pc, #92]	; (d45fc <_GLOBAL__sub_I_logHandler+0xe0>)
MQTT client("condo.hatasaka.com", 1883, callback);
   d45a0:	4d17      	ldr	r5, [pc, #92]	; (d4600 <_GLOBAL__sub_I_logHandler+0xe4>)
              valid_(true) {
   d45a2:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d45a6:	4603      	mov	r3, r0
   d45a8:	1d02      	adds	r2, r0, #4
   d45aa:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d45ae:	709c      	strb	r4, [r3, #2]
   d45b0:	2301      	movs	r3, #1
   d45b2:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d45b4:	4b13      	ldr	r3, [pc, #76]	; (d4604 <_GLOBAL__sub_I_logHandler+0xe8>)
SystemSleepConfiguration config;
   d45b6:	4914      	ldr	r1, [pc, #80]	; (d4608 <_GLOBAL__sub_I_logHandler+0xec>)
   d45b8:	6043      	str	r3, [r0, #4]
   d45ba:	4632      	mov	r2, r6
        config_.wakeup_sources = nullptr;
   d45bc:	e9c0 4403 	strd	r4, r4, [r0, #12]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d45c0:	7204      	strb	r4, [r0, #8]
   d45c2:	f003 fd2d 	bl	d8020 <__aeabi_atexit>
MQTT client("condo.hatasaka.com", 1883, callback);
   d45c6:	4b11      	ldr	r3, [pc, #68]	; (d460c <_GLOBAL__sub_I_logHandler+0xf0>)
   d45c8:	4911      	ldr	r1, [pc, #68]	; (d4610 <_GLOBAL__sub_I_logHandler+0xf4>)
   d45ca:	9400      	str	r4, [sp, #0]
   d45cc:	f240 725b 	movw	r2, #1883	; 0x75b
   d45d0:	4628      	mov	r0, r5
   d45d2:	f000 f865 	bl	d46a0 <_ZN4MQTTC1EPctPFvS0_PhjEb>
   d45d6:	490f      	ldr	r1, [pc, #60]	; (d4614 <_GLOBAL__sub_I_logHandler+0xf8>)
   d45d8:	4632      	mov	r2, r6
   d45da:	4628      	mov	r0, r5
   d45dc:	f003 fd20 	bl	d8020 <__aeabi_atexit>
   d45e0:	b00f      	add	sp, #60	; 0x3c
   d45e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d45e4:	2003e4a8 	.word	0x2003e4a8
   d45e8:	000d85ac 	.word	0x000d85ac
   d45ec:	000d8788 	.word	0x000d8788
   d45f0:	000d85c4 	.word	0x000d85c4
   d45f4:	2003e428 	.word	0x2003e428
   d45f8:	000d4131 	.word	0x000d4131
   d45fc:	2003e48c 	.word	0x2003e48c
   d4600:	2003e42c 	.word	0x2003e42c
   d4604:	00030010 	.word	0x00030010
   d4608:	000d4119 	.word	0x000d4119
   d460c:	000d40d5 	.word	0x000d40d5
   d4610:	000d8591 	.word	0x000d8591
   d4614:	000d4e95 	.word	0x000d4e95

000d4618 <_ZN4MQTT11MutexLockerC1EPS_>:
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            this->mqtt = mqtt;
            if (mqtt->thread)
   d4618:	f891 305c 	ldrb.w	r3, [r1, #92]	; 0x5c
        MutexLocker(MQTT *mqtt) {
   d461c:	b510      	push	{r4, lr}
   d461e:	4604      	mov	r4, r0
            this->mqtt = mqtt;
   d4620:	6001      	str	r1, [r0, #0]
            if (mqtt->thread)
   d4622:	b113      	cbz	r3, d462a <_ZN4MQTT11MutexLockerC1EPS_+0x12>
                os_mutex_lock(mqtt->mutex_lock);
   d4624:	6d88      	ldr	r0, [r1, #88]	; 0x58
   d4626:	f000 fcd1 	bl	d4fcc <os_mutex_lock>
#endif
#endif
#endif
        }
   d462a:	4620      	mov	r0, r4
   d462c:	bd10      	pop	{r4, pc}

000d462e <_ZN4MQTT11MutexLockerD1Ev>:
        ~MutexLocker() {
   d462e:	b510      	push	{r4, lr}
#if defined(SPARK)
#if defined(PLATFORM_ID)
#if (PLATFORM_ID == 0)
#else
            if (mqtt->thread)
   d4630:	6803      	ldr	r3, [r0, #0]
   d4632:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
        ~MutexLocker() {
   d4636:	4604      	mov	r4, r0
            if (mqtt->thread)
   d4638:	b112      	cbz	r2, d4640 <_ZN4MQTT11MutexLockerD1Ev+0x12>
                os_mutex_unlock(mqtt->mutex_lock);
   d463a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   d463c:	f000 fcce 	bl	d4fdc <os_mutex_unlock>
#endif
#endif
#endif
        }
   d4640:	4620      	mov	r0, r4
   d4642:	bd10      	pop	{r4, pc}

000d4644 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>:
    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, int maxpacketsize, 
                    void (*callback)(char*,uint8_t*,unsigned int), bool thread) {
   d4644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4646:	461f      	mov	r7, r3
   d4648:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   d464c:	4604      	mov	r4, r0
   d464e:	460d      	mov	r5, r1
   d4650:	4616      	mov	r6, r2
    if (thread) {
   d4652:	b12b      	cbz	r3, d4660 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x1c>
        this->thread = true;
   d4654:	2301      	movs	r3, #1
   d4656:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
        os_mutex_create(&mutex_lock);
   d465a:	3058      	adds	r0, #88	; 0x58
   d465c:	f000 fcae 	bl	d4fbc <os_mutex_create>
    }
    this->callback = callback;
   d4660:	9b08      	ldr	r3, [sp, #32]
   d4662:	6323      	str	r3, [r4, #48]	; 0x30
    this->qoscallback = NULL;
   d4664:	2300      	movs	r3, #0
   d4666:	6363      	str	r3, [r4, #52]	; 0x34
    if (ip != NULL)
   d4668:	b106      	cbz	r6, d466c <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x28>
        this->ip = ip;
   d466a:	64a6      	str	r6, [r4, #72]	; 0x48
    if (domain != NULL)
   d466c:	b125      	cbz	r5, d4678 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x34>
        this->domain = domain;
   d466e:	4629      	mov	r1, r5
   d4670:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d4674:	f001 f887 	bl	d5786 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d4678:	9b06      	ldr	r3, [sp, #24]
   d467a:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d467c:	9b07      	ldr	r3, [sp, #28]
    if (buffer != NULL)
   d467e:	69e0      	ldr	r0, [r4, #28]
    this->port = port;
   d4680:	f8a4 704c 	strh.w	r7, [r4, #76]	; 0x4c
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d4684:	2bff      	cmp	r3, #255	; 0xff
   d4686:	bfb8      	it	lt
   d4688:	23ff      	movlt	r3, #255	; 0xff
   d468a:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d468e:	b108      	cbz	r0, d4694 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb+0x50>
      delete[] buffer;
   d4690:	f7ff fd05 	bl	d409e <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d4694:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d4698:	f7ff fcfd 	bl	d4096 <_Znaj>
   d469c:	61e0      	str	r0, [r4, #28]
}
   d469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46a0 <_ZN4MQTTC1EPctPFvS0_PhjEb>:
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d46a0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d46a4:	4604      	mov	r4, r0
            bool thread) {
   d46a6:	2500      	movs	r5, #0
MQTT::MQTT(char* domain, uint16_t port, void (*callback)(char*,uint8_t*,unsigned int),
   d46a8:	4617      	mov	r7, r2
   d46aa:	4698      	mov	r8, r3
   d46ac:	460e      	mov	r6, r1
            bool thread) {
   d46ae:	f003 f96b 	bl	d7988 <_ZN9TCPClientC1Ev>
   d46b2:	490d      	ldr	r1, [pc, #52]	; (d46e8 <_ZN4MQTTC1EPctPFvS0_PhjEb+0x48>)
   d46b4:	61e5      	str	r5, [r4, #28]
   d46b6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d46ba:	f001 f80e 	bl	d56da <_ZN6StringC1EPKc>
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d46be:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
            bool thread) {
   d46c2:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d46c4:	e9cd 8302 	strd	r8, r3, [sp, #8]
   d46c8:	22ff      	movs	r2, #255	; 0xff
   d46ca:	230f      	movs	r3, #15
   d46cc:	e9cd 3200 	strd	r3, r2, [sp]
   d46d0:	4620      	mov	r0, r4
            bool thread) {
   d46d2:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
    this->initialize(domain, NULL, port, MQTT_DEFAULT_KEEPALIVE, MQTT_MAX_PACKET_SIZE, callback, thread);
   d46d6:	463b      	mov	r3, r7
   d46d8:	462a      	mov	r2, r5
   d46da:	4631      	mov	r1, r6
   d46dc:	f7ff ffb2 	bl	d4644 <_ZN4MQTT10initializeEPcPhtiiPFvS0_S1_jEb>
}
   d46e0:	4620      	mov	r0, r4
   d46e2:	b004      	add	sp, #16
   d46e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d46e8:	000d874e 	.word	0x000d874e

000d46ec <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d46ec:	b510      	push	{r4, lr}
   d46ee:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d46f0:	4620      	mov	r0, r4
   d46f2:	f003 f8a5 	bl	d7840 <_ZN9TCPClient9availableEv>
   d46f6:	2800      	cmp	r0, #0
   d46f8:	d0fa      	beq.n	d46f0 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d46fa:	4620      	mov	r0, r4
   d46fc:	f002 ff59 	bl	d75b2 <_ZN9TCPClient4readEv>
}
   d4700:	b2c0      	uxtb	r0, r0
   d4702:	bd10      	pop	{r4, pc}

000d4704 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d4704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d4708:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d470a:	69c4      	ldr	r4, [r0, #28]
uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d470c:	460f      	mov	r7, r1
    buffer[len++] = readByte();
   d470e:	f7ff ffed 	bl	d46ec <_ZN4MQTT8readByteEv>
   d4712:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d4714:	69eb      	ldr	r3, [r5, #28]
   d4716:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d471a:	f04f 0901 	mov.w	r9, #1
   d471e:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d4722:	f04f 0800 	mov.w	r8, #0
    buffer[len++] = readByte();
   d4726:	464c      	mov	r4, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d4728:	4628      	mov	r0, r5
   d472a:	f7ff ffdf 	bl	d46ec <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d472e:	4626      	mov	r6, r4
   d4730:	69eb      	ldr	r3, [r5, #28]
   d4732:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d4734:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d4738:	fb13 f309 	smulbb	r3, r3, r9
   d473c:	4498      	add	r8, r3
        buffer[len++] = digit;
   d473e:	3401      	adds	r4, #1
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d4740:	0603      	lsls	r3, r0, #24
        buffer[len++] = digit;
   d4742:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d4744:	fa1f f888 	uxth.w	r8, r8
        multiplier *= 128;
   d4748:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d474c:	d4ec      	bmi.n	d4728 <_ZN4MQTT10readPacketEPh+0x24>
    *lengthLength = len-1;
   d474e:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d4750:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
    *lengthLength = len-1;
   d4754:	703b      	strb	r3, [r7, #0]
    if (isPublish) {
   d4756:	d124      	bne.n	d47a2 <_ZN4MQTT10readPacketEPh+0x9e>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d4758:	4628      	mov	r0, r5
   d475a:	69ef      	ldr	r7, [r5, #28]
   d475c:	f7ff ffc6 	bl	d46ec <_ZN4MQTT8readByteEv>
   d4760:	5538      	strb	r0, [r7, r4]
        buffer[len++] = readByte();
   d4762:	4628      	mov	r0, r5
   d4764:	69ef      	ldr	r7, [r5, #28]
   d4766:	1cf4      	adds	r4, r6, #3
   d4768:	f7ff ffc0 	bl	d46ec <_ZN4MQTT8readByteEv>
        buffer[len++] = readByte();
   d476c:	3602      	adds	r6, #2
        buffer[len++] = readByte();
   d476e:	b2b6      	uxth	r6, r6
   d4770:	b2a4      	uxth	r4, r4
   d4772:	55b8      	strb	r0, [r7, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d4774:	2602      	movs	r6, #2
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d4776:	b2b6      	uxth	r6, r6
   d4778:	46b1      	mov	r9, r6
   d477a:	4627      	mov	r7, r4
   d477c:	45c1      	cmp	r9, r8
   d477e:	d212      	bcs.n	d47a6 <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d4780:	4628      	mov	r0, r5
   d4782:	f7ff ffb3 	bl	d46ec <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d4786:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d478a:	42bb      	cmp	r3, r7
            buffer[len] = digit;
   d478c:	bf88      	it	hi
   d478e:	69eb      	ldrhi	r3, [r5, #28]
    for (uint16_t i = start;i<length;i++) {
   d4790:	f109 0901 	add.w	r9, r9, #1
            buffer[len] = digit;
   d4794:	bf88      	it	hi
   d4796:	55d8      	strbhi	r0, [r3, r7]
        }
        len++;
   d4798:	3701      	adds	r7, #1
   d479a:	b2bf      	uxth	r7, r7
    for (uint16_t i = start;i<length;i++) {
   d479c:	fa1f f989 	uxth.w	r9, r9
   d47a0:	e7ec      	b.n	d477c <_ZN4MQTT10readPacketEPh+0x78>
    uint8_t start = 0;
   d47a2:	2600      	movs	r6, #0
   d47a4:	e7e7      	b.n	d4776 <_ZN4MQTT10readPacketEPh+0x72>
   d47a6:	eba8 0006 	sub.w	r0, r8, r6
   d47aa:	45b0      	cmp	r8, r6
   d47ac:	bf2c      	ite	cs
   d47ae:	4606      	movcs	r6, r0
   d47b0:	2600      	movcc	r6, #0
   d47b2:	4434      	add	r4, r6
    }

    if (len > this->maxpacketsize) {
   d47b4:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
   d47b8:	b2a4      	uxth	r4, r4
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d47ba:	42a0      	cmp	r0, r4
   d47bc:	bf2c      	ite	cs
   d47be:	4620      	movcs	r0, r4
   d47c0:	2000      	movcc	r0, #0
   d47c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d47c6 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d47c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d47c8:	468c      	mov	ip, r1
   d47ca:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d47cc:	461d      	mov	r5, r3
bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d47ce:	4607      	mov	r7, r0
    uint8_t llen = 0;
   d47d0:	2300      	movs	r3, #0
    do {
        digit = len % 128;
   d47d2:	46ae      	mov	lr, r5
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d47d4:	a802      	add	r0, sp, #8
        digit = len % 128;
   d47d6:	f005 017f 	and.w	r1, r5, #127	; 0x7f
        if (len > 0) {
   d47da:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        lenBuf[pos++] = digit;
   d47de:	f103 0401 	add.w	r4, r3, #1
   d47e2:	4403      	add	r3, r0
            digit |= 0x80;
   d47e4:	bf88      	it	hi
   d47e6:	f041 0180 	orrhi.w	r1, r1, #128	; 0x80
        llen++;
    } while(len > 0);
   d47ea:	f1be 0f7f 	cmp.w	lr, #127	; 0x7f
        len = len / 128;
   d47ee:	ea4f 15d5 	mov.w	r5, r5, lsr #7
        lenBuf[pos++] = digit;
   d47f2:	b2e4      	uxtb	r4, r4
   d47f4:	f803 1c04 	strb.w	r1, [r3, #-4]
    } while(len > 0);
   d47f8:	d810      	bhi.n	d481c <_ZN4MQTT5writeEhPht+0x56>

    buf[4-llen] = header;
   d47fa:	f1c4 0304 	rsb	r3, r4, #4
   d47fe:	18d1      	adds	r1, r2, r3
   d4800:	f802 c003 	strb.w	ip, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d4804:	f1c4 0305 	rsb	r3, r4, #5
   d4808:	4413      	add	r3, r2
   d480a:	a801      	add	r0, sp, #4
   d480c:	3205      	adds	r2, #5
   d480e:	4293      	cmp	r3, r2
   d4810:	d006      	beq.n	d4820 <_ZN4MQTT5writeEhPht+0x5a>
        buf[5-llen+i] = lenBuf[i];
   d4812:	f810 5b01 	ldrb.w	r5, [r0], #1
   d4816:	f803 5b01 	strb.w	r5, [r3], #1
    for (int i = 0; i < llen; i++) {
   d481a:	e7f8      	b.n	d480e <_ZN4MQTT5writeEhPht+0x48>
        lenBuf[pos++] = digit;
   d481c:	4623      	mov	r3, r4
   d481e:	e7d8      	b.n	d47d2 <_ZN4MQTT5writeEhPht+0xc>
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d4820:	1c72      	adds	r2, r6, #1
   d4822:	4422      	add	r2, r4
   d4824:	4638      	mov	r0, r7
   d4826:	f002 fdee 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
   d482a:	4605      	mov	r5, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d482c:	f000 fb9a 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d4830:	1c62      	adds	r2, r4, #1
    lastOutActivity = millis();
   d4832:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d4834:	4432      	add	r2, r6
   d4836:	b2a8      	uxth	r0, r5
}
   d4838:	1a13      	subs	r3, r2, r0
   d483a:	4258      	negs	r0, r3
   d483c:	4158      	adcs	r0, r3
   d483e:	b003      	add	sp, #12
   d4840:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4842 <_ZN4MQTT10disconnectEv>:
        return write(MQTTUNSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
    }
    return false;
}

void MQTT::disconnect() {
   d4842:	b513      	push	{r0, r1, r4, lr}
   d4844:	4604      	mov	r4, r0
    MutexLocker lock(this);
   d4846:	4601      	mov	r1, r0
   d4848:	a801      	add	r0, sp, #4
   d484a:	f7ff fee5 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
    buffer[0] = MQTTDISCONNECT;
   d484e:	69e3      	ldr	r3, [r4, #28]
   d4850:	22e0      	movs	r2, #224	; 0xe0
   d4852:	701a      	strb	r2, [r3, #0]
    buffer[1] = 0;
   d4854:	69e3      	ldr	r3, [r4, #28]
   d4856:	2200      	movs	r2, #0
   d4858:	705a      	strb	r2, [r3, #1]
    _client.write(buffer,2);
   d485a:	69e1      	ldr	r1, [r4, #28]
   d485c:	2202      	movs	r2, #2
   d485e:	4620      	mov	r0, r4
   d4860:	f002 fdd1 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
    _client.stop();
   d4864:	4620      	mov	r0, r4
   d4866:	f003 f845 	bl	d78f4 <_ZN9TCPClient4stopEv>
   d486a:	f000 fb7b 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
    lastInActivity = lastOutActivity = millis();
   d486e:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
    MutexLocker lock(this);
   d4872:	a801      	add	r0, sp, #4
   d4874:	f7ff fedb 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4878:	b002      	add	sp, #8
   d487a:	bd10      	pop	{r4, pc}

000d487c <_ZN4MQTT11writeStringEPKcPht>:

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d487c:	3302      	adds	r3, #2
uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d487e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4880:	4604      	mov	r4, r0
    pos += 2;
   d4882:	b298      	uxth	r0, r3
   d4884:	2300      	movs	r3, #0
    while (*idp && pos < this->maxpacketsize) {
   d4886:	5ccd      	ldrb	r5, [r1, r3]
   d4888:	b155      	cbz	r5, d48a0 <_ZN4MQTT11writeStringEPKcPht+0x24>
   d488a:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d488e:	4286      	cmp	r6, r0
   d4890:	f103 0701 	add.w	r7, r3, #1
   d4894:	d904      	bls.n	d48a0 <_ZN4MQTT11writeStringEPKcPht+0x24>
        buf[pos++] = *idp++;
   d4896:	1c46      	adds	r6, r0, #1
   d4898:	5415      	strb	r5, [r2, r0]
    while (*idp && pos < this->maxpacketsize) {
   d489a:	463b      	mov	r3, r7
        buf[pos++] = *idp++;
   d489c:	b2b0      	uxth	r0, r6
    while (*idp && pos < this->maxpacketsize) {
   d489e:	e7f2      	b.n	d4886 <_ZN4MQTT11writeStringEPKcPht+0xa>
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d48a0:	b299      	uxth	r1, r3
   d48a2:	1a44      	subs	r4, r0, r1
   d48a4:	4422      	add	r2, r4
   d48a6:	1209      	asrs	r1, r1, #8
   d48a8:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d48ac:	f802 3c01 	strb.w	r3, [r2, #-1]
    return pos;
}
   d48b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d48b2 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d48b2:	b538      	push	{r3, r4, r5, lr}
   d48b4:	4604      	mov	r4, r0
    bool rc = (int)_client.connected();
   d48b6:	f002 fdbc 	bl	d7432 <_ZN9TCPClient9connectedEv>
   d48ba:	2800      	cmp	r0, #0
   d48bc:	bf14      	ite	ne
   d48be:	2501      	movne	r5, #1
   d48c0:	2500      	moveq	r5, #0
    if (!rc) _client.stop();
   d48c2:	d102      	bne.n	d48ca <_ZN4MQTT11isConnectedEv+0x18>
   d48c4:	4620      	mov	r0, r4
   d48c6:	f003 f815 	bl	d78f4 <_ZN9TCPClient4stopEv>
    return rc;
}
   d48ca:	4628      	mov	r0, r5
   d48cc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:
bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d48d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d48d4:	b088      	sub	sp, #32
   d48d6:	4604      	mov	r4, r0
   d48d8:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
   d48dc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   d48e0:	4689      	mov	r9, r1
   d48e2:	4617      	mov	r7, r2
   d48e4:	461e      	mov	r6, r3
    if (!isConnected()) {
   d48e6:	f7ff ffe4 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d48ea:	4605      	mov	r5, r0
   d48ec:	2800      	cmp	r0, #0
   d48ee:	f040 80cb 	bne.w	d4a88 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b8>
        MutexLocker lock(this);
   d48f2:	4621      	mov	r1, r4
   d48f4:	a801      	add	r0, sp, #4
   d48f6:	f7ff fe8f 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
        if (ip == NULL)
   d48fa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d48fc:	2900      	cmp	r1, #0
   d48fe:	f040 8087 	bne.w	d4a10 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x140>
            result = _client.connect(this->domain.c_str(), this->port);
   d4902:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4906:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d4908:	462b      	mov	r3, r5
   d490a:	4620      	mov	r0, r4
   d490c:	f002 fe96 	bl	d763c <_ZN9TCPClient7connectEPKctm>
        if (result) {
   d4910:	2800      	cmp	r0, #0
   d4912:	d079      	beq.n	d4a08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
            nextMsgId = 1;
   d4914:	2301      	movs	r3, #1
   d4916:	8423      	strh	r3, [r4, #32]
            if (version == MQTT_V311) {
   d4918:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
   d491c:	69e2      	ldr	r2, [r4, #28]
   d491e:	2b04      	cmp	r3, #4
   d4920:	f040 8081 	bne.w	d4a26 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d4924:	4b59      	ldr	r3, [pc, #356]	; (d4a8c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1bc>)
   d4926:	6818      	ldr	r0, [r3, #0]
   d4928:	8899      	ldrh	r1, [r3, #4]
   d492a:	799b      	ldrb	r3, [r3, #6]
   d492c:	f8ad 100c 	strh.w	r1, [sp, #12]
   d4930:	f88d 300e 	strb.w	r3, [sp, #14]
   d4934:	9002      	str	r0, [sp, #8]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d4936:	f8c2 0005 	str.w	r0, [r2, #5]
   d493a:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d493e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   d4942:	f8a2 1009 	strh.w	r1, [r2, #9]
   d4946:	72d3      	strb	r3, [r2, #11]
                length+=sizeof(MQTT_HEADER_V311);
   d4948:	230c      	movs	r3, #12
            if (willTopic) {
   d494a:	f1b8 0f00 	cmp.w	r8, #0
   d494e:	d07f      	beq.n	d4a50 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x180>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d4950:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
   d4954:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   d4958:	0140      	lsls	r0, r0, #5
   d495a:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
   d495e:	f040 0006 	orr.w	r0, r0, #6
   d4962:	b2c0      	uxtb	r0, r0
            if (!cleanSession) {
   d4964:	f1ba 0f00 	cmp.w	sl, #0
   d4968:	d101      	bne.n	d496e <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x9e>
              v = v&0xfd;
   d496a:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
            if(user != NULL) {
   d496e:	b11f      	cbz	r7, d4978 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
                if(pass != NULL) {
   d4970:	2e00      	cmp	r6, #0
   d4972:	d16f      	bne.n	d4a54 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x184>
                v = v|0x80;
   d4974:	f040 0080 	orr.w	r0, r0, #128	; 0x80
            buffer[length++] = v;
   d4978:	69e2      	ldr	r2, [r4, #28]
   d497a:	54d0      	strb	r0, [r2, r3]
            buffer[length++] = ((this->keepalive) >> 8);
   d497c:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d497e:	69e1      	ldr	r1, [r4, #28]
   d4980:	1c58      	adds	r0, r3, #1
   d4982:	1212      	asrs	r2, r2, #8
   d4984:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d4986:	1c9a      	adds	r2, r3, #2
   d4988:	69e1      	ldr	r1, [r4, #28]
   d498a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d498c:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d498e:	3303      	adds	r3, #3
   d4990:	69e2      	ldr	r2, [r4, #28]
   d4992:	4649      	mov	r1, r9
   d4994:	4620      	mov	r0, r4
   d4996:	f7ff ff71 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
   d499a:	4603      	mov	r3, r0
            if (willTopic) {
   d499c:	f1b8 0f00 	cmp.w	r8, #0
   d49a0:	d00b      	beq.n	d49ba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xea>
                length = writeString(willTopic, buffer, length);
   d49a2:	69e2      	ldr	r2, [r4, #28]
   d49a4:	4641      	mov	r1, r8
   d49a6:	4620      	mov	r0, r4
   d49a8:	f7ff ff68 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d49ac:	69e2      	ldr	r2, [r4, #28]
   d49ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
                length = writeString(willTopic, buffer, length);
   d49b0:	4603      	mov	r3, r0
                length = writeString(willMessage, buffer, length);
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff ff62 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
   d49b8:	4603      	mov	r3, r0
            if(user != NULL) {
   d49ba:	b167      	cbz	r7, d49d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                length = writeString(user,buffer,length);
   d49bc:	69e2      	ldr	r2, [r4, #28]
   d49be:	4639      	mov	r1, r7
   d49c0:	4620      	mov	r0, r4
   d49c2:	f7ff ff5b 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
   d49c6:	4603      	mov	r3, r0
                if(pass != NULL) {
   d49c8:	b12e      	cbz	r6, d49d6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x106>
                    length = writeString(pass,buffer,length);
   d49ca:	69e2      	ldr	r2, [r4, #28]
   d49cc:	4631      	mov	r1, r6
   d49ce:	4620      	mov	r0, r4
   d49d0:	f7ff ff54 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
   d49d4:	4603      	mov	r3, r0
            write(MQTTCONNECT, buffer, length-5);
   d49d6:	3b05      	subs	r3, #5
   d49d8:	69e2      	ldr	r2, [r4, #28]
   d49da:	b29b      	uxth	r3, r3
   d49dc:	2110      	movs	r1, #16
   d49de:	4620      	mov	r0, r4
   d49e0:	f7ff fef1 	bl	d47c6 <_ZN4MQTT5writeEhPht>
   d49e4:	f000 fabe 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();
   d49e8:	e9c4 0009 	strd	r0, r0, [r4, #36]	; 0x24
                if (t-lastInActivity > this->keepalive*1000UL) {
   d49ec:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
            while (!_client.available()) {
   d49f0:	4620      	mov	r0, r4
   d49f2:	f002 ff25 	bl	d7840 <_ZN9TCPClient9availableEv>
   d49f6:	bb80      	cbnz	r0, d4a5a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x18a>
   d49f8:	f000 fab4 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
                if (t-lastInActivity > this->keepalive*1000UL) {
   d49fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d49fe:	1ac0      	subs	r0, r0, r3
   d4a00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d4a02:	4373      	muls	r3, r6
   d4a04:	4298      	cmp	r0, r3
   d4a06:	d9f3      	bls.n	d49f0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
        _client.stop();
   d4a08:	4620      	mov	r0, r4
   d4a0a:	f002 ff73 	bl	d78f4 <_ZN9TCPClient4stopEv>
   d4a0e:	e034      	b.n	d4a7a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1aa>
            result = _client.connect(this->ip, this->port);
   d4a10:	a802      	add	r0, sp, #8
   d4a12:	f002 fb29 	bl	d7068 <_ZN9IPAddressC1EPKh>
   d4a16:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d4a1a:	462b      	mov	r3, r5
   d4a1c:	a902      	add	r1, sp, #8
   d4a1e:	4620      	mov	r0, r4
   d4a20:	f002 fe92 	bl	d7748 <_ZN9TCPClient7connectE9IPAddresstm>
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4a24:	e774      	b.n	d4910 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x40>
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d4a26:	4b1a      	ldr	r3, [pc, #104]	; (d4a90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1c0>)
   d4a28:	6818      	ldr	r0, [r3, #0]
   d4a2a:	6859      	ldr	r1, [r3, #4]
   d4a2c:	7a1b      	ldrb	r3, [r3, #8]
   d4a2e:	f10d 0c08 	add.w	ip, sp, #8
   d4a32:	e8ac 0003 	stmia.w	ip!, {r0, r1}
   d4a36:	f88c 3000 	strb.w	r3, [ip]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d4a3a:	ab02      	add	r3, sp, #8
   d4a3c:	cb03      	ldmia	r3!, {r0, r1}
   d4a3e:	f8c2 0005 	str.w	r0, [r2, #5]
   d4a42:	f8c2 1009 	str.w	r1, [r2, #9]
   d4a46:	f89c 3000 	ldrb.w	r3, [ip]
   d4a4a:	7353      	strb	r3, [r2, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d4a4c:	230e      	movs	r3, #14
   d4a4e:	e77c      	b.n	d494a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x7a>
                v = 0x02;
   d4a50:	2002      	movs	r0, #2
   d4a52:	e787      	b.n	d4964 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x94>
                    v = v|(0x80>>1);
   d4a54:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
   d4a58:	e78e      	b.n	d4978 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xa8>
            uint16_t len = readPacket(&llen);
   d4a5a:	a902      	add	r1, sp, #8
   d4a5c:	4620      	mov	r0, r4
   d4a5e:	f7ff fe51 	bl	d4704 <_ZN4MQTT10readPacketEPh>
            if (len == 4) {
   d4a62:	2804      	cmp	r0, #4
   d4a64:	d1d0      	bne.n	d4a08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
                if (buffer[3] == CONN_ACCEPT) {
   d4a66:	69e3      	ldr	r3, [r4, #28]
   d4a68:	78de      	ldrb	r6, [r3, #3]
   d4a6a:	2e00      	cmp	r6, #0
   d4a6c:	d1cc      	bne.n	d4a08 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x138>
   d4a6e:	f000 fa79 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
                    return true;
   d4a72:	2501      	movs	r5, #1
                    lastInActivity = millis();
   d4a74:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d4a76:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
        MutexLocker lock(this);
   d4a7a:	a801      	add	r0, sp, #4
   d4a7c:	f7ff fdd7 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4a80:	4628      	mov	r0, r5
   d4a82:	b008      	add	sp, #32
   d4a84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return false;
   d4a88:	2500      	movs	r5, #0
   d4a8a:	e7f9      	b.n	d4a80 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1b0>
   d4a8c:	000d85d4 	.word	0x000d85d4
   d4a90:	000d85db 	.word	0x000d85db

000d4a94 <_ZN4MQTT7connectEPKcS1_S1_>:
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4a94:	b510      	push	{r4, lr}
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4a96:	f04f 0c04 	mov.w	ip, #4
bool MQTT::connect(const char *id, const char *user, const char *pass) {
   d4a9a:	b086      	sub	sp, #24
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
   d4a9c:	2401      	movs	r4, #1
   d4a9e:	e9cd 4c04 	strd	r4, ip, [sp, #16]
   d4aa2:	2400      	movs	r4, #0
   d4aa4:	e9cd 4402 	strd	r4, r4, [sp, #8]
   d4aa8:	e9cd 4400 	strd	r4, r4, [sp]
   d4aac:	f7ff ff10 	bl	d48d0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d4ab0:	b006      	add	sp, #24
   d4ab2:	bd10      	pop	{r4, pc}

000d4ab4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4ab4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ab8:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   d4abc:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
   d4ac0:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
   d4ac4:	4604      	mov	r4, r0
   d4ac6:	468b      	mov	fp, r1
   d4ac8:	4616      	mov	r6, r2
   d4aca:	461f      	mov	r7, r3
    if (isConnected()) {
   d4acc:	f7ff fef1 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d4ad0:	4682      	mov	sl, r0
   d4ad2:	2800      	cmp	r0, #0
   d4ad4:	d051      	beq.n	d4b7a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xc6>
        MutexLocker lock(this);
   d4ad6:	4621      	mov	r1, r4
   d4ad8:	a801      	add	r0, sp, #4
   d4ada:	f7ff fd9d 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
        memset(buffer, 0, this->maxpacketsize);
   d4ade:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d4ae2:	69e0      	ldr	r0, [r4, #28]
   d4ae4:	2100      	movs	r1, #0
   d4ae6:	f003 fbfd 	bl	d82e4 <memset>
        length = writeString(topic, buffer, length);
   d4aea:	2305      	movs	r3, #5
   d4aec:	69e2      	ldr	r2, [r4, #28]
   d4aee:	4659      	mov	r1, fp
   d4af0:	4620      	mov	r0, r4
   d4af2:	f7ff fec3 	bl	d487c <_ZN4MQTT11writeStringEPKcPht>
        if (qos == QOS2 || qos == QOS1) {
   d4af6:	1e6b      	subs	r3, r5, #1
   d4af8:	2b01      	cmp	r3, #1
   d4afa:	d815      	bhi.n	d4b28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
            nextMsgId += 1;
   d4afc:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4afe:	69e3      	ldr	r3, [r4, #28]
            nextMsgId += 1;
   d4b00:	3101      	adds	r1, #1
   d4b02:	b289      	uxth	r1, r1
   d4b04:	8421      	strh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4b06:	1209      	asrs	r1, r1, #8
   d4b08:	5419      	strb	r1, [r3, r0]
   d4b0a:	1c42      	adds	r2, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
   d4b0c:	69e3      	ldr	r3, [r4, #28]
   d4b0e:	8c21      	ldrh	r1, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d4b10:	b292      	uxth	r2, r2
            buffer[length++] = (nextMsgId & 0xFF);
   d4b12:	3002      	adds	r0, #2
   d4b14:	5499      	strb	r1, [r3, r2]
   d4b16:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d4b18:	f1b8 0f00 	cmp.w	r8, #0
   d4b1c:	d004      	beq.n	d4b28 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x74>
                *messageid = nextMsgId++;
   d4b1e:	8c23      	ldrh	r3, [r4, #32]
   d4b20:	1c5a      	adds	r2, r3, #1
   d4b22:	8422      	strh	r2, [r4, #32]
   d4b24:	f8a8 3000 	strh.w	r3, [r8]
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d4b28:	2100      	movs	r1, #0
   d4b2a:	180b      	adds	r3, r1, r0
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4b2c:	428f      	cmp	r7, r1
   d4b2e:	69e2      	ldr	r2, [r4, #28]
   d4b30:	b29b      	uxth	r3, r3
   d4b32:	d90a      	bls.n	d4b4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
   d4b34:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
   d4b38:	459c      	cmp	ip, r3
   d4b3a:	d906      	bls.n	d4b4a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            buffer[length++] = payload[i];
   d4b3c:	f816 c001 	ldrb.w	ip, [r6, r1]
   d4b40:	f802 c003 	strb.w	ip, [r2, r3]
        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d4b44:	3101      	adds	r1, #1
   d4b46:	b289      	uxth	r1, r1
   d4b48:	e7ef      	b.n	d4b2a <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x76>
            header |= 1;
   d4b4a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
   d4b4e:	2900      	cmp	r1, #0
   d4b50:	bf0c      	ite	eq
   d4b52:	2130      	moveq	r1, #48	; 0x30
   d4b54:	2131      	movne	r1, #49	; 0x31
        if (dup) {
   d4b56:	f1b9 0f00 	cmp.w	r9, #0
   d4b5a:	d001      	beq.n	d4b60 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xac>
            header |= DUP_FLAG_ON_MASK;
   d4b5c:	f041 0108 	orr.w	r1, r1, #8
        if (qos == QOS2)
   d4b60:	2d02      	cmp	r5, #2
   d4b62:	d10e      	bne.n	d4b82 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xce>
            header |= MQTTQOS2_HEADER_MASK;
   d4b64:	f041 0104 	orr.w	r1, r1, #4
        return write(header, buffer, length-5);
   d4b68:	3b05      	subs	r3, #5
   d4b6a:	b29b      	uxth	r3, r3
   d4b6c:	4620      	mov	r0, r4
   d4b6e:	f7ff fe2a 	bl	d47c6 <_ZN4MQTT5writeEhPht>
   d4b72:	4682      	mov	sl, r0
        MutexLocker lock(this);
   d4b74:	a801      	add	r0, sp, #4
   d4b76:	f7ff fd5a 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4b7a:	4650      	mov	r0, sl
   d4b7c:	b003      	add	sp, #12
   d4b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        else if (qos == QOS1)
   d4b82:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d4b84:	bf08      	it	eq
   d4b86:	f041 0102 	orreq.w	r1, r1, #2
   d4b8a:	e7ed      	b.n	d4b68 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xb4>

000d4b8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:
bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d4b8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d4b8e:	9c08      	ldr	r4, [sp, #32]
   d4b90:	9403      	str	r4, [sp, #12]
   d4b92:	2400      	movs	r4, #0
   d4b94:	9402      	str	r4, [sp, #8]
   d4b96:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d4b9a:	9401      	str	r4, [sp, #4]
   d4b9c:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d4ba0:	9400      	str	r4, [sp, #0]
   d4ba2:	f7ff ff87 	bl	d4ab4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d4ba6:	b004      	add	sp, #16
   d4ba8:	bd10      	pop	{r4, pc}

000d4baa <_ZN4MQTT7publishEPKcS1_>:
bool MQTT::publish(const char* topic, const char* payload) {
   d4baa:	b530      	push	{r4, r5, lr}
   d4bac:	b087      	sub	sp, #28
   d4bae:	4604      	mov	r4, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4bb0:	4610      	mov	r0, r2
bool MQTT::publish(const char* topic, const char* payload) {
   d4bb2:	9105      	str	r1, [sp, #20]
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d4bb4:	9204      	str	r2, [sp, #16]
   d4bb6:	f003 fbea 	bl	d838e <strlen>
   d4bba:	2500      	movs	r5, #0
   d4bbc:	4603      	mov	r3, r0
   d4bbe:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d4bc2:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
   d4bc6:	9500      	str	r5, [sp, #0]
   d4bc8:	4620      	mov	r0, r4
   d4bca:	f7ff ffdf 	bl	d4b8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d4bce:	b007      	add	sp, #28
   d4bd0:	bd30      	pop	{r4, r5, pc}

000d4bd2 <_ZN4MQTT14publishReleaseEt>:
bool MQTT::publishRelease(uint16_t messageid) {
   d4bd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4bd4:	4604      	mov	r4, r0
   d4bd6:	460e      	mov	r6, r1
    if (isConnected()) {
   d4bd8:	f7ff fe6b 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d4bdc:	4605      	mov	r5, r0
   d4bde:	b1c8      	cbz	r0, d4c14 <_ZN4MQTT14publishReleaseEt+0x42>
        MutexLocker lock(this);
   d4be0:	4621      	mov	r1, r4
   d4be2:	a801      	add	r0, sp, #4
   d4be4:	f7ff fd18 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d4be8:	69e3      	ldr	r3, [r4, #28]
   d4bea:	2262      	movs	r2, #98	; 0x62
   d4bec:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4bee:	69e3      	ldr	r3, [r4, #28]
   d4bf0:	2202      	movs	r2, #2
   d4bf2:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4bf4:	69e3      	ldr	r3, [r4, #28]
   d4bf6:	1232      	asrs	r2, r6, #8
   d4bf8:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4bfa:	69e3      	ldr	r3, [r4, #28]
   d4bfc:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4bfe:	69e1      	ldr	r1, [r4, #28]
   d4c00:	2204      	movs	r2, #4
   d4c02:	4620      	mov	r0, r4
   d4c04:	f002 fbff 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
   d4c08:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4c0a:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4c0c:	bf18      	it	ne
   d4c0e:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4c10:	f7ff fd0d 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4c14:	4628      	mov	r0, r5
   d4c16:	b002      	add	sp, #8
   d4c18:	bd70      	pop	{r4, r5, r6, pc}

000d4c1a <_ZN4MQTT15publishCompleteEt>:
bool MQTT::publishComplete(uint16_t messageid) {
   d4c1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4c1c:	4604      	mov	r4, r0
   d4c1e:	460e      	mov	r6, r1
    if (isConnected()) {
   d4c20:	f7ff fe47 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d4c24:	4605      	mov	r5, r0
   d4c26:	b1c8      	cbz	r0, d4c5c <_ZN4MQTT15publishCompleteEt+0x42>
        MutexLocker lock(this);
   d4c28:	4621      	mov	r1, r4
   d4c2a:	a801      	add	r0, sp, #4
   d4c2c:	f7ff fcf4 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d4c30:	69e3      	ldr	r3, [r4, #28]
   d4c32:	2272      	movs	r2, #114	; 0x72
   d4c34:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d4c36:	69e3      	ldr	r3, [r4, #28]
   d4c38:	2202      	movs	r2, #2
   d4c3a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d4c3c:	69e3      	ldr	r3, [r4, #28]
   d4c3e:	1232      	asrs	r2, r6, #8
   d4c40:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d4c42:	69e3      	ldr	r3, [r4, #28]
   d4c44:	70de      	strb	r6, [r3, #3]
        return _client.write(buffer, length);
   d4c46:	69e1      	ldr	r1, [r4, #28]
   d4c48:	2204      	movs	r2, #4
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f002 fbdb 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
   d4c50:	1e05      	subs	r5, r0, #0
        MutexLocker lock(this);
   d4c52:	a801      	add	r0, sp, #4
        return _client.write(buffer, length);
   d4c54:	bf18      	it	ne
   d4c56:	2501      	movne	r5, #1
        MutexLocker lock(this);
   d4c58:	f7ff fce9 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4c5c:	4628      	mov	r0, r5
   d4c5e:	b002      	add	sp, #8
   d4c60:	bd70      	pop	{r4, r5, r6, pc}

000d4c62 <_ZN4MQTT4loopEv>:
bool MQTT::loop() {
   d4c62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4c66:	ed2d 8b02 	vpush	{d8}
   d4c6a:	b087      	sub	sp, #28
   d4c6c:	af00      	add	r7, sp, #0
   d4c6e:	4604      	mov	r4, r0
    if (isConnected()) {
   d4c70:	f7ff fe1f 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d4c74:	4681      	mov	r9, r0
   d4c76:	b1f8      	cbz	r0, d4cb8 <_ZN4MQTT4loopEv+0x56>
        MutexLocker lock(this);
   d4c78:	4621      	mov	r1, r4
   d4c7a:	f107 0014 	add.w	r0, r7, #20
   d4c7e:	f7ff fccb 	bl	d4618 <_ZN4MQTT11MutexLockerC1EPS_>
   d4c82:	f000 f96f 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d4c86:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d4c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4c8c:	4353      	muls	r3, r2
   d4c8e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d4c90:	1a82      	subs	r2, r0, r2
   d4c92:	429a      	cmp	r2, r3
   d4c94:	4606      	mov	r6, r0
   d4c96:	d803      	bhi.n	d4ca0 <_ZN4MQTT4loopEv+0x3e>
   d4c98:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d4c9a:	1a82      	subs	r2, r0, r2
   d4c9c:	4293      	cmp	r3, r2
   d4c9e:	d221      	bcs.n	d4ce4 <_ZN4MQTT4loopEv+0x82>
            if (pingOutstanding) {
   d4ca0:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d4ca4:	b17b      	cbz	r3, d4cc6 <_ZN4MQTT4loopEv+0x64>
                _client.stop();
   d4ca6:	4620      	mov	r0, r4
   d4ca8:	f002 fe24 	bl	d78f4 <_ZN9TCPClient4stopEv>
                return false;
   d4cac:	f04f 0900 	mov.w	r9, #0
        MutexLocker lock(this);
   d4cb0:	f107 0014 	add.w	r0, r7, #20
   d4cb4:	f7ff fcbb 	bl	d462e <_ZN4MQTT11MutexLockerD1Ev>
}
   d4cb8:	4648      	mov	r0, r9
   d4cba:	371c      	adds	r7, #28
   d4cbc:	46bd      	mov	sp, r7
   d4cbe:	ecbd 8b02 	vpop	{d8}
   d4cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                buffer[0] = MQTTPINGREQ;
   d4cc6:	69e2      	ldr	r2, [r4, #28]
   d4cc8:	21c0      	movs	r1, #192	; 0xc0
   d4cca:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d4ccc:	69e2      	ldr	r2, [r4, #28]
   d4cce:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d4cd0:	69e1      	ldr	r1, [r4, #28]
   d4cd2:	2202      	movs	r2, #2
   d4cd4:	4620      	mov	r0, r4
   d4cd6:	f002 fb96 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
                lastInActivity = t;
   d4cda:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
                pingOutstanding = true;
   d4cde:	2301      	movs	r3, #1
   d4ce0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        if (_client.available()) {
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	f002 fdab 	bl	d7840 <_ZN9TCPClient9availableEv>
   d4cea:	2800      	cmp	r0, #0
   d4cec:	d0e0      	beq.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
            uint16_t len = readPacket(&llen);
   d4cee:	f107 0113 	add.w	r1, r7, #19
   d4cf2:	4620      	mov	r0, r4
   d4cf4:	f7ff fd06 	bl	d4704 <_ZN4MQTT10readPacketEPh>
            if (len > 0) {
   d4cf8:	4683      	mov	fp, r0
   d4cfa:	2800      	cmp	r0, #0
   d4cfc:	d0d8      	beq.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                uint8_t type = buffer[0]&0xF0;
   d4cfe:	69e3      	ldr	r3, [r4, #28]
                lastInActivity = t;
   d4d00:	62a6      	str	r6, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d4d02:	7819      	ldrb	r1, [r3, #0]
   d4d04:	f001 02f0 	and.w	r2, r1, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d4d08:	2a30      	cmp	r2, #48	; 0x30
   d4d0a:	d17f      	bne.n	d4e0c <_ZN4MQTT4loopEv+0x1aa>
                    if (callback) {
   d4d0c:	f8d4 a030 	ldr.w	sl, [r4, #48]	; 0x30
   d4d10:	f1ba 0f00 	cmp.w	sl, #0
   d4d14:	d0cc      	beq.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4d16:	f897 c013 	ldrb.w	ip, [r7, #19]
                        }
   d4d1a:	466a      	mov	r2, sp
   d4d1c:	ee08 2a10 	vmov	s16, r2
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d4d20:	eb03 020c 	add.w	r2, r3, ip
   d4d24:	7855      	ldrb	r5, [r2, #1]
   d4d26:	7891      	ldrb	r1, [r2, #2]
   d4d28:	eb01 2105 	add.w	r1, r1, r5, lsl #8
   d4d2c:	b28d      	uxth	r5, r1
                        char topic[tl+1];
   d4d2e:	f105 0208 	add.w	r2, r5, #8
   d4d32:	4669      	mov	r1, sp
   d4d34:	08d2      	lsrs	r2, r2, #3
   d4d36:	eba1 02c2 	sub.w	r2, r1, r2, lsl #3
   d4d3a:	4695      	mov	sp, r2
   d4d3c:	f10c 0203 	add.w	r2, ip, #3
   d4d40:	60fa      	str	r2, [r7, #12]
   d4d42:	eb03 0e02 	add.w	lr, r3, r2
   d4d46:	eb0d 0205 	add.w	r2, sp, r5
   d4d4a:	4668      	mov	r0, sp
                        for (uint16_t i=0;i<tl;i++) {
   d4d4c:	f8c7 d008 	str.w	sp, [r7, #8]
   d4d50:	607a      	str	r2, [r7, #4]
   d4d52:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
   d4d56:	428a      	cmp	r2, r1
   d4d58:	d006      	beq.n	d4d68 <_ZN4MQTT4loopEv+0x106>
                            topic[i] = buffer[llen+3+i];
   d4d5a:	460a      	mov	r2, r1
   d4d5c:	f81e 8b01 	ldrb.w	r8, [lr], #1
   d4d60:	f802 8b01 	strb.w	r8, [r2], #1
   d4d64:	60ba      	str	r2, [r7, #8]
                        for (uint16_t i=0;i<tl;i++) {
   d4d66:	e7f4      	b.n	d4d52 <_ZN4MQTT4loopEv+0xf0>
                        topic[tl] = 0;
   d4d68:	2200      	movs	r2, #0
   d4d6a:	5542      	strb	r2, [r0, r5]
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4d6c:	f893 8000 	ldrb.w	r8, [r3]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4d70:	68f9      	ldr	r1, [r7, #12]
   d4d72:	f008 0806 	and.w	r8, r8, #6
   d4d76:	ebab 020c 	sub.w	r2, fp, ip
   d4d7a:	3a03      	subs	r2, #3
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4d7c:	f1b8 0f02 	cmp.w	r8, #2
   d4d80:	eba2 0205 	sub.w	r2, r2, r5
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4d84:	4429      	add	r1, r5
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d4d86:	d125      	bne.n	d4dd4 <_ZN4MQTT4loopEv+0x172>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4d88:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4d8c:	4419      	add	r1, r3
                            callback(topic,payload,len-llen-3-tl-2);
   d4d8e:	3a02      	subs	r2, #2
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4d90:	f891 b001 	ldrb.w	fp, [r1, #1]
                            payload = buffer+llen+3+tl+2;
   d4d94:	f10c 0105 	add.w	r1, ip, #5
   d4d98:	4429      	add	r1, r5
                            callback(topic,payload,len-llen-3-tl-2);
   d4d9a:	4419      	add	r1, r3
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4d9c:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                            callback(topic,payload,len-llen-3-tl-2);
   d4da0:	47d0      	blx	sl
                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d4da2:	69e3      	ldr	r3, [r4, #28]
   d4da4:	2240      	movs	r2, #64	; 0x40
   d4da6:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d4da8:	69e3      	ldr	r3, [r4, #28]
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d4daa:	fa1f fb8b 	uxth.w	fp, fp
                            buffer[1] = 2;
   d4dae:	f883 8001 	strb.w	r8, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d4db2:	69e3      	ldr	r3, [r4, #28]
   d4db4:	ea4f 222b 	mov.w	r2, fp, asr #8
   d4db8:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d4dba:	69e3      	ldr	r3, [r4, #28]
   d4dbc:	f883 b003 	strb.w	fp, [r3, #3]
                            _client.write(buffer,4);
   d4dc0:	69e1      	ldr	r1, [r4, #28]
   d4dc2:	2204      	movs	r2, #4
   d4dc4:	4620      	mov	r0, r4
   d4dc6:	f002 fb1e 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
                            lastOutActivity = t;
   d4dca:	6266      	str	r6, [r4, #36]	; 0x24
   d4dcc:	ee18 3a10 	vmov	r3, s16
   d4dd0:	469d      	mov	sp, r3
   d4dd2:	e76d      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                                    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d4dd4:	f1b8 0f04 	cmp.w	r8, #4
   d4dd8:	d115      	bne.n	d4e06 <_ZN4MQTT4loopEv+0x1a4>
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4dda:	f813 e001 	ldrb.w	lr, [r3, r1]
   d4dde:	4419      	add	r1, r3
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4de0:	3a02      	subs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4de2:	f891 b001 	ldrb.w	fp, [r1, #1]
                                        payload = buffer + llen + 3 + tl + 2;
   d4de6:	f10c 0105 	add.w	r1, ip, #5
   d4dea:	4429      	add	r1, r5
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4dec:	4419      	add	r1, r3
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4dee:	eb0b 2b0e 	add.w	fp, fp, lr, lsl #8
                                        callback(topic, payload, len - llen - 3 - tl - 2);
   d4df2:	47d0      	blx	sl
                                        buffer[0] = MQTTPUBREC; // respond with PUBREC
   d4df4:	69e3      	ldr	r3, [r4, #28]
   d4df6:	2250      	movs	r2, #80	; 0x50
   d4df8:	701a      	strb	r2, [r3, #0]
                                        buffer[1] = 2;
   d4dfa:	69e3      	ldr	r3, [r4, #28]
   d4dfc:	2202      	movs	r2, #2
                                        msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d4dfe:	fa1f fb8b 	uxth.w	fp, fp
                                        buffer[1] = 2;
   d4e02:	705a      	strb	r2, [r3, #1]
                                        buffer[2] = (msgId >> 8);
   d4e04:	e7d5      	b.n	d4db2 <_ZN4MQTT4loopEv+0x150>
                            callback(topic,payload,len-llen-3-tl);
   d4e06:	4419      	add	r1, r3
   d4e08:	47d0      	blx	sl
   d4e0a:	e7df      	b.n	d4dcc <_ZN4MQTT4loopEv+0x16a>
                } else if (type == MQTTPUBREC) {
   d4e0c:	2a50      	cmp	r2, #80	; 0x50
   d4e0e:	d108      	bne.n	d4e22 <_ZN4MQTT4loopEv+0x1c0>
                    msgId = (buffer[2] << 8) + buffer[3];
   d4e10:	789a      	ldrb	r2, [r3, #2]
   d4e12:	78d9      	ldrb	r1, [r3, #3]
   d4e14:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                    this->publishRelease(msgId);
   d4e18:	b289      	uxth	r1, r1
   d4e1a:	4620      	mov	r0, r4
   d4e1c:	f7ff fed9 	bl	d4bd2 <_ZN4MQTT14publishReleaseEt>
   d4e20:	e746      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBACK) {
   d4e22:	2a40      	cmp	r2, #64	; 0x40
   d4e24:	d112      	bne.n	d4e4c <_ZN4MQTT4loopEv+0x1ea>
                if (qoscallback) {
   d4e26:	6b62      	ldr	r2, [r4, #52]	; 0x34
   d4e28:	2a00      	cmp	r2, #0
   d4e2a:	f43f af41 	beq.w	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                    if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d4e2e:	f1bb 0f04 	cmp.w	fp, #4
   d4e32:	f47f af3d 	bne.w	d4cb0 <_ZN4MQTT4loopEv+0x4e>
   d4e36:	f011 0f06 	tst.w	r1, #6
   d4e3a:	f47f af39 	bne.w	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                        msgId = (buffer[2]<<8)+buffer[3];
   d4e3e:	7899      	ldrb	r1, [r3, #2]
   d4e40:	78d8      	ldrb	r0, [r3, #3]
   d4e42:	eb00 2001 	add.w	r0, r0, r1, lsl #8
                        this->qoscallback(msgId);
   d4e46:	b280      	uxth	r0, r0
   d4e48:	4790      	blx	r2
   d4e4a:	e731      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBREL) {
   d4e4c:	2a60      	cmp	r2, #96	; 0x60
   d4e4e:	d108      	bne.n	d4e62 <_ZN4MQTT4loopEv+0x200>
                msgId = (buffer[2] << 8) + buffer[3];
   d4e50:	789a      	ldrb	r2, [r3, #2]
   d4e52:	78d9      	ldrb	r1, [r3, #3]
   d4e54:	eb01 2102 	add.w	r1, r1, r2, lsl #8
                this->publishComplete(msgId);
   d4e58:	b289      	uxth	r1, r1
   d4e5a:	4620      	mov	r0, r4
   d4e5c:	f7ff fedd 	bl	d4c1a <_ZN4MQTT15publishCompleteEt>
   d4e60:	e726      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPUBCOMP) {
   d4e62:	2a70      	cmp	r2, #112	; 0x70
   d4e64:	d0df      	beq.n	d4e26 <_ZN4MQTT4loopEv+0x1c4>
                } else if (type == MQTTSUBACK) {
   d4e66:	2a90      	cmp	r2, #144	; 0x90
   d4e68:	f43f af22 	beq.w	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGREQ) {
   d4e6c:	2ac0      	cmp	r2, #192	; 0xc0
   d4e6e:	d10a      	bne.n	d4e86 <_ZN4MQTT4loopEv+0x224>
                    buffer[0] = MQTTPINGRESP;
   d4e70:	22d0      	movs	r2, #208	; 0xd0
   d4e72:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d4e74:	69e3      	ldr	r3, [r4, #28]
   d4e76:	2200      	movs	r2, #0
   d4e78:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d4e7a:	69e1      	ldr	r1, [r4, #28]
   d4e7c:	2202      	movs	r2, #2
   d4e7e:	4620      	mov	r0, r4
   d4e80:	f002 fac1 	bl	d7406 <_ZN9TCPClient5writeEPKhj>
   d4e84:	e714      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
                } else if (type == MQTTPINGRESP) {
   d4e86:	2ad0      	cmp	r2, #208	; 0xd0
                    pingOutstanding = false;
   d4e88:	bf04      	itt	eq
   d4e8a:	2300      	moveq	r3, #0
   d4e8c:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
   d4e90:	e70e      	b.n	d4cb0 <_ZN4MQTT4loopEv+0x4e>
	...

000d4e94 <_ZN4MQTTD1Ev>:
MQTT::~MQTT() {
   d4e94:	b538      	push	{r3, r4, r5, lr}
   d4e96:	4605      	mov	r5, r0
    if (isConnected()) {
   d4e98:	f7ff fd0b 	bl	d48b2 <_ZN4MQTT11isConnectedEv>
   d4e9c:	b110      	cbz	r0, d4ea4 <_ZN4MQTTD1Ev+0x10>
        disconnect();
   d4e9e:	4628      	mov	r0, r5
   d4ea0:	f7ff fccf 	bl	d4842 <_ZN4MQTT10disconnectEv>
    if (buffer != NULL)
   d4ea4:	69e8      	ldr	r0, [r5, #28]
   d4ea6:	b108      	cbz	r0, d4eac <_ZN4MQTTD1Ev+0x18>
      delete[] buffer;
   d4ea8:	f7ff f8f9 	bl	d409e <_ZdaPv>
MQTT::~MQTT() {
   d4eac:	f105 0038 	add.w	r0, r5, #56	; 0x38
   d4eb0:	f000 fbc8 	bl	d5644 <_ZN6StringD1Ev>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4eb4:	69ac      	ldr	r4, [r5, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4eb6:	4b0a      	ldr	r3, [pc, #40]	; (d4ee0 <_ZN4MQTTD1Ev+0x4c>)
   d4eb8:	602b      	str	r3, [r5, #0]
   d4eba:	b17c      	cbz	r4, d4edc <_ZN4MQTTD1Ev+0x48>
      if (--_M_use_count == 0)
   d4ebc:	6863      	ldr	r3, [r4, #4]
   d4ebe:	3b01      	subs	r3, #1
   d4ec0:	6063      	str	r3, [r4, #4]
   d4ec2:	b95b      	cbnz	r3, d4edc <_ZN4MQTTD1Ev+0x48>
          _M_dispose();
   d4ec4:	6823      	ldr	r3, [r4, #0]
   d4ec6:	4620      	mov	r0, r4
   d4ec8:	689b      	ldr	r3, [r3, #8]
   d4eca:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4ecc:	68a3      	ldr	r3, [r4, #8]
   d4ece:	3b01      	subs	r3, #1
   d4ed0:	60a3      	str	r3, [r4, #8]
   d4ed2:	b91b      	cbnz	r3, d4edc <_ZN4MQTTD1Ev+0x48>
            _M_destroy();
   d4ed4:	6823      	ldr	r3, [r4, #0]
   d4ed6:	4620      	mov	r0, r4
   d4ed8:	68db      	ldr	r3, [r3, #12]
   d4eda:	4798      	blx	r3
}
   d4edc:	4628      	mov	r0, r5
   d4ede:	bd38      	pop	{r3, r4, r5, pc}
   d4ee0:	000d8900 	.word	0x000d8900

000d4ee4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <netdb_freeaddrinfo+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	689b      	ldr	r3, [r3, #8]
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030268 	.word	0x00030268

000d4ef4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <netdb_getaddrinfo+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	68db      	ldr	r3, [r3, #12]
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030268 	.word	0x00030268

000d4f04 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_Pin_Mode+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	689b      	ldr	r3, [r3, #8]
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	0003022c 	.word	0x0003022c

000d4f14 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_Get_Pin_Mode+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	68db      	ldr	r3, [r3, #12]
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	0003022c 	.word	0x0003022c

000d4f24 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_GPIO_Write+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	691b      	ldr	r3, [r3, #16]
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	0003022c 	.word	0x0003022c

000d4f34 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <if_index_to_name+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	695b      	ldr	r3, [r3, #20]
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	0003026c 	.word	0x0003026c

000d4f44 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_RNG_GetRandomNumber+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	685b      	ldr	r3, [r3, #4]
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030218 	.word	0x00030218

000d4f54 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_Delay_Microseconds+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	68db      	ldr	r3, [r3, #12]
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030218 	.word	0x00030218

000d4f64 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	695b      	ldr	r3, [r3, #20]
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030218 	.word	0x00030218

000d4f74 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <hal_ble_stack_init+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	689b      	ldr	r3, [r3, #8]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030278 	.word	0x00030278

000d4f84 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <hal_ble_stack_deinit+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	68db      	ldr	r3, [r3, #12]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030278 	.word	0x00030278

000d4f94 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b03      	ldr	r3, [pc, #12]	; (d4fa4 <hal_ble_gap_disconnect+0x10>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4f9e:	9301      	str	r3, [sp, #4]
   d4fa0:	bd08      	pop	{r3, pc}
   d4fa2:	0000      	.short	0x0000
   d4fa4:	00030278 	.word	0x00030278

000d4fa8 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4fa8:	b508      	push	{r3, lr}
   d4faa:	4b03      	ldr	r3, [pc, #12]	; (d4fb8 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4fac:	681b      	ldr	r3, [r3, #0]
   d4fae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4fb2:	9301      	str	r3, [sp, #4]
   d4fb4:	bd08      	pop	{r3, pc}
   d4fb6:	0000      	.short	0x0000
   d4fb8:	00030278 	.word	0x00030278

000d4fbc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4fbc:	b508      	push	{r3, lr}
   d4fbe:	4b02      	ldr	r3, [pc, #8]	; (d4fc8 <os_mutex_create+0xc>)
   d4fc0:	681b      	ldr	r3, [r3, #0]
   d4fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4fc4:	9301      	str	r3, [sp, #4]
   d4fc6:	bd08      	pop	{r3, pc}
   d4fc8:	00030248 	.word	0x00030248

000d4fcc <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d4fcc:	b508      	push	{r3, lr}
   d4fce:	4b02      	ldr	r3, [pc, #8]	; (d4fd8 <os_mutex_lock+0xc>)
   d4fd0:	681b      	ldr	r3, [r3, #0]
   d4fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4fd4:	9301      	str	r3, [sp, #4]
   d4fd6:	bd08      	pop	{r3, pc}
   d4fd8:	00030248 	.word	0x00030248

000d4fdc <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d4fdc:	b508      	push	{r3, lr}
   d4fde:	4b02      	ldr	r3, [pc, #8]	; (d4fe8 <os_mutex_unlock+0xc>)
   d4fe0:	681b      	ldr	r3, [r3, #0]
   d4fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4fe4:	9301      	str	r3, [sp, #4]
   d4fe6:	bd08      	pop	{r3, pc}
   d4fe8:	00030248 	.word	0x00030248

000d4fec <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4fec:	b508      	push	{r3, lr}
   d4fee:	4b02      	ldr	r3, [pc, #8]	; (d4ff8 <os_mutex_recursive_create+0xc>)
   d4ff0:	681b      	ldr	r3, [r3, #0]
   d4ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4ff4:	9301      	str	r3, [sp, #4]
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	00030248 	.word	0x00030248

000d4ffc <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4ffc:	b508      	push	{r3, lr}
   d4ffe:	4b02      	ldr	r3, [pc, #8]	; (d5008 <os_mutex_recursive_destroy+0xc>)
   d5000:	681b      	ldr	r3, [r3, #0]
   d5002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5004:	9301      	str	r3, [sp, #4]
   d5006:	bd08      	pop	{r3, pc}
   d5008:	00030248 	.word	0x00030248

000d500c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d500c:	b508      	push	{r3, lr}
   d500e:	4b02      	ldr	r3, [pc, #8]	; (d5018 <os_mutex_recursive_lock+0xc>)
   d5010:	681b      	ldr	r3, [r3, #0]
   d5012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5014:	9301      	str	r3, [sp, #4]
   d5016:	bd08      	pop	{r3, pc}
   d5018:	00030248 	.word	0x00030248

000d501c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d501c:	b508      	push	{r3, lr}
   d501e:	4b02      	ldr	r3, [pc, #8]	; (d5028 <os_mutex_recursive_unlock+0xc>)
   d5020:	681b      	ldr	r3, [r3, #0]
   d5022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5024:	9301      	str	r3, [sp, #4]
   d5026:	bd08      	pop	{r3, pc}
   d5028:	00030248 	.word	0x00030248

000d502c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d502c:	b508      	push	{r3, lr}
   d502e:	4b02      	ldr	r3, [pc, #8]	; (d5038 <inet_inet_ntop+0xc>)
   d5030:	681b      	ldr	r3, [r3, #0]
   d5032:	695b      	ldr	r3, [r3, #20]
   d5034:	9301      	str	r3, [sp, #4]
   d5036:	bd08      	pop	{r3, pc}
   d5038:	00030264 	.word	0x00030264

000d503c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d503c:	b508      	push	{r3, lr}
   d503e:	4b02      	ldr	r3, [pc, #8]	; (d5048 <inet_htonl+0xc>)
   d5040:	681b      	ldr	r3, [r3, #0]
   d5042:	6a1b      	ldr	r3, [r3, #32]
   d5044:	9301      	str	r3, [sp, #4]
   d5046:	bd08      	pop	{r3, pc}
   d5048:	00030264 	.word	0x00030264

000d504c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d504c:	b508      	push	{r3, lr}
   d504e:	4b02      	ldr	r3, [pc, #8]	; (d5058 <inet_htons+0xc>)
   d5050:	681b      	ldr	r3, [r3, #0]
   d5052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5054:	9301      	str	r3, [sp, #4]
   d5056:	bd08      	pop	{r3, pc}
   d5058:	00030264 	.word	0x00030264

000d505c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d505c:	b508      	push	{r3, lr}
   d505e:	4b02      	ldr	r3, [pc, #8]	; (d5068 <hal_usart_init+0xc>)
   d5060:	681b      	ldr	r3, [r3, #0]
   d5062:	681b      	ldr	r3, [r3, #0]
   d5064:	9301      	str	r3, [sp, #4]
   d5066:	bd08      	pop	{r3, pc}
   d5068:	0003023c 	.word	0x0003023c

000d506c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d506c:	b508      	push	{r3, lr}
   d506e:	4b02      	ldr	r3, [pc, #8]	; (d5078 <hal_usart_end+0xc>)
   d5070:	681b      	ldr	r3, [r3, #0]
   d5072:	689b      	ldr	r3, [r3, #8]
   d5074:	9301      	str	r3, [sp, #4]
   d5076:	bd08      	pop	{r3, pc}
   d5078:	0003023c 	.word	0x0003023c

000d507c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d507c:	b508      	push	{r3, lr}
   d507e:	4b02      	ldr	r3, [pc, #8]	; (d5088 <hal_usart_write+0xc>)
   d5080:	681b      	ldr	r3, [r3, #0]
   d5082:	68db      	ldr	r3, [r3, #12]
   d5084:	9301      	str	r3, [sp, #4]
   d5086:	bd08      	pop	{r3, pc}
   d5088:	0003023c 	.word	0x0003023c

000d508c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d508c:	b508      	push	{r3, lr}
   d508e:	4b02      	ldr	r3, [pc, #8]	; (d5098 <hal_usart_available+0xc>)
   d5090:	681b      	ldr	r3, [r3, #0]
   d5092:	691b      	ldr	r3, [r3, #16]
   d5094:	9301      	str	r3, [sp, #4]
   d5096:	bd08      	pop	{r3, pc}
   d5098:	0003023c 	.word	0x0003023c

000d509c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d509c:	b508      	push	{r3, lr}
   d509e:	4b02      	ldr	r3, [pc, #8]	; (d50a8 <hal_usart_read+0xc>)
   d50a0:	681b      	ldr	r3, [r3, #0]
   d50a2:	695b      	ldr	r3, [r3, #20]
   d50a4:	9301      	str	r3, [sp, #4]
   d50a6:	bd08      	pop	{r3, pc}
   d50a8:	0003023c 	.word	0x0003023c

000d50ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d50ac:	b508      	push	{r3, lr}
   d50ae:	4b02      	ldr	r3, [pc, #8]	; (d50b8 <hal_usart_peek+0xc>)
   d50b0:	681b      	ldr	r3, [r3, #0]
   d50b2:	699b      	ldr	r3, [r3, #24]
   d50b4:	9301      	str	r3, [sp, #4]
   d50b6:	bd08      	pop	{r3, pc}
   d50b8:	0003023c 	.word	0x0003023c

000d50bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d50bc:	b508      	push	{r3, lr}
   d50be:	4b02      	ldr	r3, [pc, #8]	; (d50c8 <hal_usart_flush+0xc>)
   d50c0:	681b      	ldr	r3, [r3, #0]
   d50c2:	69db      	ldr	r3, [r3, #28]
   d50c4:	9301      	str	r3, [sp, #4]
   d50c6:	bd08      	pop	{r3, pc}
   d50c8:	0003023c 	.word	0x0003023c

000d50cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d50cc:	b508      	push	{r3, lr}
   d50ce:	4b02      	ldr	r3, [pc, #8]	; (d50d8 <hal_usart_is_enabled+0xc>)
   d50d0:	681b      	ldr	r3, [r3, #0]
   d50d2:	6a1b      	ldr	r3, [r3, #32]
   d50d4:	9301      	str	r3, [sp, #4]
   d50d6:	bd08      	pop	{r3, pc}
   d50d8:	0003023c 	.word	0x0003023c

000d50dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d50dc:	b508      	push	{r3, lr}
   d50de:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <hal_usart_available_data_for_write+0xc>)
   d50e0:	681b      	ldr	r3, [r3, #0]
   d50e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d50e4:	9301      	str	r3, [sp, #4]
   d50e6:	bd08      	pop	{r3, pc}
   d50e8:	0003023c 	.word	0x0003023c

000d50ec <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d50ec:	b508      	push	{r3, lr}
   d50ee:	4b02      	ldr	r3, [pc, #8]	; (d50f8 <hal_usart_begin_config+0xc>)
   d50f0:	681b      	ldr	r3, [r3, #0]
   d50f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50f4:	9301      	str	r3, [sp, #4]
   d50f6:	bd08      	pop	{r3, pc}
   d50f8:	0003023c 	.word	0x0003023c

000d50fc <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d50fc:	b508      	push	{r3, lr}
   d50fe:	4b02      	ldr	r3, [pc, #8]	; (d5108 <hal_i2c_write+0xc>)
   d5100:	681b      	ldr	r3, [r3, #0]
   d5102:	6a1b      	ldr	r3, [r3, #32]
   d5104:	9301      	str	r3, [sp, #4]
   d5106:	bd08      	pop	{r3, pc}
   d5108:	00030228 	.word	0x00030228

000d510c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d510c:	b508      	push	{r3, lr}
   d510e:	4b02      	ldr	r3, [pc, #8]	; (d5118 <hal_i2c_available+0xc>)
   d5110:	681b      	ldr	r3, [r3, #0]
   d5112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5114:	9301      	str	r3, [sp, #4]
   d5116:	bd08      	pop	{r3, pc}
   d5118:	00030228 	.word	0x00030228

000d511c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d511c:	b508      	push	{r3, lr}
   d511e:	4b02      	ldr	r3, [pc, #8]	; (d5128 <hal_i2c_read+0xc>)
   d5120:	681b      	ldr	r3, [r3, #0]
   d5122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5124:	9301      	str	r3, [sp, #4]
   d5126:	bd08      	pop	{r3, pc}
   d5128:	00030228 	.word	0x00030228

000d512c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d512c:	b508      	push	{r3, lr}
   d512e:	4b02      	ldr	r3, [pc, #8]	; (d5138 <hal_i2c_peek+0xc>)
   d5130:	681b      	ldr	r3, [r3, #0]
   d5132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5134:	9301      	str	r3, [sp, #4]
   d5136:	bd08      	pop	{r3, pc}
   d5138:	00030228 	.word	0x00030228

000d513c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d513c:	b508      	push	{r3, lr}
   d513e:	4b02      	ldr	r3, [pc, #8]	; (d5148 <hal_i2c_flush+0xc>)
   d5140:	681b      	ldr	r3, [r3, #0]
   d5142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5144:	9301      	str	r3, [sp, #4]
   d5146:	bd08      	pop	{r3, pc}
   d5148:	00030228 	.word	0x00030228

000d514c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d514c:	b508      	push	{r3, lr}
   d514e:	4b02      	ldr	r3, [pc, #8]	; (d5158 <hal_i2c_is_enabled+0xc>)
   d5150:	681b      	ldr	r3, [r3, #0]
   d5152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5154:	9301      	str	r3, [sp, #4]
   d5156:	bd08      	pop	{r3, pc}
   d5158:	00030228 	.word	0x00030228

000d515c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d515c:	b508      	push	{r3, lr}
   d515e:	4b02      	ldr	r3, [pc, #8]	; (d5168 <hal_i2c_init+0xc>)
   d5160:	681b      	ldr	r3, [r3, #0]
   d5162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5164:	9301      	str	r3, [sp, #4]
   d5166:	bd08      	pop	{r3, pc}
   d5168:	00030228 	.word	0x00030228

000d516c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d516c:	b508      	push	{r3, lr}
   d516e:	4b02      	ldr	r3, [pc, #8]	; (d5178 <sock_setsockopt+0xc>)
   d5170:	681b      	ldr	r3, [r3, #0]
   d5172:	699b      	ldr	r3, [r3, #24]
   d5174:	9301      	str	r3, [sp, #4]
   d5176:	bd08      	pop	{r3, pc}
   d5178:	00030238 	.word	0x00030238

000d517c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d517c:	b508      	push	{r3, lr}
   d517e:	4b02      	ldr	r3, [pc, #8]	; (d5188 <sock_close+0xc>)
   d5180:	681b      	ldr	r3, [r3, #0]
   d5182:	69db      	ldr	r3, [r3, #28]
   d5184:	9301      	str	r3, [sp, #4]
   d5186:	bd08      	pop	{r3, pc}
   d5188:	00030238 	.word	0x00030238

000d518c <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b02      	ldr	r3, [pc, #8]	; (d5198 <sock_connect+0xc>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	6a1b      	ldr	r3, [r3, #32]
   d5194:	9301      	str	r3, [sp, #4]
   d5196:	bd08      	pop	{r3, pc}
   d5198:	00030238 	.word	0x00030238

000d519c <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d519c:	b508      	push	{r3, lr}
   d519e:	4b02      	ldr	r3, [pc, #8]	; (d51a8 <sock_recv+0xc>)
   d51a0:	681b      	ldr	r3, [r3, #0]
   d51a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d51a4:	9301      	str	r3, [sp, #4]
   d51a6:	bd08      	pop	{r3, pc}
   d51a8:	00030238 	.word	0x00030238

000d51ac <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d51ac:	b508      	push	{r3, lr}
   d51ae:	4b02      	ldr	r3, [pc, #8]	; (d51b8 <sock_send+0xc>)
   d51b0:	681b      	ldr	r3, [r3, #0]
   d51b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51b4:	9301      	str	r3, [sp, #4]
   d51b6:	bd08      	pop	{r3, pc}
   d51b8:	00030238 	.word	0x00030238

000d51bc <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d51bc:	b508      	push	{r3, lr}
   d51be:	4b02      	ldr	r3, [pc, #8]	; (d51c8 <sock_socket+0xc>)
   d51c0:	681b      	ldr	r3, [r3, #0]
   d51c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d51c4:	9301      	str	r3, [sp, #4]
   d51c6:	bd08      	pop	{r3, pc}
   d51c8:	00030238 	.word	0x00030238

000d51cc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d51cc:	b508      	push	{r3, lr}
   d51ce:	4b02      	ldr	r3, [pc, #8]	; (d51d8 <hal_spi_init+0xc>)
   d51d0:	681b      	ldr	r3, [r3, #0]
   d51d2:	69db      	ldr	r3, [r3, #28]
   d51d4:	9301      	str	r3, [sp, #4]
   d51d6:	bd08      	pop	{r3, pc}
   d51d8:	00030230 	.word	0x00030230

000d51dc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d51dc:	b508      	push	{r3, lr}
   d51de:	4b02      	ldr	r3, [pc, #8]	; (d51e8 <hal_spi_is_enabled+0xc>)
   d51e0:	681b      	ldr	r3, [r3, #0]
   d51e2:	6a1b      	ldr	r3, [r3, #32]
   d51e4:	9301      	str	r3, [sp, #4]
   d51e6:	bd08      	pop	{r3, pc}
   d51e8:	00030230 	.word	0x00030230

000d51ec <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d51ec:	b508      	push	{r3, lr}
   d51ee:	4b02      	ldr	r3, [pc, #8]	; (d51f8 <HAL_USB_USART_Init+0xc>)
   d51f0:	681b      	ldr	r3, [r3, #0]
   d51f2:	681b      	ldr	r3, [r3, #0]
   d51f4:	9301      	str	r3, [sp, #4]
   d51f6:	bd08      	pop	{r3, pc}
   d51f8:	0003024c 	.word	0x0003024c

000d51fc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d51fc:	b508      	push	{r3, lr}
   d51fe:	4b02      	ldr	r3, [pc, #8]	; (d5208 <HAL_USB_USART_Begin+0xc>)
   d5200:	681b      	ldr	r3, [r3, #0]
   d5202:	685b      	ldr	r3, [r3, #4]
   d5204:	9301      	str	r3, [sp, #4]
   d5206:	bd08      	pop	{r3, pc}
   d5208:	0003024c 	.word	0x0003024c

000d520c <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d520c:	b508      	push	{r3, lr}
   d520e:	4b02      	ldr	r3, [pc, #8]	; (d5218 <HAL_USB_USART_End+0xc>)
   d5210:	681b      	ldr	r3, [r3, #0]
   d5212:	689b      	ldr	r3, [r3, #8]
   d5214:	9301      	str	r3, [sp, #4]
   d5216:	bd08      	pop	{r3, pc}
   d5218:	0003024c 	.word	0x0003024c

000d521c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d521c:	b508      	push	{r3, lr}
   d521e:	4b02      	ldr	r3, [pc, #8]	; (d5228 <HAL_USB_USART_Available_Data+0xc>)
   d5220:	681b      	ldr	r3, [r3, #0]
   d5222:	691b      	ldr	r3, [r3, #16]
   d5224:	9301      	str	r3, [sp, #4]
   d5226:	bd08      	pop	{r3, pc}
   d5228:	0003024c 	.word	0x0003024c

000d522c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d522c:	b508      	push	{r3, lr}
   d522e:	4b02      	ldr	r3, [pc, #8]	; (d5238 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5230:	681b      	ldr	r3, [r3, #0]
   d5232:	695b      	ldr	r3, [r3, #20]
   d5234:	9301      	str	r3, [sp, #4]
   d5236:	bd08      	pop	{r3, pc}
   d5238:	0003024c 	.word	0x0003024c

000d523c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d523c:	b508      	push	{r3, lr}
   d523e:	4b02      	ldr	r3, [pc, #8]	; (d5248 <HAL_USB_USART_Receive_Data+0xc>)
   d5240:	681b      	ldr	r3, [r3, #0]
   d5242:	699b      	ldr	r3, [r3, #24]
   d5244:	9301      	str	r3, [sp, #4]
   d5246:	bd08      	pop	{r3, pc}
   d5248:	0003024c 	.word	0x0003024c

000d524c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d524c:	b508      	push	{r3, lr}
   d524e:	4b02      	ldr	r3, [pc, #8]	; (d5258 <HAL_USB_USART_Send_Data+0xc>)
   d5250:	681b      	ldr	r3, [r3, #0]
   d5252:	69db      	ldr	r3, [r3, #28]
   d5254:	9301      	str	r3, [sp, #4]
   d5256:	bd08      	pop	{r3, pc}
   d5258:	0003024c 	.word	0x0003024c

000d525c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d525c:	b508      	push	{r3, lr}
   d525e:	4b02      	ldr	r3, [pc, #8]	; (d5268 <HAL_USB_USART_Flush_Data+0xc>)
   d5260:	681b      	ldr	r3, [r3, #0]
   d5262:	6a1b      	ldr	r3, [r3, #32]
   d5264:	9301      	str	r3, [sp, #4]
   d5266:	bd08      	pop	{r3, pc}
   d5268:	0003024c 	.word	0x0003024c

000d526c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d526c:	b508      	push	{r3, lr}
   d526e:	4b02      	ldr	r3, [pc, #8]	; (d5278 <panic_+0xc>)
   d5270:	681b      	ldr	r3, [r3, #0]
   d5272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5274:	9301      	str	r3, [sp, #4]
   d5276:	bd08      	pop	{r3, pc}
   d5278:	00030260 	.word	0x00030260

000d527c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d527c:	b508      	push	{r3, lr}
   d527e:	4b02      	ldr	r3, [pc, #8]	; (d5288 <log_message+0xc>)
   d5280:	681b      	ldr	r3, [r3, #0]
   d5282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5284:	9301      	str	r3, [sp, #4]
   d5286:	bd08      	pop	{r3, pc}
   d5288:	00030260 	.word	0x00030260

000d528c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d528c:	b508      	push	{r3, lr}
   d528e:	4b02      	ldr	r3, [pc, #8]	; (d5298 <log_message_v+0xc>)
   d5290:	681b      	ldr	r3, [r3, #0]
   d5292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5294:	9301      	str	r3, [sp, #4]
   d5296:	bd08      	pop	{r3, pc}
   d5298:	00030260 	.word	0x00030260

000d529c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d529c:	b508      	push	{r3, lr}
   d529e:	4b02      	ldr	r3, [pc, #8]	; (d52a8 <log_level_name+0xc>)
   d52a0:	681b      	ldr	r3, [r3, #0]
   d52a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d52a4:	9301      	str	r3, [sp, #4]
   d52a6:	bd08      	pop	{r3, pc}
   d52a8:	00030260 	.word	0x00030260

000d52ac <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d52ac:	b508      	push	{r3, lr}
   d52ae:	4b02      	ldr	r3, [pc, #8]	; (d52b8 <log_set_callbacks+0xc>)
   d52b0:	681b      	ldr	r3, [r3, #0]
   d52b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d52b4:	9301      	str	r3, [sp, #4]
   d52b6:	bd08      	pop	{r3, pc}
   d52b8:	00030260 	.word	0x00030260

000d52bc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d52bc:	b508      	push	{r3, lr}
   d52be:	4b02      	ldr	r3, [pc, #8]	; (d52c8 <set_system_mode+0xc>)
   d52c0:	681b      	ldr	r3, [r3, #0]
   d52c2:	685b      	ldr	r3, [r3, #4]
   d52c4:	9301      	str	r3, [sp, #4]
   d52c6:	bd08      	pop	{r3, pc}
   d52c8:	00030220 	.word	0x00030220

000d52cc <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d52cc:	b508      	push	{r3, lr}
   d52ce:	4b02      	ldr	r3, [pc, #8]	; (d52d8 <system_delay_ms+0xc>)
   d52d0:	681b      	ldr	r3, [r3, #0]
   d52d2:	695b      	ldr	r3, [r3, #20]
   d52d4:	9301      	str	r3, [sp, #4]
   d52d6:	bd08      	pop	{r3, pc}
   d52d8:	00030220 	.word	0x00030220

000d52dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d52dc:	b508      	push	{r3, lr}
   d52de:	4b03      	ldr	r3, [pc, #12]	; (d52ec <system_ctrl_set_app_request_handler+0x10>)
   d52e0:	681b      	ldr	r3, [r3, #0]
   d52e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d52e6:	9301      	str	r3, [sp, #4]
   d52e8:	bd08      	pop	{r3, pc}
   d52ea:	0000      	.short	0x0000
   d52ec:	00030220 	.word	0x00030220

000d52f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b03      	ldr	r3, [pc, #12]	; (d5300 <system_ctrl_set_result+0x10>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d52fa:	9301      	str	r3, [sp, #4]
   d52fc:	bd08      	pop	{r3, pc}
   d52fe:	0000      	.short	0x0000
   d5300:	00030220 	.word	0x00030220

000d5304 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5304:	b508      	push	{r3, lr}
   d5306:	4b03      	ldr	r3, [pc, #12]	; (d5314 <system_sleep_ext+0x10>)
   d5308:	681b      	ldr	r3, [r3, #0]
   d530a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d530e:	9301      	str	r3, [sp, #4]
   d5310:	bd08      	pop	{r3, pc}
   d5312:	0000      	.short	0x0000
   d5314:	00030220 	.word	0x00030220

000d5318 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5318:	b508      	push	{r3, lr}
   d531a:	4b02      	ldr	r3, [pc, #8]	; (d5324 <network_connect+0xc>)
   d531c:	681b      	ldr	r3, [r3, #0]
   d531e:	685b      	ldr	r3, [r3, #4]
   d5320:	9301      	str	r3, [sp, #4]
   d5322:	bd08      	pop	{r3, pc}
   d5324:	00030240 	.word	0x00030240

000d5328 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5328:	b508      	push	{r3, lr}
   d532a:	4b02      	ldr	r3, [pc, #8]	; (d5334 <network_connecting+0xc>)
   d532c:	681b      	ldr	r3, [r3, #0]
   d532e:	689b      	ldr	r3, [r3, #8]
   d5330:	9301      	str	r3, [sp, #4]
   d5332:	bd08      	pop	{r3, pc}
   d5334:	00030240 	.word	0x00030240

000d5338 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5338:	b508      	push	{r3, lr}
   d533a:	4b02      	ldr	r3, [pc, #8]	; (d5344 <network_disconnect+0xc>)
   d533c:	681b      	ldr	r3, [r3, #0]
   d533e:	68db      	ldr	r3, [r3, #12]
   d5340:	9301      	str	r3, [sp, #4]
   d5342:	bd08      	pop	{r3, pc}
   d5344:	00030240 	.word	0x00030240

000d5348 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5348:	b508      	push	{r3, lr}
   d534a:	4b02      	ldr	r3, [pc, #8]	; (d5354 <network_ready+0xc>)
   d534c:	681b      	ldr	r3, [r3, #0]
   d534e:	691b      	ldr	r3, [r3, #16]
   d5350:	9301      	str	r3, [sp, #4]
   d5352:	bd08      	pop	{r3, pc}
   d5354:	00030240 	.word	0x00030240

000d5358 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5358:	b508      	push	{r3, lr}
   d535a:	4b02      	ldr	r3, [pc, #8]	; (d5364 <network_on+0xc>)
   d535c:	681b      	ldr	r3, [r3, #0]
   d535e:	695b      	ldr	r3, [r3, #20]
   d5360:	9301      	str	r3, [sp, #4]
   d5362:	bd08      	pop	{r3, pc}
   d5364:	00030240 	.word	0x00030240

000d5368 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5368:	b508      	push	{r3, lr}
   d536a:	4b02      	ldr	r3, [pc, #8]	; (d5374 <network_off+0xc>)
   d536c:	681b      	ldr	r3, [r3, #0]
   d536e:	699b      	ldr	r3, [r3, #24]
   d5370:	9301      	str	r3, [sp, #4]
   d5372:	bd08      	pop	{r3, pc}
   d5374:	00030240 	.word	0x00030240

000d5378 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5378:	b508      	push	{r3, lr}
   d537a:	4b02      	ldr	r3, [pc, #8]	; (d5384 <network_listen+0xc>)
   d537c:	681b      	ldr	r3, [r3, #0]
   d537e:	69db      	ldr	r3, [r3, #28]
   d5380:	9301      	str	r3, [sp, #4]
   d5382:	bd08      	pop	{r3, pc}
   d5384:	00030240 	.word	0x00030240

000d5388 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5388:	b508      	push	{r3, lr}
   d538a:	4b02      	ldr	r3, [pc, #8]	; (d5394 <network_listening+0xc>)
   d538c:	681b      	ldr	r3, [r3, #0]
   d538e:	6a1b      	ldr	r3, [r3, #32]
   d5390:	9301      	str	r3, [sp, #4]
   d5392:	bd08      	pop	{r3, pc}
   d5394:	00030240 	.word	0x00030240

000d5398 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5398:	b508      	push	{r3, lr}
   d539a:	4b02      	ldr	r3, [pc, #8]	; (d53a4 <network_set_listen_timeout+0xc>)
   d539c:	681b      	ldr	r3, [r3, #0]
   d539e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d53a0:	9301      	str	r3, [sp, #4]
   d53a2:	bd08      	pop	{r3, pc}
   d53a4:	00030240 	.word	0x00030240

000d53a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d53a8:	b508      	push	{r3, lr}
   d53aa:	4b02      	ldr	r3, [pc, #8]	; (d53b4 <network_get_listen_timeout+0xc>)
   d53ac:	681b      	ldr	r3, [r3, #0]
   d53ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d53b0:	9301      	str	r3, [sp, #4]
   d53b2:	bd08      	pop	{r3, pc}
   d53b4:	00030240 	.word	0x00030240

000d53b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d53b8:	b508      	push	{r3, lr}
   d53ba:	4b02      	ldr	r3, [pc, #8]	; (d53c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d53bc:	681b      	ldr	r3, [r3, #0]
   d53be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d53c0:	9301      	str	r3, [sp, #4]
   d53c2:	bd08      	pop	{r3, pc}
   d53c4:	00030244 	.word	0x00030244

000d53c8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d53c8:	b508      	push	{r3, lr}
   d53ca:	4b02      	ldr	r3, [pc, #8]	; (d53d4 <malloc+0xc>)
   d53cc:	681b      	ldr	r3, [r3, #0]
   d53ce:	681b      	ldr	r3, [r3, #0]
   d53d0:	9301      	str	r3, [sp, #4]
   d53d2:	bd08      	pop	{r3, pc}
   d53d4:	0003021c 	.word	0x0003021c

000d53d8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d53d8:	b508      	push	{r3, lr}
   d53da:	4b02      	ldr	r3, [pc, #8]	; (d53e4 <free+0xc>)
   d53dc:	681b      	ldr	r3, [r3, #0]
   d53de:	685b      	ldr	r3, [r3, #4]
   d53e0:	9301      	str	r3, [sp, #4]
   d53e2:	bd08      	pop	{r3, pc}
   d53e4:	0003021c 	.word	0x0003021c

000d53e8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d53e8:	b508      	push	{r3, lr}
   d53ea:	4b02      	ldr	r3, [pc, #8]	; (d53f4 <realloc+0xc>)
   d53ec:	681b      	ldr	r3, [r3, #0]
   d53ee:	689b      	ldr	r3, [r3, #8]
   d53f0:	9301      	str	r3, [sp, #4]
   d53f2:	bd08      	pop	{r3, pc}
   d53f4:	0003021c 	.word	0x0003021c

000d53f8 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d53f8:	b508      	push	{r3, lr}
   d53fa:	4b02      	ldr	r3, [pc, #8]	; (d5404 <sprintf+0xc>)
   d53fc:	681b      	ldr	r3, [r3, #0]
   d53fe:	68db      	ldr	r3, [r3, #12]
   d5400:	9301      	str	r3, [sp, #4]
   d5402:	bd08      	pop	{r3, pc}
   d5404:	0003021c 	.word	0x0003021c

000d5408 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5408:	b508      	push	{r3, lr}
   d540a:	4b02      	ldr	r3, [pc, #8]	; (d5414 <vsnprintf+0xc>)
   d540c:	681b      	ldr	r3, [r3, #0]
   d540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5410:	9301      	str	r3, [sp, #4]
   d5412:	bd08      	pop	{r3, pc}
   d5414:	0003021c 	.word	0x0003021c

000d5418 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5418:	b508      	push	{r3, lr}
   d541a:	4b02      	ldr	r3, [pc, #8]	; (d5424 <__errno+0xc>)
   d541c:	681b      	ldr	r3, [r3, #0]
   d541e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5420:	9301      	str	r3, [sp, #4]
   d5422:	bd08      	pop	{r3, pc}
   d5424:	0003021c 	.word	0x0003021c

000d5428 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5428:	b508      	push	{r3, lr}
   d542a:	4b02      	ldr	r3, [pc, #8]	; (d5434 <newlib_impure_ptr_callback+0xc>)
   d542c:	681b      	ldr	r3, [r3, #0]
   d542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5430:	9301      	str	r3, [sp, #4]
   d5432:	bd08      	pop	{r3, pc}
   d5434:	0003021c 	.word	0x0003021c

000d5438 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5438:	2200      	movs	r2, #0
   d543a:	6840      	ldr	r0, [r0, #4]
   d543c:	4611      	mov	r1, r2
   d543e:	f7ff bfa3 	b.w	d5388 <network_listening>

000d5442 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5442:	2200      	movs	r2, #0
   d5444:	6840      	ldr	r0, [r0, #4]
   d5446:	4611      	mov	r1, r2
   d5448:	f7ff bfae 	b.w	d53a8 <network_get_listen_timeout>

000d544c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d544c:	6840      	ldr	r0, [r0, #4]
   d544e:	2200      	movs	r2, #0
   d5450:	f7ff bfa2 	b.w	d5398 <network_set_listen_timeout>

000d5454 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5454:	6840      	ldr	r0, [r0, #4]
   d5456:	2200      	movs	r2, #0
   d5458:	f081 0101 	eor.w	r1, r1, #1
   d545c:	f7ff bf8c 	b.w	d5378 <network_listen>

000d5460 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5460:	2300      	movs	r3, #0
   d5462:	6840      	ldr	r0, [r0, #4]
   d5464:	461a      	mov	r2, r3
   d5466:	4619      	mov	r1, r3
   d5468:	f7ff bf7e 	b.w	d5368 <network_off>

000d546c <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d546c:	2300      	movs	r3, #0
   d546e:	6840      	ldr	r0, [r0, #4]
   d5470:	461a      	mov	r2, r3
   d5472:	4619      	mov	r1, r3
   d5474:	f7ff bf70 	b.w	d5358 <network_on>

000d5478 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5478:	2200      	movs	r2, #0
   d547a:	6840      	ldr	r0, [r0, #4]
   d547c:	4611      	mov	r1, r2
   d547e:	f7ff bf63 	b.w	d5348 <network_ready>

000d5482 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5482:	2200      	movs	r2, #0
   d5484:	6840      	ldr	r0, [r0, #4]
   d5486:	4611      	mov	r1, r2
   d5488:	f7ff bf4e 	b.w	d5328 <network_connecting>

000d548c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d548c:	6840      	ldr	r0, [r0, #4]
   d548e:	2200      	movs	r2, #0
   d5490:	2102      	movs	r1, #2
   d5492:	f7ff bf51 	b.w	d5338 <network_disconnect>

000d5496 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5496:	2300      	movs	r3, #0
   d5498:	6840      	ldr	r0, [r0, #4]
   d549a:	461a      	mov	r2, r3
   d549c:	f7ff bf3c 	b.w	d5318 <network_connect>

000d54a0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d54a0:	4b02      	ldr	r3, [pc, #8]	; (d54ac <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54a2:	2203      	movs	r2, #3
   d54a4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54a6:	4a02      	ldr	r2, [pc, #8]	; (d54b0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54a8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d54aa:	4770      	bx	lr
   d54ac:	2003e6e0 	.word	0x2003e6e0
   d54b0:	000d85ec 	.word	0x000d85ec

000d54b4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d54b4:	b510      	push	{r4, lr}
   d54b6:	4604      	mov	r4, r0
   d54b8:	4608      	mov	r0, r1
{
    _spi = spi;
   d54ba:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d54bc:	f7ff fe86 	bl	d51cc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d54c0:	2300      	movs	r3, #0
   d54c2:	6063      	str	r3, [r4, #4]
}
   d54c4:	4620      	mov	r0, r4
   d54c6:	bd10      	pop	{r4, pc}

000d54c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d54c8:	b510      	push	{r4, lr}
   d54ca:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d54cc:	6800      	ldr	r0, [r0, #0]
   d54ce:	b118      	cbz	r0, d54d8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d54d0:	f7ff ff82 	bl	d53d8 <free>
            wakeupSource_ = nullptr;
   d54d4:	2300      	movs	r3, #0
   d54d6:	6023      	str	r3, [r4, #0]
        }
    }
   d54d8:	bd10      	pop	{r4, pc}

000d54da <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d54da:	b510      	push	{r4, lr}
   d54dc:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d54de:	f7ff fff3 	bl	d54c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d54e2:	4620      	mov	r0, r4
   d54e4:	bd10      	pop	{r4, pc}

000d54e6 <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d54e6:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d54e8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d54ec:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d54ee:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d54f0:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d54f2:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d54f6:	f8c0 2006 	str.w	r2, [r0, #6]
   d54fa:	889b      	ldrh	r3, [r3, #4]
   d54fc:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d54fe:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5500:	f7ff ffe2 	bl	d54c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5504:	682b      	ldr	r3, [r5, #0]
   d5506:	b113      	cbz	r3, d550e <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5508:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d550a:	2300      	movs	r3, #0
   d550c:	602b      	str	r3, [r5, #0]
    }
   d550e:	4620      	mov	r0, r4
   d5510:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5514 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:
    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5514:	b538      	push	{r3, r4, r5, lr}
   d5516:	460c      	mov	r4, r1
   d5518:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d551a:	f7ff ffd5 	bl	d54c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d551e:	b144      	cbz	r4, d5532 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5520:	8820      	ldrh	r0, [r4, #0]
   d5522:	f7ff ff51 	bl	d53c8 <malloc>
   d5526:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5528:	b128      	cbz	r0, d5536 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d552a:	8822      	ldrh	r2, [r4, #0]
   d552c:	4621      	mov	r1, r4
   d552e:	f002 feb1 	bl	d8294 <memcpy>
        return SYSTEM_ERROR_NONE;
   d5532:	2000      	movs	r0, #0
    }
   d5534:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d5536:	4801      	ldr	r0, [pc, #4]	; (d553c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5538:	e7fc      	b.n	d5534 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d553a:	bf00      	nop
   d553c:	fffffefc 	.word	0xfffffefc

000d5540 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5540:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5542:	4d2d      	ldr	r5, [pc, #180]	; (d55f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5544:	7d0b      	ldrb	r3, [r1, #20]
   d5546:	4604      	mov	r4, r0
   d5548:	b08b      	sub	sp, #44	; 0x2c
   d554a:	4608      	mov	r0, r1
   d554c:	1daf      	adds	r7, r5, #6
   d554e:	2b00      	cmp	r3, #0
   d5550:	d038      	beq.n	d55c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d5552:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5554:	791b      	ldrb	r3, [r3, #4]
   d5556:	2b00      	cmp	r3, #0
   d5558:	d034      	beq.n	d55c4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d555a:	2200      	movs	r2, #0
    SleepResult() {}
   d555c:	4b27      	ldr	r3, [pc, #156]	; (d55fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d555e:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5560:	a902      	add	r1, sp, #8
   d5562:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d5564:	9202      	str	r2, [sp, #8]
   d5566:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d556a:	f88d 200e 	strb.w	r2, [sp, #14]
   d556e:	f7ff fec9 	bl	d5304 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5572:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5576:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d557a:	b200      	sxth	r0, r0
   d557c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5580:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5584:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5586:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5588:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d558a:	4628      	mov	r0, r5
   d558c:	f7ff ffc2 	bl	d5514 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5590:	a802      	add	r0, sp, #8
   d5592:	f7ff ff99 	bl	d54c8 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5596:	2300      	movs	r3, #0
   d5598:	6023      	str	r3, [r4, #0]
   d559a:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d559c:	71a3      	strb	r3, [r4, #6]
   d559e:	8123      	strh	r3, [r4, #8]
   d55a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d55a4:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d55a6:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d55aa:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d55ac:	683b      	ldr	r3, [r7, #0]
   d55ae:	f8c4 3006 	str.w	r3, [r4, #6]
   d55b2:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d55b4:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d55b6:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d55b8:	4620      	mov	r0, r4
   d55ba:	f7ff ffab 	bl	d5514 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d55be:	4620      	mov	r0, r4
   d55c0:	b00b      	add	sp, #44	; 0x2c
   d55c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d55c4:	2600      	movs	r6, #0
   d55c6:	2320      	movs	r3, #32
   d55c8:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d55cc:	4b0c      	ldr	r3, [pc, #48]	; (d5600 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d55ce:	9300      	str	r3, [sp, #0]
   d55d0:	490c      	ldr	r1, [pc, #48]	; (d5604 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d55d2:	4633      	mov	r3, r6
   d55d4:	aa02      	add	r2, sp, #8
   d55d6:	2032      	movs	r0, #50	; 0x32
   d55d8:	f7ff fe50 	bl	d527c <log_message>
    SleepResult() {}
   d55dc:	4b07      	ldr	r3, [pc, #28]	; (d55fc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d55de:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d55e0:	a902      	add	r1, sp, #8
        error_ = error;
   d55e2:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d55e6:	4804      	ldr	r0, [pc, #16]	; (d55f8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d55e8:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d55ea:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d55ee:	f8ad 300c 	strh.w	r3, [sp, #12]
   d55f2:	f7ff ff78 	bl	d54e6 <_ZN17SystemSleepResultaSEOS_>
   d55f6:	e7cb      	b.n	d5590 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d55f8:	2003e6e8 	.word	0x2003e6e8
   d55fc:	ffff0000 	.word	0xffff0000
   d5600:	000d861f 	.word	0x000d861f
   d5604:	000d8618 	.word	0x000d8618

000d5608 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5608:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d560a:	4b09      	ldr	r3, [pc, #36]	; (d5630 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d560c:	4c09      	ldr	r4, [pc, #36]	; (d5634 <_GLOBAL__sub_I_System+0x2c>)
   d560e:	2202      	movs	r2, #2
   d5610:	2000      	movs	r0, #0
   d5612:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5614:	4b08      	ldr	r3, [pc, #32]	; (d5638 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5616:	6020      	str	r0, [r4, #0]
   d5618:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d561a:	71a0      	strb	r0, [r4, #6]
   d561c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d561e:	f7ff fe4d 	bl	d52bc <set_system_mode>
SystemClass System;
   d5622:	4620      	mov	r0, r4
   d5624:	4a05      	ldr	r2, [pc, #20]	; (d563c <_GLOBAL__sub_I_System+0x34>)
   d5626:	4906      	ldr	r1, [pc, #24]	; (d5640 <_GLOBAL__sub_I_System+0x38>)
   d5628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d562c:	f002 bcf8 	b.w	d8020 <__aeabi_atexit>
   d5630:	2003e6f4 	.word	0x2003e6f4
   d5634:	2003e6e8 	.word	0x2003e6e8
   d5638:	ffff0000 	.word	0xffff0000
   d563c:	2003e428 	.word	0x2003e428
   d5640:	000d54db 	.word	0x000d54db

000d5644 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5644:	b510      	push	{r4, lr}
   d5646:	4604      	mov	r4, r0
{
	free(buffer);
   d5648:	6800      	ldr	r0, [r0, #0]
   d564a:	f7ff fec5 	bl	d53d8 <free>
}
   d564e:	4620      	mov	r0, r4
   d5650:	bd10      	pop	{r4, pc}

000d5652 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5652:	b510      	push	{r4, lr}
   d5654:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5656:	6800      	ldr	r0, [r0, #0]
   d5658:	b108      	cbz	r0, d565e <_ZN6String10invalidateEv+0xc>
   d565a:	f7ff febd 	bl	d53d8 <free>
	buffer = NULL;
   d565e:	2300      	movs	r3, #0
	capacity = len = 0;
   d5660:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5664:	6023      	str	r3, [r4, #0]
}
   d5666:	bd10      	pop	{r4, pc}

000d5668 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5668:	b538      	push	{r3, r4, r5, lr}
   d566a:	4604      	mov	r4, r0
   d566c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d566e:	6800      	ldr	r0, [r0, #0]
   d5670:	3101      	adds	r1, #1
   d5672:	f7ff feb9 	bl	d53e8 <realloc>
	if (newbuffer) {
   d5676:	b110      	cbz	r0, d567e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5678:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d567c:	2001      	movs	r0, #1
	}
	return 0;
}
   d567e:	bd38      	pop	{r3, r4, r5, pc}

000d5680 <_ZN6String7reserveEj>:
{
   d5680:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5682:	6803      	ldr	r3, [r0, #0]
{
   d5684:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5686:	b123      	cbz	r3, d5692 <_ZN6String7reserveEj+0x12>
   d5688:	6843      	ldr	r3, [r0, #4]
   d568a:	428b      	cmp	r3, r1
   d568c:	d301      	bcc.n	d5692 <_ZN6String7reserveEj+0x12>
   d568e:	2001      	movs	r0, #1
}
   d5690:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5692:	4620      	mov	r0, r4
   d5694:	f7ff ffe8 	bl	d5668 <_ZN6String12changeBufferEj>
   d5698:	2800      	cmp	r0, #0
   d569a:	d0f9      	beq.n	d5690 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d569c:	68a3      	ldr	r3, [r4, #8]
   d569e:	2b00      	cmp	r3, #0
   d56a0:	d1f5      	bne.n	d568e <_ZN6String7reserveEj+0xe>
   d56a2:	6822      	ldr	r2, [r4, #0]
   d56a4:	7013      	strb	r3, [r2, #0]
   d56a6:	e7f2      	b.n	d568e <_ZN6String7reserveEj+0xe>

000d56a8 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d56a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d56aa:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d56ac:	4611      	mov	r1, r2
   d56ae:	9201      	str	r2, [sp, #4]
{
   d56b0:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d56b2:	f7ff ffe5 	bl	d5680 <_ZN6String7reserveEj>
   d56b6:	9a01      	ldr	r2, [sp, #4]
   d56b8:	b928      	cbnz	r0, d56c6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d56ba:	4620      	mov	r0, r4
   d56bc:	f7ff ffc9 	bl	d5652 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d56c0:	4620      	mov	r0, r4
   d56c2:	b003      	add	sp, #12
   d56c4:	bd30      	pop	{r4, r5, pc}
	len = length;
   d56c6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d56c8:	4629      	mov	r1, r5
   d56ca:	6820      	ldr	r0, [r4, #0]
   d56cc:	f002 fde2 	bl	d8294 <memcpy>
	buffer[len] = 0;
   d56d0:	6822      	ldr	r2, [r4, #0]
   d56d2:	68a3      	ldr	r3, [r4, #8]
   d56d4:	2100      	movs	r1, #0
   d56d6:	54d1      	strb	r1, [r2, r3]
	return *this;
   d56d8:	e7f2      	b.n	d56c0 <_ZN6String4copyEPKcj+0x18>

000d56da <_ZN6StringC1EPKc>:
	buffer = NULL;
   d56da:	2300      	movs	r3, #0
String::String(const char *cstr)
   d56dc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d56de:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d56e2:	4604      	mov	r4, r0
	len = 0;
   d56e4:	6083      	str	r3, [r0, #8]
	flags = 0;
   d56e6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d56e8:	b141      	cbz	r1, d56fc <_ZN6StringC1EPKc+0x22>
   d56ea:	4608      	mov	r0, r1
   d56ec:	9101      	str	r1, [sp, #4]
   d56ee:	f002 fe4e 	bl	d838e <strlen>
   d56f2:	9901      	ldr	r1, [sp, #4]
   d56f4:	4602      	mov	r2, r0
   d56f6:	4620      	mov	r0, r4
   d56f8:	f7ff ffd6 	bl	d56a8 <_ZN6String4copyEPKcj>
}
   d56fc:	4620      	mov	r0, r4
   d56fe:	b002      	add	sp, #8
   d5700:	bd10      	pop	{r4, pc}

000d5702 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5702:	b538      	push	{r3, r4, r5, lr}
   d5704:	4605      	mov	r5, r0
	if (buffer) {
   d5706:	6800      	ldr	r0, [r0, #0]
{
   d5708:	460c      	mov	r4, r1
	if (buffer) {
   d570a:	b168      	cbz	r0, d5728 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d570c:	686a      	ldr	r2, [r5, #4]
   d570e:	688b      	ldr	r3, [r1, #8]
   d5710:	429a      	cmp	r2, r3
   d5712:	d307      	bcc.n	d5724 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d5714:	6809      	ldr	r1, [r1, #0]
   d5716:	f002 fe32 	bl	d837e <strcpy>
			len = rhs.len;
   d571a:	68a3      	ldr	r3, [r4, #8]
   d571c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d571e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d5720:	60a3      	str	r3, [r4, #8]
}
   d5722:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d5724:	f7ff fe58 	bl	d53d8 <free>
	buffer = rhs.buffer;
   d5728:	6823      	ldr	r3, [r4, #0]
   d572a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d572c:	6863      	ldr	r3, [r4, #4]
   d572e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d5730:	68a3      	ldr	r3, [r4, #8]
   d5732:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d5734:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d5736:	e9c4 3300 	strd	r3, r3, [r4]
   d573a:	e7f1      	b.n	d5720 <_ZN6String4moveERS_+0x1e>

000d573c <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d573c:	b510      	push	{r4, lr}
	buffer = NULL;
   d573e:	2300      	movs	r3, #0
	capacity = 0;
   d5740:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d5744:	4604      	mov	r4, r0
	len = 0;
   d5746:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5748:	7303      	strb	r3, [r0, #12]
	move(rval);
   d574a:	f7ff ffda 	bl	d5702 <_ZN6String4moveERS_>
}
   d574e:	4620      	mov	r0, r4
   d5750:	bd10      	pop	{r4, pc}

000d5752 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d5752:	4288      	cmp	r0, r1
{
   d5754:	b510      	push	{r4, lr}
   d5756:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d5758:	d005      	beq.n	d5766 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d575a:	680b      	ldr	r3, [r1, #0]
   d575c:	b12b      	cbz	r3, d576a <_ZN6StringaSERKS_+0x18>
   d575e:	688a      	ldr	r2, [r1, #8]
   d5760:	4619      	mov	r1, r3
   d5762:	f7ff ffa1 	bl	d56a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d5766:	4620      	mov	r0, r4
   d5768:	bd10      	pop	{r4, pc}
	else invalidate();
   d576a:	f7ff ff72 	bl	d5652 <_ZN6String10invalidateEv>
   d576e:	e7fa      	b.n	d5766 <_ZN6StringaSERKS_+0x14>

000d5770 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d5770:	b510      	push	{r4, lr}
	buffer = NULL;
   d5772:	2300      	movs	r3, #0
String::String(const String &value)
   d5774:	4604      	mov	r4, r0
	capacity = 0;
   d5776:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d577a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d577c:	7303      	strb	r3, [r0, #12]
	*this = value;
   d577e:	f7ff ffe8 	bl	d5752 <_ZN6StringaSERKS_>
}
   d5782:	4620      	mov	r0, r4
   d5784:	bd10      	pop	{r4, pc}

000d5786 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d5786:	b513      	push	{r0, r1, r4, lr}
   d5788:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d578a:	b159      	cbz	r1, d57a4 <_ZN6StringaSEPKc+0x1e>
   d578c:	4608      	mov	r0, r1
   d578e:	9101      	str	r1, [sp, #4]
   d5790:	f002 fdfd 	bl	d838e <strlen>
   d5794:	9901      	ldr	r1, [sp, #4]
   d5796:	4602      	mov	r2, r0
   d5798:	4620      	mov	r0, r4
   d579a:	f7ff ff85 	bl	d56a8 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d579e:	4620      	mov	r0, r4
   d57a0:	b002      	add	sp, #8
   d57a2:	bd10      	pop	{r4, pc}
	else invalidate();
   d57a4:	f7ff ff55 	bl	d5652 <_ZN6String10invalidateEv>
   d57a8:	e7f9      	b.n	d579e <_ZN6StringaSEPKc+0x18>

000d57aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d57aa:	4770      	bx	lr

000d57ac <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d57ac:	4b06      	ldr	r3, [pc, #24]	; (d57c8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d57ae:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d57b0:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d57b2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d57b6:	d005      	beq.n	d57c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d57b8:	4608      	mov	r0, r1
   d57ba:	f002 fc3d 	bl	d8038 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d57be:	2800      	cmp	r0, #0
	return nullptr;
   d57c0:	bf08      	it	eq
   d57c2:	2400      	moveq	r4, #0
      }
   d57c4:	4620      	mov	r0, r4
   d57c6:	bd10      	pop	{r4, pc}
   d57c8:	000d86ec 	.word	0x000d86ec

000d57cc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d57cc:	b510      	push	{r4, lr}
   d57ce:	2130      	movs	r1, #48	; 0x30
   d57d0:	4604      	mov	r4, r0
   d57d2:	f002 fc2a 	bl	d802a <_ZdlPvj>
   d57d6:	4620      	mov	r0, r4
   d57d8:	bd10      	pop	{r4, pc}

000d57da <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d57da:	f7fe bc5e 	b.w	d409a <_ZdlPv>

000d57de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57de:	b510      	push	{r4, lr}
          _M_dispose();
   d57e0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d57e2:	4604      	mov	r4, r0
          _M_dispose();
   d57e4:	689b      	ldr	r3, [r3, #8]
   d57e6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d57e8:	68a3      	ldr	r3, [r4, #8]
   d57ea:	3b01      	subs	r3, #1
   d57ec:	60a3      	str	r3, [r4, #8]
   d57ee:	b92b      	cbnz	r3, d57fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d57f0:	6823      	ldr	r3, [r4, #0]
   d57f2:	4620      	mov	r0, r4
   d57f4:	68db      	ldr	r3, [r3, #12]
    }
   d57f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d57fa:	4718      	bx	r3
    }
   d57fc:	bd10      	pop	{r4, pc}

000d57fe <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d57fe:	b510      	push	{r4, lr}
   d5800:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5802:	6800      	ldr	r0, [r0, #0]
   d5804:	b108      	cbz	r0, d580a <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5806:	f7ff fbf9 	bl	d4ffc <os_mutex_recursive_destroy>
    }
   d580a:	4620      	mov	r0, r4
   d580c:	bd10      	pop	{r4, pc}
	...

000d5810 <_ZN8particle3ble13WiringBleLockC1Ev>:

namespace ble {

class WiringBleLock {
public:
    WiringBleLock() :
   d5810:	b510      	push	{r4, lr}
            locked_(false) {
   d5812:	2300      	movs	r3, #0
   d5814:	7003      	strb	r3, [r0, #0]
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
        mutex_.lock();
   d5816:	4b04      	ldr	r3, [pc, #16]	; (d5828 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d5818:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d581a:	6818      	ldr	r0, [r3, #0]
   d581c:	f7ff fbf6 	bl	d500c <os_mutex_recursive_lock>
        locked_ = true;
   d5820:	2301      	movs	r3, #1
   d5822:	7023      	strb	r3, [r4, #0]
    }
   d5824:	4620      	mov	r0, r4
   d5826:	bd10      	pop	{r4, pc}
   d5828:	2003e6fc 	.word	0x2003e6fc

000d582c <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d582c:	b510      	push	{r4, lr}
        if (locked_) {
   d582e:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5830:	4604      	mov	r4, r0
        if (locked_) {
   d5832:	b11b      	cbz	r3, d583c <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    }

    void unlock() {
        mutex_.unlock();
   d5834:	4b02      	ldr	r3, [pc, #8]	; (d5840 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5836:	6818      	ldr	r0, [r3, #0]
   d5838:	f7ff fbf0 	bl	d501c <os_mutex_recursive_unlock>
    }
   d583c:	4620      	mov	r0, r4
   d583e:	bd10      	pop	{r4, pc}
   d5840:	2003e6fc 	.word	0x2003e6fc

000d5844 <_ZN8particle10BleAddressC1Ev>:

/*******************************************************
 * BleAddress class
 */
BleAddress::BleAddress()
        : address_{} {
   d5844:	2200      	movs	r2, #0
   d5846:	6042      	str	r2, [r0, #4]
   d5848:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d584a:	7182      	strb	r2, [r0, #6]
}
   d584c:	4770      	bx	lr

000d584e <_ZNK8particle10BleAddresseqERKS0_>:
BleAddress& BleAddress::operator=(const uint8_t addr[BLE_SIG_ADDR_LEN]) {
    memcpy(address_.addr, addr, BLE_SIG_ADDR_LEN);
    return *this;
}

bool BleAddress::operator==(const BleAddress& addr) const {
   d584e:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5850:	7982      	ldrb	r2, [r0, #6]
   d5852:	798b      	ldrb	r3, [r1, #6]
   d5854:	429a      	cmp	r2, r3
   d5856:	d106      	bne.n	d5866 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5858:	2206      	movs	r2, #6
   d585a:	f002 fd0d 	bl	d8278 <memcmp>
   d585e:	fab0 f080 	clz	r0, r0
   d5862:	0940      	lsrs	r0, r0, #5
        return true;
    }
    return false;
}
   d5864:	bd08      	pop	{r3, pc}
    return false;
   d5866:	2000      	movs	r0, #0
   d5868:	e7fc      	b.n	d5864 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d586a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    void onDisconnectedCallback(BleOnDisconnectedCallback callback, void* context) {
        disconnectedCb_ = callback;
        disconnectedContext_ = context;
    }

    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d586a:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d586c:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d5870:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d5874:	4293      	cmp	r3, r2
   d5876:	4618      	mov	r0, r3
   d5878:	d006      	beq.n	d5888 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d587a:	6804      	ldr	r4, [r0, #0]
   d587c:	8824      	ldrh	r4, [r4, #0]
   d587e:	428c      	cmp	r4, r1
   d5880:	f103 0308 	add.w	r3, r3, #8
   d5884:	d1f6      	bne.n	d5874 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
                return &peer;
            }
        }
        return nullptr;
    }
   d5886:	bd10      	pop	{r4, pc}
        return nullptr;
   d5888:	2000      	movs	r0, #0
   d588a:	e7fc      	b.n	d5886 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>

000d588c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d588c:	b538      	push	{r3, r4, r5, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d588e:	2400      	movs	r4, #0
   d5890:	6004      	str	r4, [r0, #0]
   d5892:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5894:	2030      	movs	r0, #48	; 0x30
   d5896:	f7fe fbfc 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d589a:	4603      	mov	r3, r0
   d589c:	b188      	cbz	r0, d58c2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d589e:	2201      	movs	r2, #1
   d58a0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   d58a4:	4a09      	ldr	r2, [pc, #36]	; (d58cc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d58a6:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   d58a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d58ac:	8182      	strh	r2, [r0, #12]
   d58ae:	300e      	adds	r0, #14
   d58b0:	f7ff ffc8 	bl	d5844 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d58b4:	e9c3 4406 	strd	r4, r4, [r3, #24]
   d58b8:	e9c3 4408 	strd	r4, r4, [r3, #32]
   d58bc:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   d58c0:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   d58c2:	606b      	str	r3, [r5, #4]
   d58c4:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   d58c6:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d58c8:	4628      	mov	r0, r5
   d58ca:	bd38      	pop	{r3, r4, r5, pc}
   d58cc:	000d86d8 	.word	0x000d86d8

000d58d0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   d58d0:	6809      	ldr	r1, [r1, #0]
   d58d2:	f851 2f02 	ldr.w	r2, [r1, #2]!
   d58d6:	6002      	str	r2, [r0, #0]
   d58d8:	684a      	ldr	r2, [r1, #4]
   d58da:	6042      	str	r2, [r0, #4]
}
   d58dc:	4770      	bx	lr

000d58de <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d58de:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d58e0:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d58e2:	6801      	ldr	r1, [r0, #0]
   d58e4:	681a      	ldr	r2, [r3, #0]
   d58e6:	8809      	ldrh	r1, [r1, #0]
   d58e8:	8812      	ldrh	r2, [r2, #0]
   d58ea:	4291      	cmp	r1, r2
   d58ec:	d10c      	bne.n	d5908 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d58ee:	4601      	mov	r1, r0
   d58f0:	4668      	mov	r0, sp
   d58f2:	f7ff ffed 	bl	d58d0 <_ZNK8particle13BlePeerDevice7addressEv>
   d58f6:	a802      	add	r0, sp, #8
   d58f8:	4619      	mov	r1, r3
   d58fa:	f7ff ffe9 	bl	d58d0 <_ZNK8particle13BlePeerDevice7addressEv>
   d58fe:	a902      	add	r1, sp, #8
   d5900:	4668      	mov	r0, sp
   d5902:	f7ff ffa4 	bl	d584e <_ZNK8particle10BleAddresseqERKS0_>
   d5906:	b900      	cbnz	r0, d590a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5908:	2000      	movs	r0, #0
}
   d590a:	b005      	add	sp, #20
   d590c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5910 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5910:	b510      	push	{r4, lr}
   d5912:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5914:	2034      	movs	r0, #52	; 0x34
   d5916:	f7fe fbbc 	bl	d4092 <_Znwj>
   d591a:	4601      	mov	r1, r0
   d591c:	b168      	cbz	r0, d593a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
   d591e:	2300      	movs	r3, #0
   d5920:	e9c0 3300 	strd	r3, r3, [r0]
   d5924:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5928:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d592c:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   d5930:	e9c0 3308 	strd	r3, r3, [r0, #32]
   d5934:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   d5938:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d593a:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d593c:	b919      	cbnz	r1, d5946 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d593e:	4a0a      	ldr	r2, [pc, #40]	; (d5968 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5940:	200a      	movs	r0, #10
   d5942:	f7ff fc93 	bl	d526c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5946:	2000      	movs	r0, #0
   d5948:	f7ff fb14 	bl	d4f74 <hal_ble_stack_init>
   d594c:	b120      	cbz	r0, d5958 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d594e:	4a06      	ldr	r2, [pc, #24]	; (d5968 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5950:	2100      	movs	r1, #0
   d5952:	200a      	movs	r0, #10
   d5954:	f7ff fc8a 	bl	d526c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5958:	6821      	ldr	r1, [r4, #0]
   d595a:	4804      	ldr	r0, [pc, #16]	; (d596c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d595c:	2200      	movs	r2, #0
   d595e:	f7ff fb23 	bl	d4fa8 <hal_ble_set_callback_on_periph_link_events>
}
   d5962:	4620      	mov	r0, r4
   d5964:	bd10      	pop	{r4, pc}
   d5966:	bf00      	nop
   d5968:	000d4f55 	.word	0x000d4f55
   d596c:	000d5bf1 	.word	0x000d5bf1

000d5970 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5970:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5972:	4c0b      	ldr	r4, [pc, #44]	; (d59a0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5974:	7823      	ldrb	r3, [r4, #0]
   d5976:	f3bf 8f5b 	dmb	ish
   d597a:	07db      	lsls	r3, r3, #31
   d597c:	d40e      	bmi.n	d599c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d597e:	4620      	mov	r0, r4
   d5980:	f7fe fb9a 	bl	d40b8 <__cxa_guard_acquire>
   d5984:	b150      	cbz	r0, d599c <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5986:	4807      	ldr	r0, [pc, #28]	; (d59a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5988:	f7ff ffc2 	bl	d5910 <_ZN8particle14BleLocalDeviceC1Ev>
   d598c:	4620      	mov	r0, r4
   d598e:	f7fe fb98 	bl	d40c2 <__cxa_guard_release>
   d5992:	4a05      	ldr	r2, [pc, #20]	; (d59a8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5994:	4905      	ldr	r1, [pc, #20]	; (d59ac <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d5996:	4803      	ldr	r0, [pc, #12]	; (d59a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5998:	f002 fb42 	bl	d8020 <__aeabi_atexit>
    return instance;
}
   d599c:	4801      	ldr	r0, [pc, #4]	; (d59a4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d599e:	bd10      	pop	{r4, pc}
   d59a0:	2003e6f8 	.word	0x2003e6f8
   d59a4:	2003e700 	.word	0x2003e700
   d59a8:	2003e428 	.word	0x2003e428
   d59ac:	000d5a33 	.word	0x000d5a33

000d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d59b0:	680b      	ldr	r3, [r1, #0]
   d59b2:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d59b4:	b113      	cbz	r3, d59bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d59b6:	685a      	ldr	r2, [r3, #4]
   d59b8:	3201      	adds	r2, #1
   d59ba:	605a      	str	r2, [r3, #4]
      }
   d59bc:	4770      	bx	lr

000d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d59be:	b510      	push	{r4, lr}
   d59c0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d59c2:	6800      	ldr	r0, [r0, #0]
   d59c4:	b128      	cbz	r0, d59d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d59c6:	6843      	ldr	r3, [r0, #4]
   d59c8:	3b01      	subs	r3, #1
   d59ca:	6043      	str	r3, [r0, #4]
   d59cc:	b90b      	cbnz	r3, d59d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d59ce:	f7ff ff06 	bl	d57de <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d59d2:	4620      	mov	r0, r4
   d59d4:	bd10      	pop	{r4, pc}

000d59d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59d6:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d59d8:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59dc:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d59de:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d59e2:	42ae      	cmp	r6, r5
   d59e4:	d004      	beq.n	d59f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
      ~__shared_ptr() = default;
   d59e6:	1d28      	adds	r0, r5, #4
   d59e8:	f7ff ffe9 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d59ec:	3508      	adds	r5, #8
   d59ee:	e7f8      	b.n	d59e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d59f0:	6820      	ldr	r0, [r4, #0]
   d59f2:	f7ff fcf1 	bl	d53d8 <free>
}
   d59f6:	4620      	mov	r0, r4
   d59f8:	bd70      	pop	{r4, r5, r6, pc}

000d59fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d59fa:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d59fc:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5a00:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5a02:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5a06:	42ae      	cmp	r6, r5
   d5a08:	d004      	beq.n	d5a14 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5a0a:	1d28      	adds	r0, r5, #4
   d5a0c:	f7ff ffd7 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a10:	3508      	adds	r5, #8
   d5a12:	e7f8      	b.n	d5a06 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5a14:	6820      	ldr	r0, [r4, #0]
   d5a16:	f7ff fcdf 	bl	d53d8 <free>
}
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	bd70      	pop	{r4, r5, r6, pc}

000d5a1e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5a1e:	b510      	push	{r4, lr}
   d5a20:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5a22:	3024      	adds	r0, #36	; 0x24
   d5a24:	f7ff ffe9 	bl	d59fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a28:	f104 0018 	add.w	r0, r4, #24
   d5a2c:	f7ff ffd3 	bl	d59d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5a30:	bd10      	pop	{r4, pc}

000d5a32 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5a34:	6804      	ldr	r4, [r0, #0]
   d5a36:	4606      	mov	r6, r0
   d5a38:	b1c4      	cbz	r4, d5a6c <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   d5a3a:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5a3e:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5a42:	42af      	cmp	r7, r5
   d5a44:	d004      	beq.n	d5a50 <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   d5a46:	1d28      	adds	r0, r5, #4
   d5a48:	f7ff ffb9 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a4c:	3508      	adds	r5, #8
   d5a4e:	e7f8      	b.n	d5a42 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   d5a50:	69a0      	ldr	r0, [r4, #24]
   d5a52:	f7ff fcc1 	bl	d53d8 <free>
    ~BleLocalDeviceImpl() = default;
   d5a56:	f104 000c 	add.w	r0, r4, #12
   d5a5a:	f7ff ffce 	bl	d59fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5a5e:	4620      	mov	r0, r4
   d5a60:	f7ff ffb9 	bl	d59d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d5a64:	2134      	movs	r1, #52	; 0x34
   d5a66:	4620      	mov	r0, r4
   d5a68:	f002 fadf 	bl	d802a <_ZdlPvj>
   d5a6c:	4630      	mov	r0, r6
   d5a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5a70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d5a70:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5a72:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d5a76:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5a78:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5a7c:	42ae      	cmp	r6, r5
   d5a7e:	d004      	beq.n	d5a8a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d5a80:	1d28      	adds	r0, r5, #4
   d5a82:	f7ff ff9c 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5a86:	3508      	adds	r5, #8
   d5a88:	e7f8      	b.n	d5a7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d5a8a:	2300      	movs	r3, #0
   d5a8c:	6063      	str	r3, [r4, #4]
}
   d5a8e:	bd70      	pop	{r4, r5, r6, pc}

000d5a90 <_ZNK8particle14BleLocalDevice3offEv>:
    WiringBleLock lk;
    CHECK(hal_ble_stack_init(nullptr));
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::off() const {
   d5a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5a92:	4605      	mov	r5, r0
    WiringBleLock lk;
   d5a94:	a801      	add	r0, sp, #4
   d5a96:	f7ff febb 	bl	d5810 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_deinit(nullptr));
   d5a9a:	2000      	movs	r0, #0
   d5a9c:	f7ff fa72 	bl	d4f84 <hal_ble_stack_deinit>
   d5aa0:	1e04      	subs	r4, r0, #0
   d5aa2:	db04      	blt.n	d5aae <_ZNK8particle14BleLocalDevice3offEv+0x1e>
        return peers_;
   d5aa4:	6828      	ldr	r0, [r5, #0]
    impl()->peers().clear();
   d5aa6:	3018      	adds	r0, #24
   d5aa8:	f7ff ffe2 	bl	d5a70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
    return SYSTEM_ERROR_NONE;
   d5aac:	2400      	movs	r4, #0
    WiringBleLock lk;
   d5aae:	a801      	add	r0, sp, #4
   d5ab0:	f7ff febc 	bl	d582c <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5ab4:	4620      	mov	r0, r4
   d5ab6:	b003      	add	sp, #12
   d5ab8:	bd30      	pop	{r4, r5, pc}

000d5aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5aba:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5abe:	4606      	mov	r6, r0
   d5ac0:	460c      	mov	r4, r1
   d5ac2:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5ac4:	d918      	bls.n	d5af8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5ac6:	4290      	cmp	r0, r2
   d5ac8:	d217      	bcs.n	d5afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   d5aca:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5ace:	f1a1 0708 	sub.w	r7, r1, #8
   d5ad2:	1a69      	subs	r1, r5, r1
   d5ad4:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5ad6:	42af      	cmp	r7, r5
   d5ad8:	d020      	beq.n	d5b1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   d5ada:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   d5adc:	b134      	cbz	r4, d5aec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ade:	4620      	mov	r0, r4
   d5ae0:	682b      	ldr	r3, [r5, #0]
   d5ae2:	f840 3b04 	str.w	r3, [r0], #4
   d5ae6:	4631      	mov	r1, r6
   d5ae8:	f7ff ff62 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5aec:	4630      	mov	r0, r6
   d5aee:	f7ff ff66 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5af2:	3d08      	subs	r5, #8
   d5af4:	3c08      	subs	r4, #8
   d5af6:	e7ee      	b.n	d5ad6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5af8:	d010      	beq.n	d5b1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   d5afa:	42ac      	cmp	r4, r5
   d5afc:	d00e      	beq.n	d5b1c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   d5afe:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   d5b00:	b136      	cbz	r6, d5b10 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b02:	4630      	mov	r0, r6
   d5b04:	6823      	ldr	r3, [r4, #0]
   d5b06:	f840 3b04 	str.w	r3, [r0], #4
   d5b0a:	4639      	mov	r1, r7
   d5b0c:	f7ff ff50 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5b10:	4638      	mov	r0, r7
   d5b12:	f7ff ff54 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5b16:	3408      	adds	r4, #8
   d5b18:	3608      	adds	r6, #8
   d5b1a:	e7ee      	b.n	d5afa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   d5b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5b1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5b22:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5b26:	4605      	mov	r5, r0
   d5b28:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5b2a:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5b2e:	42a7      	cmp	r7, r4
   d5b30:	d01a      	beq.n	d5b68 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   d5b32:	4641      	mov	r1, r8
   d5b34:	4620      	mov	r0, r4
   d5b36:	f7ff fed2 	bl	d58de <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5b3a:	4606      	mov	r6, r0
   d5b3c:	b908      	cbnz	r0, d5b42 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   d5b3e:	3408      	adds	r4, #8
   d5b40:	e7f5      	b.n	d5b2e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5b42:	b19c      	cbz	r4, d5b6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   d5b44:	1d20      	adds	r0, r4, #4
   d5b46:	f7ff ff3a 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5b4a:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5b4e:	f104 0108 	add.w	r1, r4, #8
   d5b52:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5b56:	4620      	mov	r0, r4
   d5b58:	f7ff ffaf 	bl	d5aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5b5c:	686b      	ldr	r3, [r5, #4]
   d5b5e:	3b01      	subs	r3, #1
   d5b60:	606b      	str	r3, [r5, #4]
}
   d5b62:	4630      	mov	r0, r6
   d5b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   d5b68:	2600      	movs	r6, #0
   d5b6a:	e7fa      	b.n	d5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   d5b6c:	4626      	mov	r6, r4
   d5b6e:	e7f8      	b.n	d5b62 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000d5b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5b72:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5b74:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5b78:	6847      	ldr	r7, [r0, #4]
   d5b7a:	9300      	str	r3, [sp, #0]
   d5b7c:	a801      	add	r0, sp, #4
   d5b7e:	f7ff ff17 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5b82:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   d5b86:	429e      	cmp	r6, r3
   d5b88:	db12      	blt.n	d5bb0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5b8a:	3601      	adds	r6, #1
        if (n > 0) {
   d5b8c:	2e00      	cmp	r6, #0
   d5b8e:	dd2c      	ble.n	d5bea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   d5b90:	00f0      	lsls	r0, r6, #3
   d5b92:	f7ff fc19 	bl	d53c8 <malloc>
            if (!d) {
   d5b96:	4605      	mov	r5, r0
   d5b98:	b308      	cbz	r0, d5bde <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   d5b9a:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5b9e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5ba2:	f7ff ff8a 	bl	d5aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5ba6:	6820      	ldr	r0, [r4, #0]
   d5ba8:	f7ff fc16 	bl	d53d8 <free>
        data_ = d;
   d5bac:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5bae:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   d5bb0:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5bb2:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5bb4:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5bb8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5bbc:	4629      	mov	r1, r5
   d5bbe:	f105 0008 	add.w	r0, r5, #8
   d5bc2:	f7ff ff7a 	bl	d5aba <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5bc6:	b135      	cbz	r5, d5bd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   d5bc8:	9b00      	ldr	r3, [sp, #0]
   d5bca:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5bce:	a901      	add	r1, sp, #4
   d5bd0:	1d28      	adds	r0, r5, #4
   d5bd2:	f7ff feed 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5bd6:	6863      	ldr	r3, [r4, #4]
   d5bd8:	3301      	adds	r3, #1
   d5bda:	6063      	str	r3, [r4, #4]
    return true;
   d5bdc:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   d5bde:	a801      	add	r0, sp, #4
   d5be0:	f7ff feed 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5be4:	4628      	mov	r0, r5
   d5be6:	b003      	add	sp, #12
   d5be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5bea:	2500      	movs	r5, #0
   d5bec:	e7db      	b.n	d5ba6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>
	...

000d5bf0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5bf4:	4604      	mov	r4, r0
   d5bf6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5bf8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5bfa:	460d      	mov	r5, r1
        WiringBleLock lk;
   d5bfc:	f7ff fe08 	bl	d5810 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5c00:	6823      	ldr	r3, [r4, #0]
   d5c02:	2b03      	cmp	r3, #3
   d5c04:	d007      	beq.n	d5c16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   d5c06:	2b04      	cmp	r3, #4
   d5c08:	d048      	beq.n	d5c9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   d5c0a:	a803      	add	r0, sp, #12
   d5c0c:	f7ff fe0e 	bl	d582c <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5c10:	b00e      	add	sp, #56	; 0x38
   d5c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   d5c16:	a804      	add	r0, sp, #16
   d5c18:	f7ff fe38 	bl	d588c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5c1c:	9b04      	ldr	r3, [sp, #16]
   d5c1e:	8922      	ldrh	r2, [r4, #8]
   d5c20:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   d5c22:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   d5c24:	9904      	ldr	r1, [sp, #16]
   d5c26:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5c2a:	f8c1 3002 	str.w	r3, [r1, #2]
   d5c2e:	6853      	ldr	r3, [r2, #4]
   d5c30:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c34:	a807      	add	r0, sp, #28
   d5c36:	9b04      	ldr	r3, [sp, #16]
   d5c38:	9306      	str	r3, [sp, #24]
   d5c3a:	a905      	add	r1, sp, #20
   d5c3c:	f7ff feb8 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   d5c40:	a906      	add	r1, sp, #24
   d5c42:	f105 0018 	add.w	r0, r5, #24
   d5c46:	f7ff ff93 	bl	d5b70 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5c4a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5c4c:	a807      	add	r0, sp, #28
   d5c4e:	f7ff feb6 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c52:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c54:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5c56:	b98c      	cbnz	r4, d5c7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5c58:	4b33      	ldr	r3, [pc, #204]	; (d5d28 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5c5a:	4934      	ldr	r1, [pc, #208]	; (d5d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5c5c:	9300      	str	r3, [sp, #0]
   d5c5e:	2032      	movs	r0, #50	; 0x32
   d5c60:	4623      	mov	r3, r4
   d5c62:	aa06      	add	r2, sp, #24
   d5c64:	9407      	str	r4, [sp, #28]
   d5c66:	f7ff fb09 	bl	d527c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5c6a:	9b04      	ldr	r3, [sp, #16]
   d5c6c:	4621      	mov	r1, r4
   d5c6e:	8818      	ldrh	r0, [r3, #0]
   d5c70:	f7ff f990 	bl	d4f94 <hal_ble_gap_disconnect>
   d5c74:	a805      	add	r0, sp, #20
   d5c76:	f7ff fea2 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c7a:	e7c6      	b.n	d5c0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   d5c7c:	4a2c      	ldr	r2, [pc, #176]	; (d5d30 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5c7e:	9200      	str	r2, [sp, #0]
   d5c80:	2300      	movs	r3, #0
   d5c82:	492a      	ldr	r1, [pc, #168]	; (d5d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5c84:	9307      	str	r3, [sp, #28]
   d5c86:	aa06      	add	r2, sp, #24
   d5c88:	2001      	movs	r0, #1
   d5c8a:	f7ff faf7 	bl	d527c <log_message>
                if (impl->connectedCb_) {
   d5c8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5c90:	2b00      	cmp	r3, #0
   d5c92:	d0ef      	beq.n	d5c74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5c94:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5c96:	a804      	add	r0, sp, #16
   d5c98:	4798      	blx	r3
   d5c9a:	e7eb      	b.n	d5c74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5c9c:	8921      	ldrh	r1, [r4, #8]
   d5c9e:	4628      	mov	r0, r5
   d5ca0:	f7ff fde3 	bl	d586a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5ca4:	4606      	mov	r6, r0
   d5ca6:	2800      	cmp	r0, #0
   d5ca8:	d0af      	beq.n	d5c0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d5caa:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   d5cac:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5cb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5cb4:	8022      	strh	r2, [r4, #0]
   d5cb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5cba:	4299      	cmp	r1, r3
   d5cbc:	d003      	beq.n	d5cc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   d5cbe:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5cc2:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   d5cc4:	e7f9      	b.n	d5cba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   d5cc6:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   d5cca:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5cce:	45b8      	cmp	r8, r7
   d5cd0:	d004      	beq.n	d5cdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   d5cd2:	1d38      	adds	r0, r7, #4
   d5cd4:	f7ff fe73 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cd8:	3708      	adds	r7, #8
   d5cda:	e7f8      	b.n	d5cce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   d5cdc:	2300      	movs	r3, #0
   d5cde:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   d5ce0:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   d5ce4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5ce8:	45b8      	cmp	r8, r7
   d5cea:	d004      	beq.n	d5cf6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   d5cec:	1d38      	adds	r0, r7, #4
   d5cee:	f7ff fe66 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cf2:	3708      	adds	r7, #8
   d5cf4:	e7f8      	b.n	d5ce8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   d5cf6:	2300      	movs	r3, #0
   d5cf8:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   d5cfa:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   d5cfc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5cfe:	b113      	cbz	r3, d5d06 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d5d00:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d5d02:	4630      	mov	r0, r6
   d5d04:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   d5d06:	2300      	movs	r3, #0
   d5d08:	2220      	movs	r2, #32
   d5d0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d5d0e:	4a09      	ldr	r2, [pc, #36]	; (d5d34 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d5d10:	9200      	str	r2, [sp, #0]
   d5d12:	4906      	ldr	r1, [pc, #24]	; (d5d2c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5d14:	aa06      	add	r2, sp, #24
   d5d16:	2001      	movs	r0, #1
   d5d18:	f7ff fab0 	bl	d527c <log_message>
                    impl->peers_.removeOne(*peer);
   d5d1c:	4631      	mov	r1, r6
   d5d1e:	f105 0018 	add.w	r0, r5, #24
   d5d22:	f7ff fefc 	bl	d5b1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d5d26:	e770      	b.n	d5c0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d5d28:	000d866d 	.word	0x000d866d
   d5d2c:	000d8646 	.word	0x000d8646
   d5d30:	000d8693 	.word	0x000d8693
   d5d34:	000d86b0 	.word	0x000d86b0

000d5d38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5d38:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5d3a:	4c06      	ldr	r4, [pc, #24]	; (d5d54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5d3c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5d3e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5d40:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5d42:	f7ff f953 	bl	d4fec <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5d46:	4620      	mov	r0, r4
   d5d48:	4a03      	ldr	r2, [pc, #12]	; (d5d58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5d4a:	4904      	ldr	r1, [pc, #16]	; (d5d5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5d50:	f002 b966 	b.w	d8020 <__aeabi_atexit>
   d5d54:	2003e6fc 	.word	0x2003e6fc
   d5d58:	2003e428 	.word	0x2003e428
   d5d5c:	000d57ff 	.word	0x000d57ff

000d5d60 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d62:	4606      	mov	r6, r0
   d5d64:	460d      	mov	r5, r1
  size_t n = 0;
   d5d66:	188f      	adds	r7, r1, r2
   d5d68:	2400      	movs	r4, #0
  while (size--) {
   d5d6a:	42bd      	cmp	r5, r7
   d5d6c:	d00c      	beq.n	d5d88 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d6e:	6833      	ldr	r3, [r6, #0]
   d5d70:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d74:	689b      	ldr	r3, [r3, #8]
   d5d76:	4630      	mov	r0, r6
   d5d78:	4798      	blx	r3
     if (chunk>=0)
   d5d7a:	1e03      	subs	r3, r0, #0
   d5d7c:	db01      	blt.n	d5d82 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d7e:	441c      	add	r4, r3
  while (size--) {
   d5d80:	e7f3      	b.n	d5d6a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d82:	2c00      	cmp	r4, #0
   d5d84:	bf08      	it	eq
   d5d86:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d88:	4620      	mov	r0, r4
   d5d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d8c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d8c:	b513      	push	{r0, r1, r4, lr}
   d5d8e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d5d90:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d5d92:	b159      	cbz	r1, d5dac <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d5d94:	9101      	str	r1, [sp, #4]
   d5d96:	f002 fafa 	bl	d838e <strlen>
   d5d9a:	6823      	ldr	r3, [r4, #0]
   d5d9c:	9901      	ldr	r1, [sp, #4]
   d5d9e:	68db      	ldr	r3, [r3, #12]
   d5da0:	4602      	mov	r2, r0
   d5da2:	4620      	mov	r0, r4
    }
   d5da4:	b002      	add	sp, #8
   d5da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d5daa:	4718      	bx	r3
    }
   d5dac:	b002      	add	sp, #8
   d5dae:	bd10      	pop	{r4, pc}

000d5db0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5db0:	6803      	ldr	r3, [r0, #0]
   d5db2:	689b      	ldr	r3, [r3, #8]
   d5db4:	4718      	bx	r3

000d5db6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d5db6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d5db8:	210d      	movs	r1, #13
{
   d5dba:	4605      	mov	r5, r0
  size_t n = print('\r');
   d5dbc:	f7ff fff8 	bl	d5db0 <_ZN5Print5printEc>
  n += print('\n');
   d5dc0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d5dc2:	4604      	mov	r4, r0
  n += print('\n');
   d5dc4:	4628      	mov	r0, r5
   d5dc6:	f7ff fff3 	bl	d5db0 <_ZN5Print5printEc>
  return n;
}
   d5dca:	4420      	add	r0, r4
   d5dcc:	bd38      	pop	{r3, r4, r5, pc}

000d5dce <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5dce:	b530      	push	{r4, r5, lr}
   d5dd0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5dd2:	2300      	movs	r3, #0
   d5dd4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5dd8:	2a01      	cmp	r2, #1
   d5dda:	bf98      	it	ls
   d5ddc:	220a      	movls	r2, #10
   d5dde:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d5de0:	460d      	mov	r5, r1
   d5de2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d5de6:	fb01 5312 	mls	r3, r1, r2, r5
   d5dea:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dee:	2b09      	cmp	r3, #9
   d5df0:	bf94      	ite	ls
   d5df2:	3330      	addls	r3, #48	; 0x30
   d5df4:	3337      	addhi	r3, #55	; 0x37
   d5df6:	b2db      	uxtb	r3, r3
  } while(n);
   d5df8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5dfa:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d5dfe:	d9ef      	bls.n	d5de0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d5e00:	4621      	mov	r1, r4
   d5e02:	f7ff ffc3 	bl	d5d8c <_ZN5Print5writeEPKc>
}
   d5e06:	b00b      	add	sp, #44	; 0x2c
   d5e08:	bd30      	pop	{r4, r5, pc}

000d5e0a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d5e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e0e:	b086      	sub	sp, #24
   d5e10:	af00      	add	r7, sp, #0
   d5e12:	4605      	mov	r5, r0
   d5e14:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e16:	1d38      	adds	r0, r7, #4
   d5e18:	2114      	movs	r1, #20
{
   d5e1a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d5e1c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d5e1e:	f7ff faf3 	bl	d5408 <vsnprintf>

    if (n<bufsize)
   d5e22:	2813      	cmp	r0, #19
   d5e24:	d80e      	bhi.n	d5e44 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d5e26:	1d39      	adds	r1, r7, #4
   d5e28:	4628      	mov	r0, r5
   d5e2a:	f7ff ffaf 	bl	d5d8c <_ZN5Print5writeEPKc>
   d5e2e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d5e30:	b11e      	cbz	r6, d5e3a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d5e32:	4628      	mov	r0, r5
   d5e34:	f7ff ffbf 	bl	d5db6 <_ZN5Print7printlnEv>
   d5e38:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d5e3a:	4620      	mov	r0, r4
   d5e3c:	3718      	adds	r7, #24
   d5e3e:	46bd      	mov	sp, r7
   d5e40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d5e44:	f100 0308 	add.w	r3, r0, #8
   d5e48:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d5e4c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d5e4e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d5e52:	4622      	mov	r2, r4
   d5e54:	1c41      	adds	r1, r0, #1
   d5e56:	683b      	ldr	r3, [r7, #0]
   d5e58:	4668      	mov	r0, sp
   d5e5a:	f7ff fad5 	bl	d5408 <vsnprintf>
  return write(str);
   d5e5e:	4669      	mov	r1, sp
   d5e60:	4628      	mov	r0, r5
   d5e62:	f7ff ff93 	bl	d5d8c <_ZN5Print5writeEPKc>
   d5e66:	4604      	mov	r4, r0
   d5e68:	46c5      	mov	sp, r8
   d5e6a:	e7e1      	b.n	d5e30 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d5e6c <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5e6c:	6880      	ldr	r0, [r0, #8]
   d5e6e:	6803      	ldr	r3, [r0, #0]
   d5e70:	68db      	ldr	r3, [r3, #12]
   d5e72:	4718      	bx	r3

000d5e74 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d5e74:	4770      	bx	lr

000d5e76 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5e76:	4608      	mov	r0, r1
   d5e78:	b111      	cbz	r1, d5e80 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5e7a:	680b      	ldr	r3, [r1, #0]
   d5e7c:	685b      	ldr	r3, [r3, #4]
   d5e7e:	4718      	bx	r3
}
   d5e80:	4770      	bx	lr

000d5e82 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5e82:	4770      	bx	lr

000d5e84 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5e84:	4770      	bx	lr

000d5e86 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d5e86:	4770      	bx	lr

000d5e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5e88:	b538      	push	{r3, r4, r5, lr}
   d5e8a:	4604      	mov	r4, r0
   d5e8c:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5e8e:	6800      	ldr	r0, [r0, #0]
   d5e90:	212e      	movs	r1, #46	; 0x2e
   d5e92:	f002 fa60 	bl	d8356 <strchrnul>
    size = s - category;
   d5e96:	6823      	ldr	r3, [r4, #0]
   d5e98:	1ac3      	subs	r3, r0, r3
   d5e9a:	602b      	str	r3, [r5, #0]
    if (size) {
   d5e9c:	b123      	cbz	r3, d5ea8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5e9e:	7803      	ldrb	r3, [r0, #0]
   d5ea0:	b103      	cbz	r3, d5ea4 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5ea2:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ea4:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ea6:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d5ea8:	4618      	mov	r0, r3
   d5eaa:	bd38      	pop	{r3, r4, r5, pc}

000d5eac <_ZN5spark16JSONStreamWriterD0Ev>:
   d5eac:	b510      	push	{r4, lr}
   d5eae:	210c      	movs	r1, #12
   d5eb0:	4604      	mov	r4, r0
   d5eb2:	f002 f8ba 	bl	d802a <_ZdlPvj>
   d5eb6:	4620      	mov	r0, r4
   d5eb8:	bd10      	pop	{r4, pc}

000d5eba <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5eba:	b510      	push	{r4, lr}
   d5ebc:	2104      	movs	r1, #4
   d5ebe:	4604      	mov	r4, r0
   d5ec0:	f002 f8b3 	bl	d802a <_ZdlPvj>
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	bd10      	pop	{r4, pc}

000d5ec8 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5ec8:	b510      	push	{r4, lr}
   d5eca:	2104      	movs	r1, #4
   d5ecc:	4604      	mov	r4, r0
   d5ece:	f002 f8ac 	bl	d802a <_ZdlPvj>
   d5ed2:	4620      	mov	r0, r4
   d5ed4:	bd10      	pop	{r4, pc}

000d5ed6 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d5ed6:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5ed8:	f002 fa47 	bl	d836a <strcmp>
}
   d5edc:	fab0 f080 	clz	r0, r0
   d5ee0:	0940      	lsrs	r0, r0, #5
   d5ee2:	bd08      	pop	{r3, pc}

000d5ee4 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5ee4:	b510      	push	{r4, lr}
   d5ee6:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5ee8:	f001 f92a 	bl	d7140 <_Z16_fetch_usbserialv>
   d5eec:	4284      	cmp	r4, r0
   d5eee:	d010      	beq.n	d5f12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5ef0:	f001 f9fa 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d5ef4:	4284      	cmp	r4, r0
   d5ef6:	d105      	bne.n	d5f04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d5ef8:	f001 f9f6 	bl	d72e8 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d5f00:	f001 b9ef 	b.w	d72e2 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5f04:	b12c      	cbz	r4, d5f12 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d5f06:	6823      	ldr	r3, [r4, #0]
   d5f08:	4620      	mov	r0, r4
   d5f0a:	685b      	ldr	r3, [r3, #4]
}
   d5f0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d5f10:	4718      	bx	r3
   d5f12:	bd10      	pop	{r4, pc}

000d5f14 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5f14:	b513      	push	{r0, r1, r4, lr}
   d5f16:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d5f18:	4608      	mov	r0, r1
   d5f1a:	9101      	str	r1, [sp, #4]
   d5f1c:	f002 fa37 	bl	d838e <strlen>
   d5f20:	9901      	ldr	r1, [sp, #4]
   d5f22:	4602      	mov	r2, r0
   d5f24:	4620      	mov	r0, r4
}
   d5f26:	b002      	add	sp, #8
   d5f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d5f2c:	f001 bfc0 	b.w	d7eb0 <_ZN5spark10JSONWriter5valueEPKcj>

000d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d5f30:	b513      	push	{r0, r1, r4, lr}
   d5f32:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5f34:	4608      	mov	r0, r1
   d5f36:	9101      	str	r1, [sp, #4]
   d5f38:	f002 fa29 	bl	d838e <strlen>
   d5f3c:	6823      	ldr	r3, [r4, #0]
   d5f3e:	9901      	ldr	r1, [sp, #4]
   d5f40:	68db      	ldr	r3, [r3, #12]
   d5f42:	4602      	mov	r2, r0
   d5f44:	4620      	mov	r0, r4
}
   d5f46:	b002      	add	sp, #8
   d5f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d5f4c:	4718      	bx	r3

000d5f4e <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d5f4e:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d5f50:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d5f52:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d5f56:	68db      	ldr	r3, [r3, #12]
   d5f58:	2201      	movs	r2, #1
   d5f5a:	f10d 0107 	add.w	r1, sp, #7
   d5f5e:	4798      	blx	r3
}
   d5f60:	b003      	add	sp, #12
   d5f62:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f66 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5f66:	b40e      	push	{r1, r2, r3}
   d5f68:	b503      	push	{r0, r1, lr}
   d5f6a:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d5f6c:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d5f6e:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d5f72:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d5f74:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d5f76:	f7ff ff48 	bl	d5e0a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d5f7a:	b002      	add	sp, #8
   d5f7c:	f85d eb04 	ldr.w	lr, [sp], #4
   d5f80:	b003      	add	sp, #12
   d5f82:	4770      	bx	lr

000d5f84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d5f88:	e9d0 9500 	ldrd	r9, r5, [r0]
   d5f8c:	f04f 0814 	mov.w	r8, #20
   d5f90:	fb08 f505 	mul.w	r5, r8, r5
   d5f94:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5f96:	10ab      	asrs	r3, r5, #2
   d5f98:	4d18      	ldr	r5, [pc, #96]	; (d5ffc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5f9a:	4617      	mov	r7, r2
   d5f9c:	435d      	muls	r5, r3
   d5f9e:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5fa0:	2d00      	cmp	r5, #0
   d5fa2:	dd23      	ble.n	d5fec <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d5fa4:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d5fa6:	fb08 f006 	mul.w	r0, r8, r6
   d5faa:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5fae:	463a      	mov	r2, r7
   d5fb0:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d5fb4:	5820      	ldr	r0, [r4, r0]
   d5fb6:	9101      	str	r1, [sp, #4]
   d5fb8:	455f      	cmp	r7, fp
   d5fba:	bf28      	it	cs
   d5fbc:	465a      	movcs	r2, fp
   d5fbe:	f002 f9ee 	bl	d839e <strncmp>
                if (cmp == 0) {
   d5fc2:	9901      	ldr	r1, [sp, #4]
   d5fc4:	2301      	movs	r3, #1
   d5fc6:	b978      	cbnz	r0, d5fe8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d5fc8:	455f      	cmp	r7, fp
   d5fca:	d103      	bne.n	d5fd4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5fcc:	9a00      	ldr	r2, [sp, #0]
   d5fce:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5fd0:	4635      	mov	r5, r6
   d5fd2:	e7e5      	b.n	d5fa0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d5fd4:	bf8c      	ite	hi
   d5fd6:	2001      	movhi	r0, #1
   d5fd8:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5fda:	2800      	cmp	r0, #0
   d5fdc:	d0f8      	beq.n	d5fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5fde:	1bae      	subs	r6, r5, r6
	      ++__first;
   d5fe0:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d5fe4:	3e01      	subs	r6, #1
   d5fe6:	e7f3      	b.n	d5fd0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d5fe8:	0fc0      	lsrs	r0, r0, #31
   d5fea:	e7f6      	b.n	d5fda <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d5fec:	eba4 0409 	sub.w	r4, r4, r9
}
   d5ff0:	4802      	ldr	r0, [pc, #8]	; (d5ffc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d5ff2:	10a4      	asrs	r4, r4, #2
   d5ff4:	4360      	muls	r0, r4
   d5ff6:	b003      	add	sp, #12
   d5ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5ffc:	cccccccd 	.word	0xcccccccd

000d6000 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d6002:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d6004:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d6006:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d6008:	b30b      	cbz	r3, d604e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d600a:	b301      	cbz	r1, d604e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d600c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d600e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d6012:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d6014:	a903      	add	r1, sp, #12
   d6016:	a801      	add	r0, sp, #4
   d6018:	f7ff ff36 	bl	d5e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d601c:	4601      	mov	r1, r0
   d601e:	b1b0      	cbz	r0, d604e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6020:	f10d 030b 	add.w	r3, sp, #11
   d6024:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d6026:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d602a:	4620      	mov	r0, r4
   d602c:	f7ff ffaa 	bl	d5f84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d6030:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d6034:	b15b      	cbz	r3, d604e <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d6036:	6824      	ldr	r4, [r4, #0]
   d6038:	2314      	movs	r3, #20
   d603a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d603e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d6042:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d6046:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d6048:	bfa8      	it	ge
   d604a:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d604c:	e7e2      	b.n	d6014 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d604e:	4630      	mov	r0, r6
   d6050:	b004      	add	sp, #16
   d6052:	bd70      	pop	{r4, r5, r6, pc}

000d6054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d6054:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d6056:	4c0a      	ldr	r4, [pc, #40]	; (d6080 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d6058:	7823      	ldrb	r3, [r4, #0]
   d605a:	f3bf 8f5b 	dmb	ish
   d605e:	07db      	lsls	r3, r3, #31
   d6060:	d40b      	bmi.n	d607a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d6062:	4620      	mov	r0, r4
   d6064:	f7fe f828 	bl	d40b8 <__cxa_guard_acquire>
   d6068:	b138      	cbz	r0, d607a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d606a:	4620      	mov	r0, r4
   d606c:	f7fe f829 	bl	d40c2 <__cxa_guard_release>
   d6070:	4a04      	ldr	r2, [pc, #16]	; (d6084 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6072:	4905      	ldr	r1, [pc, #20]	; (d6088 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d6074:	4805      	ldr	r0, [pc, #20]	; (d608c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d6076:	f001 ffd3 	bl	d8020 <__aeabi_atexit>
}
   d607a:	4804      	ldr	r0, [pc, #16]	; (d608c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d607c:	bd10      	pop	{r4, pc}
   d607e:	bf00      	nop
   d6080:	2003e708 	.word	0x2003e708
   d6084:	2003e428 	.word	0x2003e428
   d6088:	000d5e85 	.word	0x000d5e85
   d608c:	2003e3b8 	.word	0x2003e3b8

000d6090 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6090:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6092:	4c0a      	ldr	r4, [pc, #40]	; (d60bc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6094:	7823      	ldrb	r3, [r4, #0]
   d6096:	f3bf 8f5b 	dmb	ish
   d609a:	07db      	lsls	r3, r3, #31
   d609c:	d40b      	bmi.n	d60b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d609e:	4620      	mov	r0, r4
   d60a0:	f7fe f80a 	bl	d40b8 <__cxa_guard_acquire>
   d60a4:	b138      	cbz	r0, d60b6 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d60a6:	4620      	mov	r0, r4
   d60a8:	f7fe f80b 	bl	d40c2 <__cxa_guard_release>
   d60ac:	4a04      	ldr	r2, [pc, #16]	; (d60c0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d60ae:	4905      	ldr	r1, [pc, #20]	; (d60c4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d60b0:	4805      	ldr	r0, [pc, #20]	; (d60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d60b2:	f001 ffb5 	bl	d8020 <__aeabi_atexit>
    return &factory;
}
   d60b6:	4804      	ldr	r0, [pc, #16]	; (d60c8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d60b8:	bd10      	pop	{r4, pc}
   d60ba:	bf00      	nop
   d60bc:	2003e70c 	.word	0x2003e70c
   d60c0:	2003e428 	.word	0x2003e428
   d60c4:	000d5e83 	.word	0x000d5e83
   d60c8:	2003e3bc 	.word	0x2003e3bc

000d60cc <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d60cc:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d60ce:	2500      	movs	r5, #0
   d60d0:	4604      	mov	r4, r0
   d60d2:	e9c0 5500 	strd	r5, r5, [r0]
   d60d6:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d60da:	6085      	str	r5, [r0, #8]
   d60dc:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d60de:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d60e2:	f7fe ff83 	bl	d4fec <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d60e6:	f7ff ffb5 	bl	d6054 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d60ea:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d60ec:	f7ff ffd0 	bl	d6090 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d60f0:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d60f2:	6220      	str	r0, [r4, #32]
}
   d60f4:	4620      	mov	r0, r4
   d60f6:	bd38      	pop	{r3, r4, r5, pc}

000d60f8 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d60f8:	b510      	push	{r4, lr}
    static LogManager mgr;
   d60fa:	4c0b      	ldr	r4, [pc, #44]	; (d6128 <_ZN5spark10LogManager8instanceEv+0x30>)
   d60fc:	7823      	ldrb	r3, [r4, #0]
   d60fe:	f3bf 8f5b 	dmb	ish
   d6102:	07db      	lsls	r3, r3, #31
   d6104:	d40e      	bmi.n	d6124 <_ZN5spark10LogManager8instanceEv+0x2c>
   d6106:	4620      	mov	r0, r4
   d6108:	f7fd ffd6 	bl	d40b8 <__cxa_guard_acquire>
   d610c:	b150      	cbz	r0, d6124 <_ZN5spark10LogManager8instanceEv+0x2c>
   d610e:	4807      	ldr	r0, [pc, #28]	; (d612c <_ZN5spark10LogManager8instanceEv+0x34>)
   d6110:	f7ff ffdc 	bl	d60cc <_ZN5spark10LogManagerC1Ev>
   d6114:	4620      	mov	r0, r4
   d6116:	f7fd ffd4 	bl	d40c2 <__cxa_guard_release>
   d611a:	4a05      	ldr	r2, [pc, #20]	; (d6130 <_ZN5spark10LogManager8instanceEv+0x38>)
   d611c:	4905      	ldr	r1, [pc, #20]	; (d6134 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d611e:	4803      	ldr	r0, [pc, #12]	; (d612c <_ZN5spark10LogManager8instanceEv+0x34>)
   d6120:	f001 ff7e 	bl	d8020 <__aeabi_atexit>
    return &mgr;
}
   d6124:	4801      	ldr	r0, [pc, #4]	; (d612c <_ZN5spark10LogManager8instanceEv+0x34>)
   d6126:	bd10      	pop	{r4, pc}
   d6128:	2003e704 	.word	0x2003e704
   d612c:	2003e714 	.word	0x2003e714
   d6130:	2003e428 	.word	0x2003e428
   d6134:	000d658d 	.word	0x000d658d

000d6138 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d6138:	4a02      	ldr	r2, [pc, #8]	; (d6144 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d613a:	4903      	ldr	r1, [pc, #12]	; (d6148 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d613c:	4803      	ldr	r0, [pc, #12]	; (d614c <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d613e:	2300      	movs	r3, #0
   d6140:	f7ff b8b4 	b.w	d52ac <log_set_callbacks>
   d6144:	000d6469 	.word	0x000d6469
   d6148:	000d63f5 	.word	0x000d63f5
   d614c:	000d6375 	.word	0x000d6375

000d6150 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d6150:	2300      	movs	r3, #0
   d6152:	461a      	mov	r2, r3
   d6154:	4619      	mov	r1, r3
   d6156:	4618      	mov	r0, r3
   d6158:	f7ff b8a8 	b.w	d52ac <log_set_callbacks>

000d615c <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d615c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d615e:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6160:	f851 3b04 	ldr.w	r3, [r1], #4
   d6164:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d6166:	4604      	mov	r4, r0
   d6168:	a801      	add	r0, sp, #4
   d616a:	f7ff fc21 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d616e:	466a      	mov	r2, sp
   d6170:	4629      	mov	r1, r5
   d6172:	4620      	mov	r0, r4
   d6174:	f001 fd46 	bl	d7c04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6178:	a801      	add	r0, sp, #4
   d617a:	f7ff fc20 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d617e:	4620      	mov	r0, r4
   d6180:	b003      	add	sp, #12
   d6182:	bd30      	pop	{r4, r5, pc}

000d6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6184:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d6186:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6188:	f851 3b04 	ldr.w	r3, [r1], #4
   d618c:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d618e:	4604      	mov	r4, r0
   d6190:	a801      	add	r0, sp, #4
   d6192:	f7ff fc0d 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d6196:	466a      	mov	r2, sp
   d6198:	4629      	mov	r1, r5
   d619a:	4620      	mov	r0, r4
   d619c:	f001 fdae 	bl	d7cfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d61a0:	a801      	add	r0, sp, #4
   d61a2:	f7ff fc0c 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d61a6:	4620      	mov	r0, r4
   d61a8:	b003      	add	sp, #12
   d61aa:	bd30      	pop	{r4, r5, pc}

000d61ac <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d61ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d61ae:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d61b0:	f851 3b04 	ldr.w	r3, [r1], #4
   d61b4:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d61b6:	4604      	mov	r4, r0
   d61b8:	a801      	add	r0, sp, #4
   d61ba:	f7ff fbf9 	bl	d59b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d61be:	466a      	mov	r2, sp
   d61c0:	4629      	mov	r1, r5
   d61c2:	4620      	mov	r0, r4
   d61c4:	f001 fd76 	bl	d7cb4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d61c8:	a801      	add	r0, sp, #4
   d61ca:	f7ff fbf8 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d61ce:	4620      	mov	r0, r4
   d61d0:	b003      	add	sp, #12
   d61d2:	bd30      	pop	{r4, r5, pc}

000d61d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d61d4:	b570      	push	{r4, r5, r6, lr}
   d61d6:	b08a      	sub	sp, #40	; 0x28
   d61d8:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d61da:	4601      	mov	r1, r0
   d61dc:	a804      	add	r0, sp, #16
   d61de:	f7ff ffd1 	bl	d6184 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d61e2:	4e14      	ldr	r6, [pc, #80]	; (d6234 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d61e4:	a804      	add	r0, sp, #16
   d61e6:	f001 fda1 	bl	d7d2c <_ZN5spark18JSONObjectIterator4nextEv>
   d61ea:	b1e8      	cbz	r0, d6228 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d61ec:	a904      	add	r1, sp, #16
   d61ee:	4668      	mov	r0, sp
   d61f0:	f7ff ffdc 	bl	d61ac <_ZNK5spark18JSONObjectIterator4nameEv>
   d61f4:	9802      	ldr	r0, [sp, #8]
   d61f6:	4631      	mov	r1, r6
   d61f8:	f7ff fe6d 	bl	d5ed6 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d61fc:	4604      	mov	r4, r0
   d61fe:	b110      	cbz	r0, d6206 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d6200:	1e2c      	subs	r4, r5, #0
   d6202:	bf18      	it	ne
   d6204:	2401      	movne	r4, #1
   d6206:	a801      	add	r0, sp, #4
   d6208:	f7ff fbd9 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d620c:	2c00      	cmp	r4, #0
   d620e:	d0e9      	beq.n	d61e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d6210:	a904      	add	r1, sp, #16
   d6212:	4668      	mov	r0, sp
   d6214:	f7ff ffa2 	bl	d615c <_ZNK5spark18JSONObjectIterator5valueEv>
   d6218:	4668      	mov	r0, sp
   d621a:	f001 fd29 	bl	d7c70 <_ZNK5spark9JSONValue5toIntEv>
   d621e:	6028      	str	r0, [r5, #0]
   d6220:	a801      	add	r0, sp, #4
   d6222:	f7ff fbcc 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6226:	e7dd      	b.n	d61e4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d6228:	a805      	add	r0, sp, #20
   d622a:	f7ff fbc8 	bl	d59be <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d622e:	b00a      	add	sp, #40	; 0x28
   d6230:	bd70      	pop	{r4, r5, r6, pc}
   d6232:	bf00      	nop
   d6234:	000d86f4 	.word	0x000d86f4

000d6238 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6238:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d623a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d623c:	4620      	mov	r0, r4
   d623e:	4912      	ldr	r1, [pc, #72]	; (d6288 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d6240:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d6242:	f002 f892 	bl	d836a <strcmp>
   d6246:	b948      	cbnz	r0, d625c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d6248:	f000 ff7a 	bl	d7140 <_Z16_fetch_usbserialv>
   d624c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d6250:	f000 ff66 	bl	d7120 <_ZN9USBSerial5beginEl>
        return &Serial;
   d6254:	f000 ff74 	bl	d7140 <_Z16_fetch_usbserialv>
}
   d6258:	b003      	add	sp, #12
   d625a:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d625c:	490b      	ldr	r1, [pc, #44]	; (d628c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d625e:	4620      	mov	r0, r4
   d6260:	f002 f883 	bl	d836a <strcmp>
   d6264:	b970      	cbnz	r0, d6284 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d6266:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d626a:	a901      	add	r1, sp, #4
   d626c:	4628      	mov	r0, r5
        int baud = 9600;
   d626e:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d6270:	f7ff ffb0 	bl	d61d4 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d6274:	f001 f838 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d6278:	9901      	ldr	r1, [sp, #4]
   d627a:	f001 f82f 	bl	d72dc <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d627e:	f001 f833 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d6282:	e7e9      	b.n	d6258 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d6284:	2000      	movs	r0, #0
   d6286:	e7e7      	b.n	d6258 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d6288:	000d86f9 	.word	0x000d86f9
   d628c:	000d8700 	.word	0x000d8700

000d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6290:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6292:	e9d0 5300 	ldrd	r5, r3, [r0]
   d6296:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6298:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d629a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d629e:	42ae      	cmp	r6, r5
   d62a0:	d005      	beq.n	d62ae <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d62a2:	f105 0008 	add.w	r0, r5, #8
   d62a6:	f7ff fff3 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d62aa:	3514      	adds	r5, #20
   d62ac:	e7f7      	b.n	d629e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d62ae:	6820      	ldr	r0, [r4, #0]
   d62b0:	f7ff f892 	bl	d53d8 <free>
}
   d62b4:	4620      	mov	r0, r4
   d62b6:	bd70      	pop	{r4, r5, r6, pc}

000d62b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d62b8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d62ba:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d62be:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d62c0:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d62c4:	42ae      	cmp	r6, r5
   d62c6:	d004      	beq.n	d62d2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d62c8:	4628      	mov	r0, r5
   d62ca:	f7ff f9bb 	bl	d5644 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d62ce:	3510      	adds	r5, #16
   d62d0:	e7f8      	b.n	d62c4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d62d2:	6820      	ldr	r0, [r4, #0]
   d62d4:	f7ff f880 	bl	d53d8 <free>
}
   d62d8:	4620      	mov	r0, r4
   d62da:	bd70      	pop	{r4, r5, r6, pc}

000d62dc <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d62dc:	b510      	push	{r4, lr}
   d62de:	4604      	mov	r4, r0
   d62e0:	300c      	adds	r0, #12
   d62e2:	f7ff ffd5 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d62e6:	4620      	mov	r0, r4
   d62e8:	f7ff ffe6 	bl	d62b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d62ec:	4620      	mov	r0, r4
   d62ee:	bd10      	pop	{r4, pc}

000d62f0 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d62f0:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d62f2:	4b04      	ldr	r3, [pc, #16]	; (d6304 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d62f4:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d62f6:	f840 3b04 	str.w	r3, [r0], #4
   d62fa:	f7ff ffef 	bl	d62dc <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d62fe:	4620      	mov	r0, r4
   d6300:	bd10      	pop	{r4, pc}
   d6302:	bf00      	nop
   d6304:	000d85ac 	.word	0x000d85ac

000d6308 <_ZN5spark16StreamLogHandlerD0Ev>:
   d6308:	b510      	push	{r4, lr}
   d630a:	4604      	mov	r4, r0
   d630c:	f7ff fff0 	bl	d62f0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6310:	4620      	mov	r0, r4
   d6312:	2124      	movs	r1, #36	; 0x24
   d6314:	f001 fe89 	bl	d802a <_ZdlPvj>
   d6318:	4620      	mov	r0, r4
   d631a:	bd10      	pop	{r4, pc}

000d631c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d631c:	b510      	push	{r4, lr}
   d631e:	4b03      	ldr	r3, [pc, #12]	; (d632c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d6320:	6003      	str	r3, [r0, #0]
   d6322:	4604      	mov	r4, r0
   d6324:	f7ff ffe4 	bl	d62f0 <_ZN5spark16StreamLogHandlerD1Ev>
   d6328:	4620      	mov	r0, r4
   d632a:	bd10      	pop	{r4, pc}
   d632c:	000d87a0 	.word	0x000d87a0

000d6330 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d6330:	b510      	push	{r4, lr}
   d6332:	4604      	mov	r4, r0
   d6334:	f7ff fff2 	bl	d631c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d6338:	4620      	mov	r0, r4
   d633a:	2124      	movs	r1, #36	; 0x24
   d633c:	f001 fe75 	bl	d802a <_ZdlPvj>
   d6340:	4620      	mov	r0, r4
   d6342:	bd10      	pop	{r4, pc}

000d6344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d6344:	2200      	movs	r2, #0
   d6346:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d634a:	b510      	push	{r4, lr}
        capacity_(0) {
   d634c:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d634e:	680c      	ldr	r4, [r1, #0]
   d6350:	6004      	str	r4, [r0, #0]
   d6352:	684c      	ldr	r4, [r1, #4]
   d6354:	6044      	str	r4, [r0, #4]
   d6356:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6358:	600a      	str	r2, [r1, #0]
   d635a:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d635c:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d635e:	608a      	str	r2, [r1, #8]
}
   d6360:	bd10      	pop	{r4, pc}

000d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6362:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d6364:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d6366:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6368:	6818      	ldr	r0, [r3, #0]
   d636a:	f7fe fe57 	bl	d501c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d636e:	4620      	mov	r0, r4
   d6370:	bd10      	pop	{r4, pc}
	...

000d6374 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d6374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6378:	b087      	sub	sp, #28
   d637a:	4680      	mov	r8, r0
   d637c:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d637e:	4b1c      	ldr	r3, [pc, #112]	; (d63f0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d6380:	685b      	ldr	r3, [r3, #4]
   d6382:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d6386:	4689      	mov	r9, r1
   d6388:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d638a:	b96b      	cbnz	r3, d63a8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d638c:	f7ff feb4 	bl	d60f8 <_ZN5spark10LogManager8instanceEv>
   d6390:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6392:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d6396:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6398:	9305      	str	r3, [sp, #20]
   d639a:	f7fe fe37 	bl	d500c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d639e:	7b23      	ldrb	r3, [r4, #12]
   d63a0:	b12b      	cbz	r3, d63ae <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d63a2:	a805      	add	r0, sp, #20
   d63a4:	f7ff ffdd 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d63a8:	b007      	add	sp, #28
   d63aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d63ae:	2301      	movs	r3, #1
   d63b0:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d63b2:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d63b6:	fa5f f989 	uxtb.w	r9, r9
   d63ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d63be:	45aa      	cmp	sl, r5
   d63c0:	d012      	beq.n	d63e8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d63c2:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d63c6:	4631      	mov	r1, r6
   d63c8:	1d38      	adds	r0, r7, #4
   d63ca:	f7ff fe19 	bl	d6000 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d63ce:	4581      	cmp	r9, r0
   d63d0:	d3f5      	bcc.n	d63be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d63d2:	683b      	ldr	r3, [r7, #0]
   d63d4:	9a03      	ldr	r2, [sp, #12]
   d63d6:	9200      	str	r2, [sp, #0]
   d63d8:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d63dc:	464a      	mov	r2, r9
   d63de:	4633      	mov	r3, r6
   d63e0:	4641      	mov	r1, r8
   d63e2:	4638      	mov	r0, r7
   d63e4:	47d8      	blx	fp
   d63e6:	e7ea      	b.n	d63be <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d63e8:	2300      	movs	r3, #0
   d63ea:	7323      	strb	r3, [r4, #12]
   d63ec:	e7d9      	b.n	d63a2 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d63ee:	bf00      	nop
   d63f0:	e000ed00 	.word	0xe000ed00

000d63f4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d63f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d63f8:	469b      	mov	fp, r3
   d63fa:	4b1a      	ldr	r3, [pc, #104]	; (d6464 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d63fc:	685b      	ldr	r3, [r3, #4]
   d63fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d6402:	4680      	mov	r8, r0
   d6404:	4689      	mov	r9, r1
   d6406:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d6408:	b96b      	cbnz	r3, d6426 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d640a:	f7ff fe75 	bl	d60f8 <_ZN5spark10LogManager8instanceEv>
   d640e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6410:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d6414:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6416:	9301      	str	r3, [sp, #4]
   d6418:	f7fe fdf8 	bl	d500c <os_mutex_recursive_lock>
        if (that->isActive()) {
   d641c:	7b23      	ldrb	r3, [r4, #12]
   d641e:	b12b      	cbz	r3, d642c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d6420:	a801      	add	r0, sp, #4
   d6422:	f7ff ff9e 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d6426:	b003      	add	sp, #12
   d6428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d642c:	2301      	movs	r3, #1
   d642e:	7323      	strb	r3, [r4, #12]
   d6430:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d6434:	b2f6      	uxtb	r6, r6
   d6436:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d643a:	4555      	cmp	r5, sl
   d643c:	d00e      	beq.n	d645c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d643e:	f855 7b04 	ldr.w	r7, [r5], #4
   d6442:	4659      	mov	r1, fp
   d6444:	1d38      	adds	r0, r7, #4
   d6446:	f7ff fddb 	bl	d6000 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d644a:	4286      	cmp	r6, r0
   d644c:	d3f5      	bcc.n	d643a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d644e:	683b      	ldr	r3, [r7, #0]
   d6450:	464a      	mov	r2, r9
   d6452:	68db      	ldr	r3, [r3, #12]
   d6454:	4641      	mov	r1, r8
   d6456:	4638      	mov	r0, r7
   d6458:	4798      	blx	r3
   d645a:	e7ee      	b.n	d643a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d645c:	2300      	movs	r3, #0
   d645e:	7323      	strb	r3, [r4, #12]
   d6460:	e7de      	b.n	d6420 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d6462:	bf00      	nop
   d6464:	e000ed00 	.word	0xe000ed00

000d6468 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6468:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d646c:	4b16      	ldr	r3, [pc, #88]	; (d64c8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d646e:	685b      	ldr	r3, [r3, #4]
   d6470:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d6474:	4605      	mov	r5, r0
   d6476:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d6478:	bb1b      	cbnz	r3, d64c2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d647a:	f7ff fe3d 	bl	d60f8 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d647e:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d6482:	4604      	mov	r4, r0
   d6484:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6486:	9301      	str	r3, [sp, #4]
   d6488:	f7fe fdc0 	bl	d500c <os_mutex_recursive_lock>
   d648c:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d6490:	2446      	movs	r4, #70	; 0x46
   d6492:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6496:	45b0      	cmp	r8, r6
   d6498:	d109      	bne.n	d64ae <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d649a:	a801      	add	r0, sp, #4
   d649c:	f7ff ff61 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d64a0:	42a5      	cmp	r5, r4
   d64a2:	bfb4      	ite	lt
   d64a4:	2000      	movlt	r0, #0
   d64a6:	2001      	movge	r0, #1
}
   d64a8:	b002      	add	sp, #8
   d64aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d64ae:	f856 0b04 	ldr.w	r0, [r6], #4
   d64b2:	4639      	mov	r1, r7
   d64b4:	3004      	adds	r0, #4
   d64b6:	f7ff fda3 	bl	d6000 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d64ba:	4284      	cmp	r4, r0
   d64bc:	bfa8      	it	ge
   d64be:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d64c0:	e7e9      	b.n	d6496 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d64c2:	2000      	movs	r0, #0
   d64c4:	e7f0      	b.n	d64a8 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d64c6:	bf00      	nop
   d64c8:	e000ed00 	.word	0xe000ed00

000d64cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d64cc:	b570      	push	{r4, r5, r6, lr}
   d64ce:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d64d0:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d64d4:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d64d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d64da:	4282      	cmp	r2, r0
   d64dc:	d007      	beq.n	d64ee <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d64de:	4601      	mov	r1, r0
            if (*p == value) {
   d64e0:	681d      	ldr	r5, [r3, #0]
   d64e2:	f851 6b04 	ldr.w	r6, [r1], #4
   d64e6:	42ae      	cmp	r6, r5
   d64e8:	d003      	beq.n	d64f2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d64ea:	4608      	mov	r0, r1
   d64ec:	e7f5      	b.n	d64da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d64ee:	2000      	movs	r0, #0
}
   d64f0:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d64f2:	1a52      	subs	r2, r2, r1
   d64f4:	f001 fedc 	bl	d82b0 <memmove>
    --size_;
   d64f8:	6863      	ldr	r3, [r4, #4]
   d64fa:	3b01      	subs	r3, #1
   d64fc:	6063      	str	r3, [r4, #4]
    return true;
   d64fe:	2001      	movs	r0, #1
   d6500:	e7f6      	b.n	d64f0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d6502 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d6502:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d6504:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d6508:	4604      	mov	r4, r0
   d650a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d650c:	9101      	str	r1, [sp, #4]
   d650e:	9303      	str	r3, [sp, #12]
   d6510:	f7fe fd7c 	bl	d500c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6514:	a901      	add	r1, sp, #4
   d6516:	4620      	mov	r0, r4
   d6518:	f7ff ffd8 	bl	d64cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d651c:	b118      	cbz	r0, d6526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d651e:	6863      	ldr	r3, [r4, #4]
   d6520:	b90b      	cbnz	r3, d6526 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d6522:	f7ff fe15 	bl	d6150 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6526:	a803      	add	r0, sp, #12
   d6528:	f7ff ff1b 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d652c:	b004      	add	sp, #16
   d652e:	bd10      	pop	{r4, pc}

000d6530 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d6530:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d6532:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d6536:	2318      	movs	r3, #24
   d6538:	4604      	mov	r4, r0
   d653a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d653e:	42ae      	cmp	r6, r5
   d6540:	d015      	beq.n	d656e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6542:	f105 0110 	add.w	r1, r5, #16
   d6546:	4620      	mov	r0, r4
   d6548:	f7ff ffc0 	bl	d64cc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d654c:	6863      	ldr	r3, [r4, #4]
   d654e:	b90b      	cbnz	r3, d6554 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6550:	f7ff fdfe 	bl	d6150 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d6554:	69e0      	ldr	r0, [r4, #28]
   d6556:	6929      	ldr	r1, [r5, #16]
   d6558:	6803      	ldr	r3, [r0, #0]
   d655a:	68db      	ldr	r3, [r3, #12]
   d655c:	4798      	blx	r3
        if (h.stream) {
   d655e:	6969      	ldr	r1, [r5, #20]
   d6560:	b119      	cbz	r1, d656a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6562:	6a20      	ldr	r0, [r4, #32]
   d6564:	6803      	ldr	r3, [r0, #0]
   d6566:	68db      	ldr	r3, [r3, #12]
   d6568:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d656a:	3518      	adds	r5, #24
   d656c:	e7e7      	b.n	d653e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d656e:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d6572:	2618      	movs	r6, #24
   d6574:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6578:	42ae      	cmp	r6, r5
   d657a:	d004      	beq.n	d6586 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d657c:	4628      	mov	r0, r5
   d657e:	f7ff f861 	bl	d5644 <_ZN6StringD1Ev>
   d6582:	3518      	adds	r5, #24
   d6584:	e7f8      	b.n	d6578 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d6586:	2300      	movs	r3, #0
   d6588:	6163      	str	r3, [r4, #20]
}
   d658a:	bd70      	pop	{r4, r5, r6, pc}

000d658c <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d658c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d658e:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d6590:	f7ff fdde 	bl	d6150 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6594:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d6598:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d659a:	9301      	str	r3, [sp, #4]
   d659c:	f7fe fd36 	bl	d500c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d65a0:	4620      	mov	r0, r4
   d65a2:	f7ff ffc5 	bl	d6530 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d65a6:	a801      	add	r0, sp, #4
   d65a8:	f7ff fedb 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d65ac:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d65ae:	b108      	cbz	r0, d65b4 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d65b0:	f7fe fd24 	bl	d4ffc <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d65b4:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d65b8:	2618      	movs	r6, #24
   d65ba:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d65be:	42ae      	cmp	r6, r5
   d65c0:	d004      	beq.n	d65cc <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d65c2:	4628      	mov	r0, r5
   d65c4:	f7ff f83e 	bl	d5644 <_ZN6StringD1Ev>
   d65c8:	3518      	adds	r5, #24
   d65ca:	e7f8      	b.n	d65be <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d65cc:	6920      	ldr	r0, [r4, #16]
   d65ce:	f7fe ff03 	bl	d53d8 <free>
   d65d2:	6820      	ldr	r0, [r4, #0]
   d65d4:	f7fe ff00 	bl	d53d8 <free>
}
   d65d8:	4620      	mov	r0, r4
   d65da:	b002      	add	sp, #8
   d65dc:	bd70      	pop	{r4, r5, r6, pc}

000d65de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d65de:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d65e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d65e2:	4606      	mov	r6, r0
   d65e4:	460c      	mov	r4, r1
   d65e6:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d65e8:	d927      	bls.n	d663a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d65ea:	4290      	cmp	r0, r2
   d65ec:	d226      	bcs.n	d663c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d65ee:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d65f2:	1a6c      	subs	r4, r5, r1
   d65f4:	f1a1 0714 	sub.w	r7, r1, #20
   d65f8:	4404      	add	r4, r0
        capacity_(0) {
   d65fa:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d65fc:	42af      	cmp	r7, r5
   d65fe:	d03d      	beq.n	d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d6600:	b1a4      	cbz	r4, d662c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d6602:	682b      	ldr	r3, [r5, #0]
   d6604:	6023      	str	r3, [r4, #0]
   d6606:	88ab      	ldrh	r3, [r5, #4]
   d6608:	80a3      	strh	r3, [r4, #4]
   d660a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d660e:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d6610:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d6614:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6616:	68ab      	ldr	r3, [r5, #8]
   d6618:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d661a:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d661c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d661e:	68ea      	ldr	r2, [r5, #12]
   d6620:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6622:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6624:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6626:	692a      	ldr	r2, [r5, #16]
   d6628:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d662a:	612b      	str	r3, [r5, #16]
   d662c:	f105 0008 	add.w	r0, r5, #8
   d6630:	f7ff fe2e 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d6634:	3d14      	subs	r5, #20
   d6636:	3c14      	subs	r4, #20
   d6638:	e7e0      	b.n	d65fc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d663a:	d01f      	beq.n	d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d663c:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d663e:	42ac      	cmp	r4, r5
   d6640:	d01c      	beq.n	d667c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d6642:	b1a6      	cbz	r6, d666e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d6644:	6823      	ldr	r3, [r4, #0]
   d6646:	6033      	str	r3, [r6, #0]
   d6648:	88a3      	ldrh	r3, [r4, #4]
   d664a:	80b3      	strh	r3, [r6, #4]
   d664c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d6650:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d6652:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d6656:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6658:	68a3      	ldr	r3, [r4, #8]
   d665a:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d665c:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d665e:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6660:	68e2      	ldr	r2, [r4, #12]
   d6662:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6664:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6666:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6668:	6922      	ldr	r2, [r4, #16]
   d666a:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d666c:	6123      	str	r3, [r4, #16]
   d666e:	f104 0008 	add.w	r0, r4, #8
   d6672:	f7ff fe0d 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d6676:	3414      	adds	r4, #20
   d6678:	3614      	adds	r6, #20
   d667a:	e7e0      	b.n	d663e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d667c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d667e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d667e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6680:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d6684:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6686:	4604      	mov	r4, r0
   d6688:	460e      	mov	r6, r1
   d668a:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d668c:	db0d      	blt.n	d66aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d668e:	3501      	adds	r5, #1
        if (n > 0) {
   d6690:	2d00      	cmp	r5, #0
   d6692:	6800      	ldr	r0, [r0, #0]
   d6694:	dd04      	ble.n	d66a0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d6696:	00a9      	lsls	r1, r5, #2
   d6698:	f7fe fea6 	bl	d53e8 <realloc>
            if (!d) {
   d669c:	b918      	cbnz	r0, d66a6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d669e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d66a0:	f7fe fe9a 	bl	d53d8 <free>
        T* d = nullptr;
   d66a4:	2000      	movs	r0, #0
        data_ = d;
   d66a6:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d66a8:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d66aa:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d66ac:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d66ae:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d66b2:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d66b4:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d66b8:	1d08      	adds	r0, r1, #4
   d66ba:	f001 fdf9 	bl	d82b0 <memmove>
    new(p) T(std::move(value));
   d66be:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d66c2:	6863      	ldr	r3, [r4, #4]
   d66c4:	3301      	adds	r3, #1
   d66c6:	6063      	str	r3, [r4, #4]
    return true;
   d66c8:	2001      	movs	r0, #1
   d66ca:	e7e8      	b.n	d669e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d66cc <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d66cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d66ce:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d66d2:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d66d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d66d6:	9301      	str	r3, [sp, #4]
   d66d8:	460d      	mov	r5, r1
   d66da:	f7fe fc97 	bl	d500c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d66de:	e9d4 3100 	ldrd	r3, r1, [r4]
   d66e2:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d66e6:	4283      	cmp	r3, r0
   d66e8:	461a      	mov	r2, r3
   d66ea:	d00b      	beq.n	d6704 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d66ec:	6812      	ldr	r2, [r2, #0]
   d66ee:	42aa      	cmp	r2, r5
   d66f0:	f103 0304 	add.w	r3, r3, #4
   d66f4:	d1f7      	bne.n	d66e6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d66f6:	a801      	add	r0, sp, #4
   d66f8:	f7ff fe33 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d66fc:	2500      	movs	r5, #0
}
   d66fe:	4628      	mov	r0, r5
   d6700:	b003      	add	sp, #12
   d6702:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d6704:	462a      	mov	r2, r5
   d6706:	4620      	mov	r0, r4
   d6708:	f7ff ffb9 	bl	d667e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d670c:	4605      	mov	r5, r0
   d670e:	2800      	cmp	r0, #0
   d6710:	d0f1      	beq.n	d66f6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d6712:	6863      	ldr	r3, [r4, #4]
   d6714:	2b01      	cmp	r3, #1
   d6716:	d101      	bne.n	d671c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d6718:	f7ff fd0e 	bl	d6138 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d671c:	a801      	add	r0, sp, #4
   d671e:	f7ff fe20 	bl	d6362 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6722:	e7ec      	b.n	d66fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d6724 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d6724:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6728:	4604      	mov	r4, r0
   d672a:	460d      	mov	r5, r1
   d672c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d672e:	d914      	bls.n	d675a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6730:	4290      	cmp	r0, r2
   d6732:	d213      	bcs.n	d675c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d6734:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d6738:	1a75      	subs	r5, r6, r1
   d673a:	f1a1 0710 	sub.w	r7, r1, #16
   d673e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6740:	42b7      	cmp	r7, r6
   d6742:	d018      	beq.n	d6776 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6744:	b11c      	cbz	r4, d674e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6746:	4631      	mov	r1, r6
   d6748:	4620      	mov	r0, r4
   d674a:	f7fe fff7 	bl	d573c <_ZN6StringC1EOS_>
                end->~T();
   d674e:	4630      	mov	r0, r6
   d6750:	f7fe ff78 	bl	d5644 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d6754:	3e10      	subs	r6, #16
   d6756:	3c10      	subs	r4, #16
   d6758:	e7f2      	b.n	d6740 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d675a:	d00c      	beq.n	d6776 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d675c:	42b5      	cmp	r5, r6
   d675e:	d00a      	beq.n	d6776 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6760:	b11c      	cbz	r4, d676a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6762:	4629      	mov	r1, r5
   d6764:	4620      	mov	r0, r4
   d6766:	f7fe ffe9 	bl	d573c <_ZN6StringC1EOS_>
                p->~T();
   d676a:	4628      	mov	r0, r5
   d676c:	f7fe ff6a 	bl	d5644 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d6770:	3510      	adds	r5, #16
   d6772:	3410      	adds	r4, #16
   d6774:	e7f2      	b.n	d675c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d6776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d6778:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d677a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d677c:	4605      	mov	r5, r0
        if (n > 0) {
   d677e:	dd11      	ble.n	d67a4 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6780:	0130      	lsls	r0, r6, #4
   d6782:	f7fe fe21 	bl	d53c8 <malloc>
            if (!d) {
   d6786:	4604      	mov	r4, r0
   d6788:	b158      	cbz	r0, d67a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d678a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d678e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6792:	f7ff ffc7 	bl	d6724 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d6796:	6828      	ldr	r0, [r5, #0]
   d6798:	f7fe fe1e 	bl	d53d8 <free>
        data_ = d;
   d679c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d679e:	60ae      	str	r6, [r5, #8]
        return true;
   d67a0:	2001      	movs	r0, #1
    }
   d67a2:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d67a4:	2400      	movs	r4, #0
   d67a6:	e7f6      	b.n	d6796 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d67a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d67a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d67ac:	4691      	mov	r9, r2
   d67ae:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d67b0:	2300      	movs	r3, #0
   d67b2:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d67b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d67b8:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d67ba:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d67bc:	4299      	cmp	r1, r3
        capacity_(0) {
   d67be:	e9c0 3300 	strd	r3, r3, [r0]
   d67c2:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d67c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d67ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d67ce:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d67d0:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d67d2:	dc23      	bgt.n	d681c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d67d4:	e9d9 5700 	ldrd	r5, r7, [r9]
   d67d8:	2314      	movs	r3, #20
   d67da:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d67de:	42af      	cmp	r7, r5
   d67e0:	d03b      	beq.n	d685a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d67e2:	4629      	mov	r1, r5
   d67e4:	a80d      	add	r0, sp, #52	; 0x34
   d67e6:	f7fe ffa9 	bl	d573c <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d67ea:	a90d      	add	r1, sp, #52	; 0x34
   d67ec:	a811      	add	r0, sp, #68	; 0x44
   d67ee:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d67f0:	f7fe ffa4 	bl	d573c <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d67f4:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d67f8:	4299      	cmp	r1, r3
   d67fa:	da1b      	bge.n	d6834 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d67fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d67fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d6800:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6804:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6808:	4631      	mov	r1, r6
   d680a:	f106 0010 	add.w	r0, r6, #16
   d680e:	f7ff ff89 	bl	d6724 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6812:	b9ee      	cbnz	r6, d6850 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d6814:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6816:	3301      	adds	r3, #1
   d6818:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d681a:	e011      	b.n	d6840 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d681c:	a80a      	add	r0, sp, #40	; 0x28
   d681e:	f7ff ffab 	bl	d6778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6822:	2800      	cmp	r0, #0
   d6824:	d1d6      	bne.n	d67d4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d6826:	a80a      	add	r0, sp, #40	; 0x28
   d6828:	f7ff fd46 	bl	d62b8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d682c:	4620      	mov	r0, r4
   d682e:	b017      	add	sp, #92	; 0x5c
   d6830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6834:	3101      	adds	r1, #1
   d6836:	a80a      	add	r0, sp, #40	; 0x28
   d6838:	f7ff ff9e 	bl	d6778 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d683c:	2800      	cmp	r0, #0
   d683e:	d1dd      	bne.n	d67fc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d6840:	a811      	add	r0, sp, #68	; 0x44
   d6842:	f7fe feff 	bl	d5644 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d6846:	a80d      	add	r0, sp, #52	; 0x34
   d6848:	f7fe fefc 	bl	d5644 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d684c:	3514      	adds	r5, #20
   d684e:	e7c6      	b.n	d67de <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d6850:	a911      	add	r1, sp, #68	; 0x44
   d6852:	4630      	mov	r0, r6
   d6854:	f7fe ff72 	bl	d573c <_ZN6StringC1EOS_>
   d6858:	e7dc      	b.n	d6814 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d685a:	2600      	movs	r6, #0
   d685c:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d6860:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d6862:	4637      	mov	r7, r6
   d6864:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d6868:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d686c:	429e      	cmp	r6, r3
   d686e:	f280 8097 	bge.w	d69a0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d6872:	0133      	lsls	r3, r6, #4
   d6874:	58d3      	ldr	r3, [r2, r3]
   d6876:	9308      	str	r3, [sp, #32]
        if (!category) {
   d6878:	b90b      	cbnz	r3, d687e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d687a:	3601      	adds	r6, #1
   d687c:	e7f4      	b.n	d6868 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d687e:	fb0a f306 	mul.w	r3, sl, r6
   d6882:	9709      	str	r7, [sp, #36]	; 0x24
   d6884:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6886:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d6888:	a909      	add	r1, sp, #36	; 0x24
   d688a:	a808      	add	r0, sp, #32
   d688c:	f7ff fafc 	bl	d5e88 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6890:	4683      	mov	fp, r0
   d6892:	2800      	cmp	r0, #0
   d6894:	d0f1      	beq.n	d687a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6896:	4601      	mov	r1, r0
   d6898:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d689a:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d689e:	f10d 031f 	add.w	r3, sp, #31
   d68a2:	4628      	mov	r0, r5
   d68a4:	f7ff fb6e 	bl	d5f84 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d68a8:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d68ac:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d68ae:	f1b8 0f00 	cmp.w	r8, #0
   d68b2:	d166      	bne.n	d6982 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d68b4:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d68b8:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d68bc:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d68c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d68c4:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d68c8:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d68cc:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d68d0:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d68d4:	4293      	cmp	r3, r2
   d68d6:	db1a      	blt.n	d690e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d68d8:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d68dc:	f1bb 0f00 	cmp.w	fp, #0
   d68e0:	dd4a      	ble.n	d6978 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d68e2:	fb0a f00b 	mul.w	r0, sl, fp
   d68e6:	f7fe fd6f 	bl	d53c8 <malloc>
            if (!d) {
   d68ea:	9004      	str	r0, [sp, #16]
   d68ec:	2800      	cmp	r0, #0
   d68ee:	d045      	beq.n	d697c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d68f0:	e9d5 1200 	ldrd	r1, r2, [r5]
   d68f4:	fb0a 1202 	mla	r2, sl, r2, r1
   d68f8:	f7ff fe71 	bl	d65de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d68fc:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d68fe:	6828      	ldr	r0, [r5, #0]
   d6900:	9304      	str	r3, [sp, #16]
   d6902:	f7fe fd69 	bl	d53d8 <free>
        data_ = d;
   d6906:	9b04      	ldr	r3, [sp, #16]
   d6908:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d690a:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d690e:	9b01      	ldr	r3, [sp, #4]
   d6910:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d6914:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d6916:	fb0a f303 	mul.w	r3, sl, r3
   d691a:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d691e:	f101 0014 	add.w	r0, r1, #20
   d6922:	fb0a b202 	mla	r2, sl, r2, fp
   d6926:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d6928:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d692a:	f7ff fe58 	bl	d65de <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d692e:	9904      	ldr	r1, [sp, #16]
   d6930:	b1a9      	cbz	r1, d695e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d6932:	9b05      	ldr	r3, [sp, #20]
   d6934:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d6936:	f84b 2003 	str.w	r2, [fp, r3]
   d693a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d693e:	808b      	strh	r3, [r1, #4]
   d6940:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d6944:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d6946:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d694a:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d694c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d694e:	608b      	str	r3, [r1, #8]
   d6950:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d6952:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d6954:	60cb      	str	r3, [r1, #12]
   d6956:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d6958:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d695a:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d695c:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d695e:	686b      	ldr	r3, [r5, #4]
   d6960:	3301      	adds	r3, #1
   d6962:	606b      	str	r3, [r5, #4]
   d6964:	a813      	add	r0, sp, #76	; 0x4c
   d6966:	f7ff fc93 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d696a:	f1b8 0f00 	cmp.w	r8, #0
   d696e:	d008      	beq.n	d6982 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d6970:	a80d      	add	r0, sp, #52	; 0x34
   d6972:	f7ff fc8d 	bl	d6290 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6976:	e756      	b.n	d6826 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d6978:	4643      	mov	r3, r8
   d697a:	e7c0      	b.n	d68fe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d697c:	f04f 0801 	mov.w	r8, #1
   d6980:	e7f0      	b.n	d6964 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d6982:	9b01      	ldr	r3, [sp, #4]
   d6984:	682d      	ldr	r5, [r5, #0]
   d6986:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d698a:	9b08      	ldr	r3, [sp, #32]
   d698c:	781b      	ldrb	r3, [r3, #0]
   d698e:	b92b      	cbnz	r3, d699c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d6990:	f8d9 3000 	ldr.w	r3, [r9]
   d6994:	9a02      	ldr	r2, [sp, #8]
   d6996:	4413      	add	r3, r2
   d6998:	7c1b      	ldrb	r3, [r3, #16]
   d699a:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d699c:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d699e:	e773      	b.n	d6888 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69a0:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d69a2:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69a4:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d69a6:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69a8:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d69aa:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d69ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d69ae:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69b0:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d69b2:	60a2      	str	r2, [r4, #8]
   d69b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d69b6:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69b8:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d69ba:	60e2      	str	r2, [r4, #12]
   d69bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d69be:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69c0:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d69c2:	6122      	str	r2, [r4, #16]
   d69c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d69c6:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d69c8:	9b03      	ldr	r3, [sp, #12]
   d69ca:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d69cc:	6162      	str	r2, [r4, #20]
   d69ce:	7623      	strb	r3, [r4, #24]
   d69d0:	e7ce      	b.n	d6970 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d69d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d69d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d69d6:	4605      	mov	r5, r0
   d69d8:	4b09      	ldr	r3, [pc, #36]	; (d6a00 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d69da:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d69de:	4604      	mov	r4, r0
   d69e0:	460e      	mov	r6, r1
        filter_(level, filters) {
   d69e2:	a801      	add	r0, sp, #4
   d69e4:	4611      	mov	r1, r2
   d69e6:	f7fd fd66 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d69ea:	aa01      	add	r2, sp, #4
   d69ec:	4631      	mov	r1, r6
   d69ee:	4628      	mov	r0, r5
   d69f0:	f7ff feda 	bl	d67a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d69f4:	a801      	add	r0, sp, #4
   d69f6:	f7fd fd1d 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d69fa:	4620      	mov	r0, r4
   d69fc:	b004      	add	sp, #16
   d69fe:	bd70      	pop	{r4, r5, r6, pc}
   d6a00:	000d85ac 	.word	0x000d85ac

000d6a04 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d6a04:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a06:	460f      	mov	r7, r1
   d6a08:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a0a:	4926      	ldr	r1, [pc, #152]	; (d6aa4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d6a0c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a0e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d6a10:	4616      	mov	r6, r2
   d6a12:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6a14:	f001 fca9 	bl	d836a <strcmp>
   d6a18:	bb00      	cbnz	r0, d6a5c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d6a1a:	b1e4      	cbz	r4, d6a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6a1c:	4629      	mov	r1, r5
   d6a1e:	4668      	mov	r0, sp
   d6a20:	f7ff fc90 	bl	d6344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6a24:	4920      	ldr	r1, [pc, #128]	; (d6aa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d6a26:	2024      	movs	r0, #36	; 0x24
   d6a28:	f001 fb01 	bl	d802e <_ZnwjRKSt9nothrow_t>
   d6a2c:	4605      	mov	r5, r0
   d6a2e:	b170      	cbz	r0, d6a4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6a30:	4669      	mov	r1, sp
   d6a32:	a803      	add	r0, sp, #12
   d6a34:	f7fd fd3f 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6a38:	aa03      	add	r2, sp, #12
   d6a3a:	4631      	mov	r1, r6
   d6a3c:	4628      	mov	r0, r5
   d6a3e:	f7ff ffc9 	bl	d69d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6a42:	a803      	add	r0, sp, #12
   d6a44:	f7fd fcf6 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d6a48:	4b18      	ldr	r3, [pc, #96]	; (d6aac <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d6a4a:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d6a4c:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6a4e:	4668      	mov	r0, sp
   d6a50:	f7fd fcf0 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6a54:	462c      	mov	r4, r5
}
   d6a56:	4620      	mov	r0, r4
   d6a58:	b007      	add	sp, #28
   d6a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6a5c:	4914      	ldr	r1, [pc, #80]	; (d6ab0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d6a5e:	4638      	mov	r0, r7
   d6a60:	f001 fc83 	bl	d836a <strcmp>
   d6a64:	b9e0      	cbnz	r0, d6aa0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d6a66:	2c00      	cmp	r4, #0
   d6a68:	d0f5      	beq.n	d6a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6a6a:	4629      	mov	r1, r5
   d6a6c:	4668      	mov	r0, sp
   d6a6e:	f7ff fc69 	bl	d6344 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6a72:	490d      	ldr	r1, [pc, #52]	; (d6aa8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d6a74:	2024      	movs	r0, #36	; 0x24
   d6a76:	f001 fada 	bl	d802e <_ZnwjRKSt9nothrow_t>
   d6a7a:	4605      	mov	r5, r0
   d6a7c:	2800      	cmp	r0, #0
   d6a7e:	d0e6      	beq.n	d6a4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6a80:	4669      	mov	r1, sp
   d6a82:	a803      	add	r0, sp, #12
   d6a84:	f7fd fd17 	bl	d44b6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6a88:	aa03      	add	r2, sp, #12
   d6a8a:	4631      	mov	r1, r6
   d6a8c:	4628      	mov	r0, r5
   d6a8e:	f7ff ffa1 	bl	d69d4 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6a92:	a803      	add	r0, sp, #12
   d6a94:	f7fd fcce 	bl	d4434 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6a98:	4b06      	ldr	r3, [pc, #24]	; (d6ab4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d6a9a:	602b      	str	r3, [r5, #0]
   d6a9c:	622c      	str	r4, [r5, #32]
}
   d6a9e:	e7d6      	b.n	d6a4e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d6aa0:	2400      	movs	r4, #0
   d6aa2:	e7d8      	b.n	d6a56 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d6aa4:	000d8708 	.word	0x000d8708
   d6aa8:	000d8981 	.word	0x000d8981
   d6aac:	000d87a0 	.word	0x000d87a0
   d6ab0:	000d870c 	.word	0x000d870c
   d6ab4:	000d8788 	.word	0x000d8788

000d6ab8 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d6ab8:	4b01      	ldr	r3, [pc, #4]	; (d6ac0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6aba:	4a02      	ldr	r2, [pc, #8]	; (d6ac4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6abc:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6abe:	4770      	bx	lr
   d6ac0:	2003e710 	.word	0x2003e710
   d6ac4:	000d871d 	.word	0x000d871d

000d6ac8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6acc:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d6ace:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6ad2:	4604      	mov	r4, r0
   d6ad4:	460e      	mov	r6, r1
   d6ad6:	4617      	mov	r7, r2
   d6ad8:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d6ada:	f000 fb31 	bl	d7140 <_Z16_fetch_usbserialv>
   d6ade:	4581      	cmp	r9, r0
   d6ae0:	d04c      	beq.n	d6b7c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d6ae2:	792b      	ldrb	r3, [r5, #4]
   d6ae4:	0719      	lsls	r1, r3, #28
   d6ae6:	d504      	bpl.n	d6af2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d6ae8:	696a      	ldr	r2, [r5, #20]
   d6aea:	4954      	ldr	r1, [pc, #336]	; (d6c3c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d6aec:	4620      	mov	r0, r4
   d6aee:	f7ff fa3a 	bl	d5f66 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d6af2:	f1b8 0f00 	cmp.w	r8, #0
   d6af6:	d00d      	beq.n	d6b14 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d6af8:	215b      	movs	r1, #91	; 0x5b
   d6afa:	4620      	mov	r0, r4
   d6afc:	f7ff fa27 	bl	d5f4e <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d6b00:	4641      	mov	r1, r8
   d6b02:	4620      	mov	r0, r4
   d6b04:	f7ff fa14 	bl	d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6b08:	6823      	ldr	r3, [r4, #0]
   d6b0a:	494d      	ldr	r1, [pc, #308]	; (d6c40 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d6b0c:	68db      	ldr	r3, [r3, #12]
   d6b0e:	2202      	movs	r2, #2
   d6b10:	4620      	mov	r0, r4
   d6b12:	4798      	blx	r3
    if (attr.has_file) {
   d6b14:	792b      	ldrb	r3, [r5, #4]
   d6b16:	07da      	lsls	r2, r3, #31
   d6b18:	d523      	bpl.n	d6b62 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d6b1a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d6b1e:	212f      	movs	r1, #47	; 0x2f
   d6b20:	4640      	mov	r0, r8
   d6b22:	f001 fc4e 	bl	d83c2 <strrchr>
    if (s1) {
   d6b26:	b108      	cbz	r0, d6b2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d6b28:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d6b2c:	4641      	mov	r1, r8
   d6b2e:	4620      	mov	r0, r4
   d6b30:	f7ff f9fe 	bl	d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6b34:	792b      	ldrb	r3, [r5, #4]
   d6b36:	079b      	lsls	r3, r3, #30
   d6b38:	d508      	bpl.n	d6b4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d6b3a:	213a      	movs	r1, #58	; 0x3a
   d6b3c:	4620      	mov	r0, r4
   d6b3e:	f7ff fa06 	bl	d5f4e <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d6b42:	68ea      	ldr	r2, [r5, #12]
   d6b44:	493f      	ldr	r1, [pc, #252]	; (d6c44 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d6b46:	4620      	mov	r0, r4
   d6b48:	f7ff fa0d 	bl	d5f66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d6b4c:	792a      	ldrb	r2, [r5, #4]
   d6b4e:	6823      	ldr	r3, [r4, #0]
   d6b50:	f012 0f04 	tst.w	r2, #4
   d6b54:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d6b56:	bf14      	ite	ne
   d6b58:	493b      	ldrne	r1, [pc, #236]	; (d6c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d6b5a:	493c      	ldreq	r1, [pc, #240]	; (d6c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d6b5c:	2202      	movs	r2, #2
            write(": ", 2);
   d6b5e:	4620      	mov	r0, r4
   d6b60:	4798      	blx	r3
    if (attr.has_function) {
   d6b62:	792b      	ldrb	r3, [r5, #4]
   d6b64:	0758      	lsls	r0, r3, #29
   d6b66:	d51d      	bpl.n	d6ba4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6b68:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d6b6a:	460b      	mov	r3, r1
   d6b6c:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d6b6e:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6b72:	b160      	cbz	r0, d6b8e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d6b74:	2820      	cmp	r0, #32
   d6b76:	d108      	bne.n	d6b8a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d6b78:	4619      	mov	r1, r3
   d6b7a:	e7f7      	b.n	d6b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d6b7c:	4834      	ldr	r0, [pc, #208]	; (d6c50 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6b7e:	f000 ff46 	bl	d7a0e <_ZN5spark12NetworkClass9listeningEv>
   d6b82:	2800      	cmp	r0, #0
   d6b84:	d0ad      	beq.n	d6ae2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d6b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d6b8a:	2828      	cmp	r0, #40	; 0x28
   d6b8c:	d1ee      	bne.n	d6b6c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d6b8e:	6823      	ldr	r3, [r4, #0]
   d6b90:	1a52      	subs	r2, r2, r1
   d6b92:	68db      	ldr	r3, [r3, #12]
   d6b94:	4620      	mov	r0, r4
   d6b96:	4798      	blx	r3
        write("(): ", 4);
   d6b98:	6823      	ldr	r3, [r4, #0]
   d6b9a:	492e      	ldr	r1, [pc, #184]	; (d6c54 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d6b9c:	68db      	ldr	r3, [r3, #12]
   d6b9e:	2204      	movs	r2, #4
   d6ba0:	4620      	mov	r0, r4
   d6ba2:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d6ba4:	2100      	movs	r1, #0
   d6ba6:	4638      	mov	r0, r7
   d6ba8:	f7fe fb78 	bl	d529c <log_level_name>
   d6bac:	4601      	mov	r1, r0
    write(s);
   d6bae:	4620      	mov	r0, r4
   d6bb0:	f7ff f9be 	bl	d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d6bb4:	6823      	ldr	r3, [r4, #0]
   d6bb6:	4925      	ldr	r1, [pc, #148]	; (d6c4c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d6bb8:	68db      	ldr	r3, [r3, #12]
   d6bba:	2202      	movs	r2, #2
   d6bbc:	4620      	mov	r0, r4
   d6bbe:	4798      	blx	r3
    if (msg) {
   d6bc0:	b11e      	cbz	r6, d6bca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d6bc2:	4631      	mov	r1, r6
   d6bc4:	4620      	mov	r0, r4
   d6bc6:	f7ff f9b3 	bl	d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d6bca:	792b      	ldrb	r3, [r5, #4]
   d6bcc:	f013 0f30 	tst.w	r3, #48	; 0x30
   d6bd0:	d02c      	beq.n	d6c2c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d6bd2:	6823      	ldr	r3, [r4, #0]
   d6bd4:	4920      	ldr	r1, [pc, #128]	; (d6c58 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6bd6:	68db      	ldr	r3, [r3, #12]
   d6bd8:	2202      	movs	r2, #2
   d6bda:	4620      	mov	r0, r4
   d6bdc:	4798      	blx	r3
        if (attr.has_code) {
   d6bde:	792b      	ldrb	r3, [r5, #4]
   d6be0:	06d9      	lsls	r1, r3, #27
   d6be2:	d50a      	bpl.n	d6bfa <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d6be4:	6823      	ldr	r3, [r4, #0]
   d6be6:	491d      	ldr	r1, [pc, #116]	; (d6c5c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6be8:	68db      	ldr	r3, [r3, #12]
   d6bea:	2207      	movs	r2, #7
   d6bec:	4620      	mov	r0, r4
   d6bee:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d6bf0:	69aa      	ldr	r2, [r5, #24]
   d6bf2:	491b      	ldr	r1, [pc, #108]	; (d6c60 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d6bf4:	4620      	mov	r0, r4
   d6bf6:	f7ff f9b6 	bl	d5f66 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d6bfa:	792b      	ldrb	r3, [r5, #4]
   d6bfc:	069a      	lsls	r2, r3, #26
   d6bfe:	d511      	bpl.n	d6c24 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d6c00:	06db      	lsls	r3, r3, #27
   d6c02:	d505      	bpl.n	d6c10 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d6c04:	6823      	ldr	r3, [r4, #0]
   d6c06:	4910      	ldr	r1, [pc, #64]	; (d6c48 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d6c08:	68db      	ldr	r3, [r3, #12]
   d6c0a:	2202      	movs	r2, #2
   d6c0c:	4620      	mov	r0, r4
   d6c0e:	4798      	blx	r3
            write("details = ", 10);
   d6c10:	6823      	ldr	r3, [r4, #0]
   d6c12:	4914      	ldr	r1, [pc, #80]	; (d6c64 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d6c14:	68db      	ldr	r3, [r3, #12]
   d6c16:	4620      	mov	r0, r4
   d6c18:	220a      	movs	r2, #10
   d6c1a:	4798      	blx	r3
            write(attr.details);
   d6c1c:	69e9      	ldr	r1, [r5, #28]
   d6c1e:	4620      	mov	r0, r4
   d6c20:	f7ff f986 	bl	d5f30 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d6c24:	215d      	movs	r1, #93	; 0x5d
   d6c26:	4620      	mov	r0, r4
   d6c28:	f7ff f991 	bl	d5f4e <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d6c2c:	6823      	ldr	r3, [r4, #0]
   d6c2e:	490e      	ldr	r1, [pc, #56]	; (d6c68 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d6c30:	68db      	ldr	r3, [r3, #12]
   d6c32:	4620      	mov	r0, r4
   d6c34:	2202      	movs	r2, #2
}
   d6c36:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d6c3a:	4718      	bx	r3
   d6c3c:	000d8721 	.word	0x000d8721
   d6c40:	000d8728 	.word	0x000d8728
   d6c44:	000d88d9 	.word	0x000d88d9
   d6c48:	000d872b 	.word	0x000d872b
   d6c4c:	000d8730 	.word	0x000d8730
   d6c50:	2003e7c0 	.word	0x2003e7c0
   d6c54:	000d872e 	.word	0x000d872e
   d6c58:	000d8733 	.word	0x000d8733
   d6c5c:	000d8736 	.word	0x000d8736
   d6c60:	000d873e 	.word	0x000d873e
   d6c64:	000d8741 	.word	0x000d8741
   d6c68:	000d874c 	.word	0x000d874c

000d6c6c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6c70:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d6c72:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6c76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6c78:	4605      	mov	r5, r0
   d6c7a:	460f      	mov	r7, r1
   d6c7c:	4690      	mov	r8, r2
   d6c7e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d6c80:	f000 fa5e 	bl	d7140 <_Z16_fetch_usbserialv>
   d6c84:	4581      	cmp	r9, r0
   d6c86:	d105      	bne.n	d6c94 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d6c88:	4849      	ldr	r0, [pc, #292]	; (d6db0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d6c8a:	f000 fec0 	bl	d7a0e <_ZN5spark12NetworkClass9listeningEv>
   d6c8e:	2800      	cmp	r0, #0
   d6c90:	f040 808a 	bne.w	d6da8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d6c94:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d6c96:	4a47      	ldr	r2, [pc, #284]	; (d6db4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d6c98:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d6c9a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d6c9e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d6ca0:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d6ca2:	f88d 9008 	strb.w	r9, [sp, #8]
   d6ca6:	f001 f86a 	bl	d7d7e <_ZN5spark10JSONWriter11beginObjectEv>
   d6caa:	4649      	mov	r1, r9
   d6cac:	4640      	mov	r0, r8
   d6cae:	f7fe faf5 	bl	d529c <log_level_name>
    json.name("l", 1).value(s);
   d6cb2:	4941      	ldr	r1, [pc, #260]	; (d6db8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d6cb4:	4680      	mov	r8, r0
   d6cb6:	2201      	movs	r2, #1
   d6cb8:	a801      	add	r0, sp, #4
   d6cba:	f001 f8e9 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6cbe:	4641      	mov	r1, r8
   d6cc0:	f7ff f928 	bl	d5f14 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d6cc4:	b13f      	cbz	r7, d6cd6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d6cc6:	493d      	ldr	r1, [pc, #244]	; (d6dbc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d6cc8:	2201      	movs	r2, #1
   d6cca:	a801      	add	r0, sp, #4
   d6ccc:	f001 f8e0 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6cd0:	4639      	mov	r1, r7
   d6cd2:	f7ff f91f 	bl	d5f14 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d6cd6:	b13e      	cbz	r6, d6ce8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d6cd8:	4939      	ldr	r1, [pc, #228]	; (d6dc0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d6cda:	2201      	movs	r2, #1
   d6cdc:	a801      	add	r0, sp, #4
   d6cde:	f001 f8d7 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6ce2:	4631      	mov	r1, r6
   d6ce4:	f7ff f916 	bl	d5f14 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d6ce8:	7923      	ldrb	r3, [r4, #4]
   d6cea:	07df      	lsls	r7, r3, #31
   d6cec:	d50e      	bpl.n	d6d0c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d6cee:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d6cf0:	212f      	movs	r1, #47	; 0x2f
   d6cf2:	4630      	mov	r0, r6
   d6cf4:	f001 fb65 	bl	d83c2 <strrchr>
    if (s1) {
   d6cf8:	b100      	cbz	r0, d6cfc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d6cfa:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d6cfc:	4931      	ldr	r1, [pc, #196]	; (d6dc4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d6cfe:	2201      	movs	r2, #1
   d6d00:	a801      	add	r0, sp, #4
   d6d02:	f001 f8c5 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d06:	4631      	mov	r1, r6
   d6d08:	f7ff f904 	bl	d5f14 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d6d0c:	7923      	ldrb	r3, [r4, #4]
   d6d0e:	079e      	lsls	r6, r3, #30
   d6d10:	d507      	bpl.n	d6d22 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6d12:	492d      	ldr	r1, [pc, #180]	; (d6dc8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d6d14:	2202      	movs	r2, #2
   d6d16:	a801      	add	r0, sp, #4
   d6d18:	f001 f8ba 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d1c:	68e1      	ldr	r1, [r4, #12]
   d6d1e:	f001 f83b 	bl	d7d98 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d6d22:	7923      	ldrb	r3, [r4, #4]
   d6d24:	0758      	lsls	r0, r3, #29
   d6d26:	d514      	bpl.n	d6d52 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6d28:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d6d2a:	4633      	mov	r3, r6
   d6d2c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d6d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6d32:	b12a      	cbz	r2, d6d40 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d6d34:	2a20      	cmp	r2, #32
   d6d36:	d101      	bne.n	d6d3c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6d38:	461e      	mov	r6, r3
   d6d3a:	e7f7      	b.n	d6d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d6d3c:	2a28      	cmp	r2, #40	; 0x28
   d6d3e:	d1f5      	bne.n	d6d2c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d6d40:	4922      	ldr	r1, [pc, #136]	; (d6dcc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6d42:	2202      	movs	r2, #2
   d6d44:	a801      	add	r0, sp, #4
   d6d46:	f001 f8a3 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d4a:	1bba      	subs	r2, r7, r6
   d6d4c:	4631      	mov	r1, r6
   d6d4e:	f001 f8af 	bl	d7eb0 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d6d52:	7923      	ldrb	r3, [r4, #4]
   d6d54:	0719      	lsls	r1, r3, #28
   d6d56:	d507      	bpl.n	d6d68 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d6d58:	491d      	ldr	r1, [pc, #116]	; (d6dd0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6d5a:	2201      	movs	r2, #1
   d6d5c:	a801      	add	r0, sp, #4
   d6d5e:	f001 f897 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d62:	6961      	ldr	r1, [r4, #20]
   d6d64:	f001 f82a 	bl	d7dbc <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d6d68:	7923      	ldrb	r3, [r4, #4]
   d6d6a:	06da      	lsls	r2, r3, #27
   d6d6c:	d508      	bpl.n	d6d80 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d6d6e:	2204      	movs	r2, #4
   d6d70:	4918      	ldr	r1, [pc, #96]	; (d6dd4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d6d72:	eb0d 0002 	add.w	r0, sp, r2
   d6d76:	f001 f88b 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d7a:	69a1      	ldr	r1, [r4, #24]
   d6d7c:	f001 f80c 	bl	d7d98 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d6d80:	7923      	ldrb	r3, [r4, #4]
   d6d82:	069b      	lsls	r3, r3, #26
   d6d84:	d507      	bpl.n	d6d96 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d6d86:	4914      	ldr	r1, [pc, #80]	; (d6dd8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6d88:	2206      	movs	r2, #6
   d6d8a:	a801      	add	r0, sp, #4
   d6d8c:	f001 f880 	bl	d7e90 <_ZN5spark10JSONWriter4nameEPKcj>
   d6d90:	69e1      	ldr	r1, [r4, #28]
   d6d92:	f7ff f8bf 	bl	d5f14 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d6d96:	a801      	add	r0, sp, #4
   d6d98:	f000 ffdb 	bl	d7d52 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d6d9c:	6a28      	ldr	r0, [r5, #32]
   d6d9e:	490f      	ldr	r1, [pc, #60]	; (d6ddc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d6da0:	6803      	ldr	r3, [r0, #0]
   d6da2:	2202      	movs	r2, #2
   d6da4:	68db      	ldr	r3, [r3, #12]
   d6da6:	4798      	blx	r3
}
   d6da8:	b005      	add	sp, #20
   d6daa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6dae:	bf00      	nop
   d6db0:	2003e7c0 	.word	0x2003e7c0
   d6db4:	000d8770 	.word	0x000d8770
   d6db8:	000d86fe 	.word	0x000d86fe
   d6dbc:	000d85a2 	.word	0x000d85a2
   d6dc0:	000d874f 	.word	0x000d874f
   d6dc4:	000d8751 	.word	0x000d8751
   d6dc8:	000d8753 	.word	0x000d8753
   d6dcc:	000d8756 	.word	0x000d8756
   d6dd0:	000d8582 	.word	0x000d8582
   d6dd4:	000d8759 	.word	0x000d8759
   d6dd8:	000d875e 	.word	0x000d875e
   d6ddc:	000d874c 	.word	0x000d874c

000d6de0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6de0:	4b02      	ldr	r3, [pc, #8]	; (d6dec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6de2:	681a      	ldr	r2, [r3, #0]
   d6de4:	4b02      	ldr	r3, [pc, #8]	; (d6df0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6de6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6de8:	4770      	bx	lr
   d6dea:	bf00      	nop
   d6dec:	2003e3c0 	.word	0x2003e3c0
   d6df0:	2003e73c 	.word	0x2003e73c

000d6df4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6df4:	2100      	movs	r1, #0
   d6df6:	f7fe ba69 	b.w	d52cc <system_delay_ms>

000d6dfa <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6dfa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6dfc:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6dfe:	4604      	mov	r4, r0
      if (_M_manager)
   d6e00:	b113      	cbz	r3, d6e08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6e02:	2203      	movs	r2, #3
   d6e04:	4601      	mov	r1, r0
   d6e06:	4798      	blx	r3
    }
   d6e08:	4620      	mov	r0, r4
   d6e0a:	bd10      	pop	{r4, pc}

000d6e0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6e0c:	b510      	push	{r4, lr}
   d6e0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6e10:	f7ff fff3 	bl	d6dfa <_ZNSt14_Function_baseD1Ev>
   d6e14:	4620      	mov	r0, r4
   d6e16:	bd10      	pop	{r4, pc}

000d6e18 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6e18:	4803      	ldr	r0, [pc, #12]	; (d6e28 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6e1a:	4a04      	ldr	r2, [pc, #16]	; (d6e2c <_GLOBAL__sub_I_RGB+0x14>)
   d6e1c:	4904      	ldr	r1, [pc, #16]	; (d6e30 <_GLOBAL__sub_I_RGB+0x18>)
   d6e1e:	2300      	movs	r3, #0
   d6e20:	6083      	str	r3, [r0, #8]
   d6e22:	f001 b8fd 	b.w	d8020 <__aeabi_atexit>
   d6e26:	bf00      	nop
   d6e28:	2003e740 	.word	0x2003e740
   d6e2c:	2003e428 	.word	0x2003e428
   d6e30:	000d6e0d 	.word	0x000d6e0d

000d6e34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6e34:	4b01      	ldr	r3, [pc, #4]	; (d6e3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6e36:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6e38:	4770      	bx	lr
   d6e3a:	bf00      	nop
   d6e3c:	2003e3c4 	.word	0x2003e3c4

000d6e40 <serialEventRun>:
{
   d6e40:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6e42:	4b0b      	ldr	r3, [pc, #44]	; (d6e70 <serialEventRun+0x30>)
   d6e44:	b143      	cbz	r3, d6e58 <serialEventRun+0x18>
   d6e46:	f000 f97b 	bl	d7140 <_Z16_fetch_usbserialv>
   d6e4a:	6803      	ldr	r3, [r0, #0]
   d6e4c:	691b      	ldr	r3, [r3, #16]
   d6e4e:	4798      	blx	r3
   d6e50:	2800      	cmp	r0, #0
   d6e52:	dd01      	ble.n	d6e58 <serialEventRun+0x18>
        serialEvent();
   d6e54:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6e58:	4b06      	ldr	r3, [pc, #24]	; (d6e74 <serialEventRun+0x34>)
   d6e5a:	b143      	cbz	r3, d6e6e <serialEventRun+0x2e>
   d6e5c:	f000 fa44 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d6e60:	6803      	ldr	r3, [r0, #0]
   d6e62:	691b      	ldr	r3, [r3, #16]
   d6e64:	4798      	blx	r3
   d6e66:	2800      	cmp	r0, #0
   d6e68:	dd01      	ble.n	d6e6e <serialEventRun+0x2e>
        serialEvent1();
   d6e6a:	f3af 8000 	nop.w
}
   d6e6e:	bd08      	pop	{r3, pc}
	...

000d6e78 <_post_loop>:
{
   d6e78:	b508      	push	{r3, lr}
	serialEventRun();
   d6e7a:	f7ff ffe1 	bl	d6e40 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6e7e:	f7fe f871 	bl	d4f64 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6e82:	4b01      	ldr	r3, [pc, #4]	; (d6e88 <_post_loop+0x10>)
   d6e84:	6018      	str	r0, [r3, #0]
}
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	2003e7d4 	.word	0x2003e7d4

000d6e8c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6e8c:	4802      	ldr	r0, [pc, #8]	; (d6e98 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6e8e:	4a03      	ldr	r2, [pc, #12]	; (d6e9c <_Z33system_initialize_user_backup_ramv+0x10>)
   d6e90:	4903      	ldr	r1, [pc, #12]	; (d6ea0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6e92:	1a12      	subs	r2, r2, r0
   d6e94:	f001 b9fe 	b.w	d8294 <memcpy>
   d6e98:	2003f400 	.word	0x2003f400
   d6e9c:	2003f404 	.word	0x2003f404
   d6ea0:	000d8ba0 	.word	0x000d8ba0

000d6ea4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ea4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ea6:	2300      	movs	r3, #0
   d6ea8:	9300      	str	r3, [sp, #0]
   d6eaa:	461a      	mov	r2, r3
   d6eac:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6eb0:	f7fe fa1e 	bl	d52f0 <system_ctrl_set_result>
}
   d6eb4:	b003      	add	sp, #12
   d6eb6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6ebc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6ebc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6ebe:	8843      	ldrh	r3, [r0, #2]
   d6ec0:	2b0a      	cmp	r3, #10
   d6ec2:	d008      	beq.n	d6ed6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6ec4:	2b50      	cmp	r3, #80	; 0x50
   d6ec6:	d10b      	bne.n	d6ee0 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6ec8:	4b09      	ldr	r3, [pc, #36]	; (d6ef0 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6eca:	681b      	ldr	r3, [r3, #0]
   d6ecc:	b14b      	cbz	r3, d6ee2 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6ece:	b003      	add	sp, #12
   d6ed0:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6ed4:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6ed6:	f7ff ffe5 	bl	d6ea4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6eda:	b003      	add	sp, #12
   d6edc:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ee0:	2300      	movs	r3, #0
   d6ee2:	9300      	str	r3, [sp, #0]
   d6ee4:	461a      	mov	r2, r3
   d6ee6:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6eea:	f7fe fa01 	bl	d52f0 <system_ctrl_set_result>
}
   d6eee:	e7f4      	b.n	d6eda <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6ef0:	2003e754 	.word	0x2003e754

000d6ef4 <module_user_init_hook>:
{
   d6ef4:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6ef6:	4c12      	ldr	r4, [pc, #72]	; (d6f40 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6ef8:	4812      	ldr	r0, [pc, #72]	; (d6f44 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6efa:	4d13      	ldr	r5, [pc, #76]	; (d6f48 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6efc:	2100      	movs	r1, #0
   d6efe:	f7fe fa93 	bl	d5428 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6f02:	6823      	ldr	r3, [r4, #0]
   d6f04:	42ab      	cmp	r3, r5
   d6f06:	4b11      	ldr	r3, [pc, #68]	; (d6f4c <module_user_init_hook+0x58>)
   d6f08:	bf0c      	ite	eq
   d6f0a:	2201      	moveq	r2, #1
   d6f0c:	2200      	movne	r2, #0
   d6f0e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6f10:	d002      	beq.n	d6f18 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6f12:	f7ff ffbb 	bl	d6e8c <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6f16:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6f18:	f7fe f814 	bl	d4f44 <HAL_RNG_GetRandomNumber>
   d6f1c:	4604      	mov	r4, r0
    srand(seed);
   d6f1e:	f001 f9e9 	bl	d82f4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6f22:	4b0b      	ldr	r3, [pc, #44]	; (d6f50 <module_user_init_hook+0x5c>)
   d6f24:	b113      	cbz	r3, d6f2c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6f26:	4620      	mov	r0, r4
   d6f28:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6f2c:	2100      	movs	r1, #0
   d6f2e:	4808      	ldr	r0, [pc, #32]	; (d6f50 <module_user_init_hook+0x5c>)
   d6f30:	f7fe fa42 	bl	d53b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6f34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6f38:	4806      	ldr	r0, [pc, #24]	; (d6f54 <module_user_init_hook+0x60>)
   d6f3a:	2100      	movs	r1, #0
   d6f3c:	f7fe b9ce 	b.w	d52dc <system_ctrl_set_app_request_handler>
   d6f40:	2003f400 	.word	0x2003f400
   d6f44:	000d6e35 	.word	0x000d6e35
   d6f48:	9a271c1e 	.word	0x9a271c1e
   d6f4c:	2003e750 	.word	0x2003e750
   d6f50:	00000000 	.word	0x00000000
   d6f54:	000d6ebd 	.word	0x000d6ebd

000d6f58 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6f58:	4770      	bx	lr

000d6f5a <_ZN9IPAddressD0Ev>:
   d6f5a:	b510      	push	{r4, lr}
   d6f5c:	2118      	movs	r1, #24
   d6f5e:	4604      	mov	r4, r0
   d6f60:	f001 f863 	bl	d802a <_ZdlPvj>
   d6f64:	4620      	mov	r0, r4
   d6f66:	bd10      	pop	{r4, pc}

000d6f68 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6f68:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6f6a:	7d03      	ldrb	r3, [r0, #20]
   d6f6c:	2b06      	cmp	r3, #6
{
   d6f6e:	b08d      	sub	sp, #52	; 0x34
   d6f70:	460e      	mov	r6, r1
   d6f72:	f100 0704 	add.w	r7, r0, #4
   d6f76:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6f7a:	d012      	beq.n	d6fa2 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6f7c:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6f80:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6f84:	220a      	movs	r2, #10
   d6f86:	4630      	mov	r0, r6
   d6f88:	f7fe ff21 	bl	d5dce <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6f8c:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6f8e:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6f90:	d019      	beq.n	d6fc6 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6f92:	2c00      	cmp	r4, #0
   d6f94:	d0f4      	beq.n	d6f80 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6f96:	212e      	movs	r1, #46	; 0x2e
   d6f98:	4630      	mov	r0, r6
   d6f9a:	f7fe ff09 	bl	d5db0 <_ZN5Print5printEc>
   d6f9e:	4404      	add	r4, r0
   d6fa0:	e7ee      	b.n	d6f80 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fa2:	232f      	movs	r3, #47	; 0x2f
   d6fa4:	466a      	mov	r2, sp
   d6fa6:	4639      	mov	r1, r7
   d6fa8:	200a      	movs	r0, #10
		buf[0] = 0;
   d6faa:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6fae:	f7fe f83d 	bl	d502c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6fb2:	4668      	mov	r0, sp
   d6fb4:	f001 f9eb 	bl	d838e <strlen>
   d6fb8:	6833      	ldr	r3, [r6, #0]
   d6fba:	4602      	mov	r2, r0
   d6fbc:	68db      	ldr	r3, [r3, #12]
   d6fbe:	4669      	mov	r1, sp
   d6fc0:	4630      	mov	r0, r6
   d6fc2:	4798      	blx	r3
   d6fc4:	4604      	mov	r4, r0
    }
    return n;
}
   d6fc6:	4620      	mov	r0, r4
   d6fc8:	b00d      	add	sp, #52	; 0x34
   d6fca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6fcc <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6fcc:	b510      	push	{r4, lr}
   d6fce:	4b05      	ldr	r3, [pc, #20]	; (d6fe4 <_ZN9IPAddressC1Ev+0x18>)
   d6fd0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6fd2:	2211      	movs	r2, #17
   d6fd4:	f840 3b04 	str.w	r3, [r0], #4
   d6fd8:	2100      	movs	r1, #0
   d6fda:	f001 f983 	bl	d82e4 <memset>
}
   d6fde:	4620      	mov	r0, r4
   d6fe0:	bd10      	pop	{r4, pc}
   d6fe2:	bf00      	nop
   d6fe4:	000d8804 	.word	0x000d8804

000d6fe8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6fe8:	4603      	mov	r3, r0
   d6fea:	4a07      	ldr	r2, [pc, #28]	; (d7008 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6fec:	b510      	push	{r4, lr}
   d6fee:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6ff2:	f101 0210 	add.w	r2, r1, #16
   d6ff6:	f851 4b04 	ldr.w	r4, [r1], #4
   d6ffa:	f843 4b04 	str.w	r4, [r3], #4
   d6ffe:	4291      	cmp	r1, r2
   d7000:	d1f9      	bne.n	d6ff6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7002:	780a      	ldrb	r2, [r1, #0]
   d7004:	701a      	strb	r2, [r3, #0]
}
   d7006:	bd10      	pop	{r4, pc}
   d7008:	000d8804 	.word	0x000d8804

000d700c <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d700c:	7d03      	ldrb	r3, [r0, #20]
   d700e:	2b04      	cmp	r3, #4
   d7010:	d104      	bne.n	d701c <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7012:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7014:	3800      	subs	r0, #0
   d7016:	bf18      	it	ne
   d7018:	2001      	movne	r0, #1
   d701a:	4770      	bx	lr
    } else if (version() == 6) {
   d701c:	2b06      	cmp	r3, #6
   d701e:	d107      	bne.n	d7030 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7020:	6843      	ldr	r3, [r0, #4]
   d7022:	b93b      	cbnz	r3, d7034 <_ZNK9IPAddresscvbEv+0x28>
   d7024:	6883      	ldr	r3, [r0, #8]
   d7026:	b92b      	cbnz	r3, d7034 <_ZNK9IPAddresscvbEv+0x28>
   d7028:	68c3      	ldr	r3, [r0, #12]
   d702a:	b91b      	cbnz	r3, d7034 <_ZNK9IPAddresscvbEv+0x28>
   d702c:	6900      	ldr	r0, [r0, #16]
   d702e:	e7f1      	b.n	d7014 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7030:	2000      	movs	r0, #0
   d7032:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7034:	2001      	movs	r0, #1
}
   d7036:	4770      	bx	lr

000d7038 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7038:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d703a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d703e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7042:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7046:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d704a:	2304      	movs	r3, #4
   d704c:	6041      	str	r1, [r0, #4]
   d704e:	7503      	strb	r3, [r0, #20]
}
   d7050:	bd10      	pop	{r4, pc}

000d7052 <_ZN9IPAddressaSEPKh>:
{
   d7052:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7054:	78cb      	ldrb	r3, [r1, #3]
   d7056:	9300      	str	r3, [sp, #0]
   d7058:	788b      	ldrb	r3, [r1, #2]
   d705a:	784a      	ldrb	r2, [r1, #1]
   d705c:	7809      	ldrb	r1, [r1, #0]
   d705e:	f7ff ffeb 	bl	d7038 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7062:	b002      	add	sp, #8
   d7064:	bd10      	pop	{r4, pc}
	...

000d7068 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* address)
   d7068:	b510      	push	{r4, lr}
   d706a:	4b03      	ldr	r3, [pc, #12]	; (d7078 <_ZN9IPAddressC1EPKh+0x10>)
   d706c:	6003      	str	r3, [r0, #0]
   d706e:	4604      	mov	r4, r0
    *this = address;
   d7070:	f7ff ffef 	bl	d7052 <_ZN9IPAddressaSEPKh>
}
   d7074:	4620      	mov	r0, r4
   d7076:	bd10      	pop	{r4, pc}
   d7078:	000d8804 	.word	0x000d8804

000d707c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d707c:	7441      	strb	r1, [r0, #17]
}
   d707e:	4770      	bx	lr

000d7080 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7080:	4770      	bx	lr

000d7082 <_ZN9USBSerial4readEv>:
{
   d7082:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7084:	2100      	movs	r1, #0
   d7086:	7c00      	ldrb	r0, [r0, #16]
   d7088:	f7fe f8d8 	bl	d523c <HAL_USB_USART_Receive_Data>
}
   d708c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7090:	bd08      	pop	{r3, pc}

000d7092 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7092:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7094:	2101      	movs	r1, #1
   d7096:	7c00      	ldrb	r0, [r0, #16]
   d7098:	f7fe f8d0 	bl	d523c <HAL_USB_USART_Receive_Data>
}
   d709c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70a0:	bd08      	pop	{r3, pc}

000d70a2 <_ZN9USBSerial17availableForWriteEv>:
{
   d70a2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d70a4:	7c00      	ldrb	r0, [r0, #16]
   d70a6:	f7fe f8c1 	bl	d522c <HAL_USB_USART_Available_Data_For_Write>
}
   d70aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70ae:	bd08      	pop	{r3, pc}

000d70b0 <_ZN9USBSerial9availableEv>:
{
   d70b0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d70b2:	7c00      	ldrb	r0, [r0, #16]
   d70b4:	f7fe f8b2 	bl	d521c <HAL_USB_USART_Available_Data>
}
   d70b8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70bc:	bd08      	pop	{r3, pc}

000d70be <_ZN9USBSerial5writeEh>:
{
   d70be:	b513      	push	{r0, r1, r4, lr}
   d70c0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d70c2:	7c00      	ldrb	r0, [r0, #16]
{
   d70c4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d70c6:	f7fe f8b1 	bl	d522c <HAL_USB_USART_Available_Data_For_Write>
   d70ca:	2800      	cmp	r0, #0
   d70cc:	9901      	ldr	r1, [sp, #4]
   d70ce:	dc01      	bgt.n	d70d4 <_ZN9USBSerial5writeEh+0x16>
   d70d0:	7c60      	ldrb	r0, [r4, #17]
   d70d2:	b120      	cbz	r0, d70de <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d70d4:	7c20      	ldrb	r0, [r4, #16]
   d70d6:	f7fe f8b9 	bl	d524c <HAL_USB_USART_Send_Data>
   d70da:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d70de:	b002      	add	sp, #8
   d70e0:	bd10      	pop	{r4, pc}

000d70e2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d70e2:	7c00      	ldrb	r0, [r0, #16]
   d70e4:	f7fe b8ba 	b.w	d525c <HAL_USB_USART_Flush_Data>

000d70e8 <_ZN9USBSerialD0Ev>:
   d70e8:	b510      	push	{r4, lr}
   d70ea:	2114      	movs	r1, #20
   d70ec:	4604      	mov	r4, r0
   d70ee:	f000 ff9c 	bl	d802a <_ZdlPvj>
   d70f2:	4620      	mov	r0, r4
   d70f4:	bd10      	pop	{r4, pc}
	...

000d70f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d70f8:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d70fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d70fe:	4604      	mov	r4, r0
   d7100:	4608      	mov	r0, r1
   d7102:	2100      	movs	r1, #0
   d7104:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7108:	4b04      	ldr	r3, [pc, #16]	; (d711c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d710a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d710c:	2301      	movs	r3, #1
  _serial = serial;
   d710e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7110:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7112:	4611      	mov	r1, r2
   d7114:	f7fe f86a 	bl	d51ec <HAL_USB_USART_Init>
}
   d7118:	4620      	mov	r0, r4
   d711a:	bd10      	pop	{r4, pc}
   d711c:	000d8818 	.word	0x000d8818

000d7120 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7120:	7c00      	ldrb	r0, [r0, #16]
   d7122:	2200      	movs	r2, #0
   d7124:	f7fe b86a 	b.w	d51fc <HAL_USB_USART_Begin>

000d7128 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d7128:	7c00      	ldrb	r0, [r0, #16]
   d712a:	f7fe b86f 	b.w	d520c <HAL_USB_USART_End>

000d712e <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d712e:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7130:	2214      	movs	r2, #20
{
   d7132:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7134:	2100      	movs	r1, #0
   d7136:	f001 f8d5 	bl	d82e4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d713a:	4620      	mov	r0, r4
   d713c:	bd10      	pop	{r4, pc}
	...

000d7140 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7140:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7142:	4c10      	ldr	r4, [pc, #64]	; (d7184 <_Z16_fetch_usbserialv+0x44>)
{
   d7144:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7146:	a803      	add	r0, sp, #12
   d7148:	f7ff fff1 	bl	d712e <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d714c:	7821      	ldrb	r1, [r4, #0]
   d714e:	f3bf 8f5b 	dmb	ish
   d7152:	f011 0101 	ands.w	r1, r1, #1
   d7156:	d111      	bne.n	d717c <_Z16_fetch_usbserialv+0x3c>
   d7158:	4620      	mov	r0, r4
   d715a:	9101      	str	r1, [sp, #4]
   d715c:	f7fc ffac 	bl	d40b8 <__cxa_guard_acquire>
   d7160:	9901      	ldr	r1, [sp, #4]
   d7162:	b158      	cbz	r0, d717c <_Z16_fetch_usbserialv+0x3c>
   d7164:	aa03      	add	r2, sp, #12
   d7166:	4808      	ldr	r0, [pc, #32]	; (d7188 <_Z16_fetch_usbserialv+0x48>)
   d7168:	f7ff ffc6 	bl	d70f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d716c:	4620      	mov	r0, r4
   d716e:	f7fc ffa8 	bl	d40c2 <__cxa_guard_release>
   d7172:	4a06      	ldr	r2, [pc, #24]	; (d718c <_Z16_fetch_usbserialv+0x4c>)
   d7174:	4906      	ldr	r1, [pc, #24]	; (d7190 <_Z16_fetch_usbserialv+0x50>)
   d7176:	4804      	ldr	r0, [pc, #16]	; (d7188 <_Z16_fetch_usbserialv+0x48>)
   d7178:	f000 ff52 	bl	d8020 <__aeabi_atexit>
	return _usbserial;
}
   d717c:	4802      	ldr	r0, [pc, #8]	; (d7188 <_Z16_fetch_usbserialv+0x48>)
   d717e:	b008      	add	sp, #32
   d7180:	bd10      	pop	{r4, pc}
   d7182:	bf00      	nop
   d7184:	2003e758 	.word	0x2003e758
   d7188:	2003e75c 	.word	0x2003e75c
   d718c:	2003e428 	.word	0x2003e428
   d7190:	000d7081 	.word	0x000d7081

000d7194 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d7194:	2200      	movs	r2, #0
   d7196:	6840      	ldr	r0, [r0, #4]
   d7198:	4611      	mov	r1, r2
   d719a:	f7fe b8d5 	b.w	d5348 <network_ready>

000d719e <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d719e:	2200      	movs	r2, #0
   d71a0:	6840      	ldr	r0, [r0, #4]
   d71a2:	4611      	mov	r1, r2
   d71a4:	f7fe b8f0 	b.w	d5388 <network_listening>

000d71a8 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d71a8:	2200      	movs	r2, #0
   d71aa:	6840      	ldr	r0, [r0, #4]
   d71ac:	4611      	mov	r1, r2
   d71ae:	f7fe b8fb 	b.w	d53a8 <network_get_listen_timeout>

000d71b2 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d71b2:	6840      	ldr	r0, [r0, #4]
   d71b4:	2200      	movs	r2, #0
   d71b6:	f7fe b8ef 	b.w	d5398 <network_set_listen_timeout>

000d71ba <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d71ba:	6840      	ldr	r0, [r0, #4]
   d71bc:	2200      	movs	r2, #0
   d71be:	f081 0101 	eor.w	r1, r1, #1
   d71c2:	f7fe b8d9 	b.w	d5378 <network_listen>

000d71c6 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d71c6:	2300      	movs	r3, #0
   d71c8:	6840      	ldr	r0, [r0, #4]
   d71ca:	461a      	mov	r2, r3
   d71cc:	4619      	mov	r1, r3
   d71ce:	f7fe b8cb 	b.w	d5368 <network_off>

000d71d2 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d71d2:	2300      	movs	r3, #0
   d71d4:	6840      	ldr	r0, [r0, #4]
   d71d6:	461a      	mov	r2, r3
   d71d8:	4619      	mov	r1, r3
   d71da:	f7fe b8bd 	b.w	d5358 <network_on>

000d71de <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d71de:	2200      	movs	r2, #0
   d71e0:	6840      	ldr	r0, [r0, #4]
   d71e2:	4611      	mov	r1, r2
   d71e4:	f7fe b8a0 	b.w	d5328 <network_connecting>

000d71e8 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d71e8:	6840      	ldr	r0, [r0, #4]
   d71ea:	2200      	movs	r2, #0
   d71ec:	2102      	movs	r1, #2
   d71ee:	f7fe b8a3 	b.w	d5338 <network_disconnect>

000d71f2 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d71f2:	2300      	movs	r3, #0
   d71f4:	6840      	ldr	r0, [r0, #4]
   d71f6:	461a      	mov	r2, r3
   d71f8:	f7fe b88e 	b.w	d5318 <network_connect>

000d71fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d71fc:	4b08      	ldr	r3, [pc, #32]	; (d7220 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d71fe:	b510      	push	{r4, lr}
   d7200:	2428      	movs	r4, #40	; 0x28
   d7202:	4622      	mov	r2, r4
   d7204:	4618      	mov	r0, r3
   d7206:	2100      	movs	r1, #0
   d7208:	f001 f86c 	bl	d82e4 <memset>
   d720c:	4b05      	ldr	r3, [pc, #20]	; (d7224 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d720e:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7210:	f04f 32ff 	mov.w	r2, #4294967295
   d7214:	6042      	str	r2, [r0, #4]
   d7216:	2204      	movs	r2, #4
   d7218:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d721a:	4a03      	ldr	r2, [pc, #12]	; (d7228 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d721c:	601a      	str	r2, [r3, #0]
   d721e:	bd10      	pop	{r4, pc}
   d7220:	2003e778 	.word	0x2003e778
   d7224:	2003e770 	.word	0x2003e770
   d7228:	000d8848 	.word	0x000d8848

000d722c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d722c:	4770      	bx	lr

000d722e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d722e:	7441      	strb	r1, [r0, #17]
}
   d7230:	4770      	bx	lr

000d7232 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7232:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7234:	7c00      	ldrb	r0, [r0, #16]
   d7236:	f7fd ff51 	bl	d50dc <hal_usart_available_data_for_write>
}
   d723a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d723e:	bd08      	pop	{r3, pc}

000d7240 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7240:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7242:	7c00      	ldrb	r0, [r0, #16]
   d7244:	f7fd ff22 	bl	d508c <hal_usart_available>
}
   d7248:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d724c:	bd08      	pop	{r3, pc}

000d724e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d724e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7250:	7c00      	ldrb	r0, [r0, #16]
   d7252:	f7fd ff2b 	bl	d50ac <hal_usart_peek>
}
   d7256:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d725a:	bd08      	pop	{r3, pc}

000d725c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d725c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d725e:	7c00      	ldrb	r0, [r0, #16]
   d7260:	f7fd ff1c 	bl	d509c <hal_usart_read>
}
   d7264:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7268:	bd08      	pop	{r3, pc}

000d726a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d726a:	7c00      	ldrb	r0, [r0, #16]
   d726c:	f7fd bf26 	b.w	d50bc <hal_usart_flush>

000d7270 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7270:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7272:	7c45      	ldrb	r5, [r0, #17]
{
   d7274:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7276:	b12d      	cbz	r5, d7284 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7278:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d727a:	b003      	add	sp, #12
   d727c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7280:	f7fd befc 	b.w	d507c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7284:	7c00      	ldrb	r0, [r0, #16]
   d7286:	9101      	str	r1, [sp, #4]
   d7288:	f7fd ff28 	bl	d50dc <hal_usart_available_data_for_write>
   d728c:	2800      	cmp	r0, #0
   d728e:	9901      	ldr	r1, [sp, #4]
   d7290:	dcf2      	bgt.n	d7278 <_ZN11USARTSerial5writeEh+0x8>
}
   d7292:	4628      	mov	r0, r5
   d7294:	b003      	add	sp, #12
   d7296:	bd30      	pop	{r4, r5, pc}

000d7298 <_ZN11USARTSerialD0Ev>:
   d7298:	b510      	push	{r4, lr}
   d729a:	2114      	movs	r1, #20
   d729c:	4604      	mov	r4, r0
   d729e:	f000 fec4 	bl	d802a <_ZdlPvj>
   d72a2:	4620      	mov	r0, r4
   d72a4:	bd10      	pop	{r4, pc}
	...

000d72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d72a8:	b510      	push	{r4, lr}
   d72aa:	f04f 0c00 	mov.w	ip, #0
   d72ae:	4604      	mov	r4, r0
   d72b0:	4608      	mov	r0, r1
   d72b2:	4611      	mov	r1, r2
   d72b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d72b8:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d72bc:	4a04      	ldr	r2, [pc, #16]	; (d72d0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d72be:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d72c0:	2201      	movs	r2, #1
  _serial = serial;
   d72c2:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d72c4:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d72c6:	461a      	mov	r2, r3
   d72c8:	f7fd fec8 	bl	d505c <hal_usart_init>
}
   d72cc:	4620      	mov	r0, r4
   d72ce:	bd10      	pop	{r4, pc}
   d72d0:	000d887c 	.word	0x000d887c

000d72d4 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d72d4:	7c00      	ldrb	r0, [r0, #16]
   d72d6:	2300      	movs	r3, #0
   d72d8:	f7fd bf08 	b.w	d50ec <hal_usart_begin_config>

000d72dc <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d72dc:	2200      	movs	r2, #0
   d72de:	f7ff bff9 	b.w	d72d4 <_ZN11USARTSerial5beginEmm>

000d72e2 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d72e2:	7c00      	ldrb	r0, [r0, #16]
   d72e4:	f7fd bec2 	b.w	d506c <hal_usart_end>

000d72e8 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d72e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d72ea:	4c1b      	ldr	r4, [pc, #108]	; (d7358 <_Z22__fetch_global_Serial1v+0x70>)
   d72ec:	6826      	ldr	r6, [r4, #0]
   d72ee:	b94e      	cbnz	r6, d7304 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new hal_usart_ring_buffer_t();
   d72f0:	2084      	movs	r0, #132	; 0x84
   d72f2:	f7fc fece 	bl	d4092 <_Znwj>
   d72f6:	4605      	mov	r5, r0
   d72f8:	b118      	cbz	r0, d7302 <_Z22__fetch_global_Serial1v+0x1a>
   d72fa:	2284      	movs	r2, #132	; 0x84
   d72fc:	4631      	mov	r1, r6
   d72fe:	f000 fff1 	bl	d82e4 <memset>
   d7302:	6025      	str	r5, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d7304:	4d15      	ldr	r5, [pc, #84]	; (d735c <_Z22__fetch_global_Serial1v+0x74>)
   d7306:	682f      	ldr	r7, [r5, #0]
   d7308:	b94f      	cbnz	r7, d731e <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
   d730a:	2084      	movs	r0, #132	; 0x84
   d730c:	f7fc fec1 	bl	d4092 <_Znwj>
   d7310:	4606      	mov	r6, r0
   d7312:	b118      	cbz	r0, d731c <_Z22__fetch_global_Serial1v+0x34>
   d7314:	2284      	movs	r2, #132	; 0x84
   d7316:	4639      	mov	r1, r7
   d7318:	f000 ffe4 	bl	d82e4 <memset>
   d731c:	602e      	str	r6, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d731e:	4e10      	ldr	r6, [pc, #64]	; (d7360 <_Z22__fetch_global_Serial1v+0x78>)
   d7320:	7831      	ldrb	r1, [r6, #0]
   d7322:	f3bf 8f5b 	dmb	ish
   d7326:	f011 0101 	ands.w	r1, r1, #1
   d732a:	d112      	bne.n	d7352 <_Z22__fetch_global_Serial1v+0x6a>
   d732c:	4630      	mov	r0, r6
   d732e:	9101      	str	r1, [sp, #4]
   d7330:	f7fc fec2 	bl	d40b8 <__cxa_guard_acquire>
   d7334:	9901      	ldr	r1, [sp, #4]
   d7336:	b160      	cbz	r0, d7352 <_Z22__fetch_global_Serial1v+0x6a>
   d7338:	6822      	ldr	r2, [r4, #0]
   d733a:	682b      	ldr	r3, [r5, #0]
   d733c:	4809      	ldr	r0, [pc, #36]	; (d7364 <_Z22__fetch_global_Serial1v+0x7c>)
   d733e:	f7ff ffb3 	bl	d72a8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7342:	4630      	mov	r0, r6
   d7344:	f7fc febd 	bl	d40c2 <__cxa_guard_release>
   d7348:	4a07      	ldr	r2, [pc, #28]	; (d7368 <_Z22__fetch_global_Serial1v+0x80>)
   d734a:	4908      	ldr	r1, [pc, #32]	; (d736c <_Z22__fetch_global_Serial1v+0x84>)
   d734c:	4805      	ldr	r0, [pc, #20]	; (d7364 <_Z22__fetch_global_Serial1v+0x7c>)
   d734e:	f000 fe67 	bl	d8020 <__aeabi_atexit>
#endif
	return serial1;
}
   d7352:	4804      	ldr	r0, [pc, #16]	; (d7364 <_Z22__fetch_global_Serial1v+0x7c>)
   d7354:	b003      	add	sp, #12
   d7356:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7358:	2003e7a4 	.word	0x2003e7a4
   d735c:	2003e7a8 	.word	0x2003e7a8
   d7360:	2003e7a0 	.word	0x2003e7a0
   d7364:	2003e7ac 	.word	0x2003e7ac
   d7368:	2003e428 	.word	0x2003e428
   d736c:	000d722d 	.word	0x000d722d

000d7370 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7370:	4770      	bx	lr

000d7372 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7374:	4606      	mov	r6, r0
   d7376:	4615      	mov	r5, r2
   d7378:	460c      	mov	r4, r1
   d737a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d737c:	42bc      	cmp	r4, r7
   d737e:	d006      	beq.n	d738e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7380:	6833      	ldr	r3, [r6, #0]
   d7382:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7386:	689b      	ldr	r3, [r3, #8]
   d7388:	4630      	mov	r0, r6
   d738a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d738c:	e7f6      	b.n	d737c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d738e:	4628      	mov	r0, r5
   d7390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7392 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7392:	7c00      	ldrb	r0, [r0, #16]
   d7394:	2200      	movs	r2, #0
   d7396:	f7fd beb1 	b.w	d50fc <hal_i2c_write>

000d739a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d739a:	7c00      	ldrb	r0, [r0, #16]
   d739c:	2100      	movs	r1, #0
   d739e:	f7fd beb5 	b.w	d510c <hal_i2c_available>

000d73a2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d73a2:	7c00      	ldrb	r0, [r0, #16]
   d73a4:	2100      	movs	r1, #0
   d73a6:	f7fd beb9 	b.w	d511c <hal_i2c_read>

000d73aa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d73aa:	7c00      	ldrb	r0, [r0, #16]
   d73ac:	2100      	movs	r1, #0
   d73ae:	f7fd bebd 	b.w	d512c <hal_i2c_peek>

000d73b2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d73b2:	7c00      	ldrb	r0, [r0, #16]
   d73b4:	2100      	movs	r1, #0
   d73b6:	f7fd bec1 	b.w	d513c <hal_i2c_flush>

000d73ba <_ZN7TwoWireD0Ev>:
   d73ba:	b510      	push	{r4, lr}
   d73bc:	2114      	movs	r1, #20
   d73be:	4604      	mov	r4, r0
   d73c0:	f000 fe33 	bl	d802a <_ZdlPvj>
   d73c4:	4620      	mov	r0, r4
   d73c6:	bd10      	pop	{r4, pc}

000d73c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d73c8:	b510      	push	{r4, lr}
   d73ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d73ce:	4604      	mov	r4, r0
   d73d0:	4608      	mov	r0, r1
   d73d2:	2100      	movs	r1, #0
   d73d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d73d8:	4b03      	ldr	r3, [pc, #12]	; (d73e8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d73da:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d73dc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d73de:	4611      	mov	r1, r2
   d73e0:	f7fd febc 	bl	d515c <hal_i2c_init>
}
   d73e4:	4620      	mov	r0, r4
   d73e6:	bd10      	pop	{r4, pc}
   d73e8:	000d88ac 	.word	0x000d88ac

000d73ec <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d73ec:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73ee:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d73f0:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d73f4:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d73f6:	2201      	movs	r2, #1
   d73f8:	f04f 33ff 	mov.w	r3, #4294967295
   d73fc:	f10d 0107 	add.w	r1, sp, #7
   d7400:	47a0      	blx	r4
}
   d7402:	b002      	add	sp, #8
   d7404:	bd10      	pop	{r4, pc}

000d7406 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7406:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7408:	6803      	ldr	r3, [r0, #0]
   d740a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d740c:	f04f 33ff 	mov.w	r3, #4294967295
   d7410:	46a4      	mov	ip, r4
}
   d7412:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7416:	4760      	bx	ip

000d7418 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7418:	b513      	push	{r0, r1, r4, lr}
   d741a:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d741c:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d741e:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7422:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7424:	f10d 0107 	add.w	r1, sp, #7
   d7428:	2201      	movs	r2, #1
   d742a:	47a0      	blx	r4
}
   d742c:	b002      	add	sp, #8
   d742e:	bd10      	pop	{r4, pc}

000d7430 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7430:	4770      	bx	lr

000d7432 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7432:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7434:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7436:	681a      	ldr	r2, [r3, #0]
   d7438:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d743a:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d743c:	da10      	bge.n	d7460 <_ZN9TCPClient9connectedEv+0x2e>
   d743e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7442:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7446:	429a      	cmp	r2, r3
   d7448:	d10a      	bne.n	d7460 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d744a:	6803      	ldr	r3, [r0, #0]
   d744c:	691b      	ldr	r3, [r3, #16]
   d744e:	4798      	blx	r3
        if (!rv) {
   d7450:	4604      	mov	r4, r0
   d7452:	b928      	cbnz	r0, d7460 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7454:	682b      	ldr	r3, [r5, #0]
   d7456:	4628      	mov	r0, r5
   d7458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d745a:	4798      	blx	r3
        rv = available();
   d745c:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d745e:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7460:	2001      	movs	r0, #1
   d7462:	e7fc      	b.n	d745e <_ZN9TCPClient9connectedEv+0x2c>

000d7464 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7464:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7466:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7468:	43c0      	mvns	r0, r0
   d746a:	0fc0      	lsrs	r0, r0, #31
   d746c:	4770      	bx	lr

000d746e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d746e:	4770      	bx	lr

000d7470 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7470:	4b06      	ldr	r3, [pc, #24]	; (d748c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7472:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7474:	b510      	push	{r4, lr}
   d7476:	f100 040c 	add.w	r4, r0, #12
	    ||
   d747a:	d005      	beq.n	d7488 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d747c:	4608      	mov	r0, r1
   d747e:	f000 fddb 	bl	d8038 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7482:	2800      	cmp	r0, #0
	return nullptr;
   d7484:	bf08      	it	eq
   d7486:	2400      	moveq	r4, #0
      }
   d7488:	4620      	mov	r0, r4
   d748a:	bd10      	pop	{r4, pc}
   d748c:	000d86ec 	.word	0x000d86ec

000d7490 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7490:	b510      	push	{r4, lr}
   d7492:	21ac      	movs	r1, #172	; 0xac
   d7494:	4604      	mov	r4, r0
   d7496:	f000 fdc8 	bl	d802a <_ZdlPvj>
   d749a:	4620      	mov	r0, r4
   d749c:	bd10      	pop	{r4, pc}

000d749e <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d749e:	f7fc bdfc 	b.w	d409a <_ZdlPv>

000d74a2 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d74a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d74a6:	f04f 0800 	mov.w	r8, #0
   d74aa:	b086      	sub	sp, #24
   d74ac:	461d      	mov	r5, r3
   d74ae:	f8c0 8004 	str.w	r8, [r0, #4]
   d74b2:	4604      	mov	r4, r0
   d74b4:	460e      	mov	r6, r1
   d74b6:	4617      	mov	r7, r2
    struct timeval tv = {};
   d74b8:	4641      	mov	r1, r8
   d74ba:	2210      	movs	r2, #16
   d74bc:	a802      	add	r0, sp, #8
   d74be:	f000 ff11 	bl	d82e4 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d74c2:	1c6b      	adds	r3, r5, #1
   d74c4:	d009      	beq.n	d74da <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d74c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d74ca:	fbb5 f3f0 	udiv	r3, r5, r0
   d74ce:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d74d2:	fb00 5313 	mls	r3, r0, r3, r5
   d74d6:	4358      	muls	r0, r3
   d74d8:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d74da:	6960      	ldr	r0, [r4, #20]
   d74dc:	2310      	movs	r3, #16
   d74de:	9300      	str	r3, [sp, #0]
   d74e0:	6800      	ldr	r0, [r0, #0]
   d74e2:	ab02      	add	r3, sp, #8
   d74e4:	f241 0205 	movw	r2, #4101	; 0x1005
   d74e8:	f640 71ff 	movw	r1, #4095	; 0xfff
   d74ec:	f7fd fe3e 	bl	d516c <sock_setsockopt>
    if (ret < 0) {
   d74f0:	2800      	cmp	r0, #0
   d74f2:	da07      	bge.n	d7504 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d74f4:	f7fd ff90 	bl	d5418 <__errno>
   d74f8:	6803      	ldr	r3, [r0, #0]
   d74fa:	6063      	str	r3, [r4, #4]
        return 0;
   d74fc:	2000      	movs	r0, #0
}
   d74fe:	b006      	add	sp, #24
   d7500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7504:	6960      	ldr	r0, [r4, #20]
   d7506:	2300      	movs	r3, #0
   d7508:	6800      	ldr	r0, [r0, #0]
   d750a:	463a      	mov	r2, r7
   d750c:	4631      	mov	r1, r6
   d750e:	f7fd fe4d 	bl	d51ac <sock_send>
    if (ret < 0) {
   d7512:	1e03      	subs	r3, r0, #0
   d7514:	dbee      	blt.n	d74f4 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7516:	4618      	mov	r0, r3
   d7518:	e7f1      	b.n	d74fe <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d751c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d751c:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d751e:	6984      	ldr	r4, [r0, #24]
   d7520:	4b0a      	ldr	r3, [pc, #40]	; (d754c <_ZN9TCPClientD1Ev+0x30>)
   d7522:	6003      	str	r3, [r0, #0]
   d7524:	4605      	mov	r5, r0
   d7526:	b17c      	cbz	r4, d7548 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7528:	6863      	ldr	r3, [r4, #4]
   d752a:	3b01      	subs	r3, #1
   d752c:	6063      	str	r3, [r4, #4]
   d752e:	b95b      	cbnz	r3, d7548 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7530:	6823      	ldr	r3, [r4, #0]
   d7532:	4620      	mov	r0, r4
   d7534:	689b      	ldr	r3, [r3, #8]
   d7536:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7538:	68a3      	ldr	r3, [r4, #8]
   d753a:	3b01      	subs	r3, #1
   d753c:	60a3      	str	r3, [r4, #8]
   d753e:	b91b      	cbnz	r3, d7548 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7540:	6823      	ldr	r3, [r4, #0]
   d7542:	4620      	mov	r0, r4
   d7544:	68db      	ldr	r3, [r3, #12]
   d7546:	4798      	blx	r3
   d7548:	4628      	mov	r0, r5
   d754a:	bd38      	pop	{r3, r4, r5, pc}
   d754c:	000d8900 	.word	0x000d8900

000d7550 <_ZN9TCPClientD0Ev>:
   d7550:	b510      	push	{r4, lr}
   d7552:	4604      	mov	r4, r0
   d7554:	f7ff ffe2 	bl	d751c <_ZN9TCPClientD1Ev>
   d7558:	4620      	mov	r0, r4
   d755a:	211c      	movs	r1, #28
   d755c:	f000 fd65 	bl	d802a <_ZdlPvj>
   d7560:	4620      	mov	r0, r4
   d7562:	bd10      	pop	{r4, pc}

000d7564 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7564:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7566:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7568:	4b05      	ldr	r3, [pc, #20]	; (d7580 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d756a:	4604      	mov	r4, r0
   d756c:	358c      	adds	r5, #140	; 0x8c
   d756e:	f844 3b04 	str.w	r3, [r4], #4
   d7572:	4606      	mov	r6, r0
   d7574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7578:	682b      	ldr	r3, [r5, #0]
   d757a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d757c:	4630      	mov	r0, r6
   d757e:	bd70      	pop	{r4, r5, r6, pc}
   d7580:	000d8804 	.word	0x000d8804

000d7584 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7584:	b510      	push	{r4, lr}
   d7586:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7588:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d758c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7590:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7592:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7594:	d005      	beq.n	d75a2 <_ZN9TCPClient4peekEv+0x1e>
   d7596:	6963      	ldr	r3, [r4, #20]
   d7598:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d759c:	4413      	add	r3, r2
   d759e:	7918      	ldrb	r0, [r3, #4]
}
   d75a0:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d75a2:	6803      	ldr	r3, [r0, #0]
   d75a4:	691b      	ldr	r3, [r3, #16]
   d75a6:	4798      	blx	r3
   d75a8:	2800      	cmp	r0, #0
   d75aa:	d1f4      	bne.n	d7596 <_ZN9TCPClient4peekEv+0x12>
   d75ac:	f04f 30ff 	mov.w	r0, #4294967295
   d75b0:	e7f6      	b.n	d75a0 <_ZN9TCPClient4peekEv+0x1c>

000d75b2 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d75b2:	b510      	push	{r4, lr}
   d75b4:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d75b6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d75ba:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d75be:	429a      	cmp	r2, r3
int TCPClient::read() {
   d75c0:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d75c2:	d008      	beq.n	d75d6 <_ZN9TCPClient4readEv+0x24>
   d75c4:	6963      	ldr	r3, [r4, #20]
   d75c6:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d75ca:	1c51      	adds	r1, r2, #1
   d75cc:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d75d0:	4413      	add	r3, r2
   d75d2:	7918      	ldrb	r0, [r3, #4]
}
   d75d4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d75d6:	6803      	ldr	r3, [r0, #0]
   d75d8:	691b      	ldr	r3, [r3, #16]
   d75da:	4798      	blx	r3
   d75dc:	2800      	cmp	r0, #0
   d75de:	d1f1      	bne.n	d75c4 <_ZN9TCPClient4readEv+0x12>
   d75e0:	f04f 30ff 	mov.w	r0, #4294967295
   d75e4:	e7f6      	b.n	d75d4 <_ZN9TCPClient4readEv+0x22>

000d75e6 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d75e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75e8:	6943      	ldr	r3, [r0, #20]
   d75ea:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d75ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d75f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d75f4:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d75f6:	4605      	mov	r5, r0
   d75f8:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d75fa:	d016      	beq.n	d762a <_ZN9TCPClient4readEPhj+0x44>
   d75fc:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d75fe:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7602:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7606:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7608:	42bc      	cmp	r4, r7
   d760a:	bf28      	it	cs
   d760c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d760e:	3304      	adds	r3, #4
   d7610:	4622      	mov	r2, r4
   d7612:	4419      	add	r1, r3
   d7614:	4630      	mov	r0, r6
   d7616:	f000 fe3d 	bl	d8294 <memcpy>
   d761a:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d761c:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7620:	4423      	add	r3, r4
   d7622:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d7626:	4620      	mov	r0, r4
   d7628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d762a:	6803      	ldr	r3, [r0, #0]
   d762c:	691b      	ldr	r3, [r3, #16]
   d762e:	4798      	blx	r3
   d7630:	2800      	cmp	r0, #0
   d7632:	d1e3      	bne.n	d75fc <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7634:	f04f 34ff 	mov.w	r4, #4294967295
   d7638:	e7f5      	b.n	d7626 <_ZN9TCPClient4readEPhj+0x40>
	...

000d763c <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d763c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7640:	4698      	mov	r8, r3
    stop();
   d7642:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7644:	b093      	sub	sp, #76	; 0x4c
   d7646:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d7648:	2400      	movs	r4, #0
    stop();
   d764a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d764c:	4606      	mov	r6, r0
   d764e:	4617      	mov	r7, r2
    stop();
   d7650:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7652:	4628      	mov	r0, r5
   d7654:	466b      	mov	r3, sp
   d7656:	4622      	mov	r2, r4
   d7658:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d765a:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d765c:	f7fd fc4a 	bl	d4ef4 <netdb_getaddrinfo>
   d7660:	4605      	mov	r5, r0
   d7662:	2800      	cmp	r0, #0
   d7664:	d163      	bne.n	d772e <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d7666:	9b00      	ldr	r3, [sp, #0]
   d7668:	2b00      	cmp	r3, #0
   d766a:	d04b      	beq.n	d7704 <_ZN9TCPClient7connectEPKctm+0xc8>
   d766c:	695b      	ldr	r3, [r3, #20]
   d766e:	2b00      	cmp	r3, #0
   d7670:	d048      	beq.n	d7704 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7672:	a806      	add	r0, sp, #24
   d7674:	f7ff fcaa 	bl	d6fcc <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7678:	9b00      	ldr	r3, [sp, #0]
   d767a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d767c:	7863      	ldrb	r3, [r4, #1]
   d767e:	2b02      	cmp	r3, #2
   d7680:	d104      	bne.n	d768c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7682:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7684:	a806      	add	r0, sp, #24
   d7686:	f7ff fce4 	bl	d7052 <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d768a:	e026      	b.n	d76da <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d768c:	2b0a      	cmp	r3, #10
   d768e:	d124      	bne.n	d76da <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7690:	2211      	movs	r2, #17
   d7692:	4629      	mov	r1, r5
   d7694:	a801      	add	r0, sp, #4
   d7696:	f000 fe25 	bl	d82e4 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d769a:	68a3      	ldr	r3, [r4, #8]
   d769c:	2b00      	cmp	r3, #0
   d769e:	d038      	beq.n	d7712 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d76a0:	f104 0308 	add.w	r3, r4, #8
   d76a4:	f10d 0c04 	add.w	ip, sp, #4
   d76a8:	3418      	adds	r4, #24
   d76aa:	6818      	ldr	r0, [r3, #0]
   d76ac:	6859      	ldr	r1, [r3, #4]
   d76ae:	4662      	mov	r2, ip
   d76b0:	c203      	stmia	r2!, {r0, r1}
   d76b2:	3308      	adds	r3, #8
   d76b4:	42a3      	cmp	r3, r4
   d76b6:	4694      	mov	ip, r2
   d76b8:	d1f7      	bne.n	d76aa <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d76ba:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d76bc:	a901      	add	r1, sp, #4
   d76be:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d76c0:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d76c4:	f7ff fc90 	bl	d6fe8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d76c8:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d76cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d76d0:	ac07      	add	r4, sp, #28
   d76d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76d4:	f8dc 3000 	ldr.w	r3, [ip]
   d76d8:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d76da:	a806      	add	r0, sp, #24
   d76dc:	f7ff fc96 	bl	d700c <_ZNK9IPAddresscvbEv>
        if (addr) {
   d76e0:	b180      	cbz	r0, d7704 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d76e2:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d76e4:	ad07      	add	r5, sp, #28
   d76e6:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d76ea:	4b12      	ldr	r3, [pc, #72]	; (d7734 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d76ec:	930c      	str	r3, [sp, #48]	; 0x30
   d76ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d76f0:	ac0d      	add	r4, sp, #52	; 0x34
   d76f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d76f4:	682b      	ldr	r3, [r5, #0]
   d76f6:	7023      	strb	r3, [r4, #0]
   d76f8:	463a      	mov	r2, r7
   d76fa:	4643      	mov	r3, r8
   d76fc:	a90c      	add	r1, sp, #48	; 0x30
   d76fe:	4630      	mov	r0, r6
   d7700:	47c8      	blx	r9
   d7702:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7704:	9800      	ldr	r0, [sp, #0]
   d7706:	f7fd fbed 	bl	d4ee4 <netdb_freeaddrinfo>
}
   d770a:	4628      	mov	r0, r5
   d770c:	b013      	add	sp, #76	; 0x4c
   d770e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7712:	68e3      	ldr	r3, [r4, #12]
   d7714:	2b00      	cmp	r3, #0
   d7716:	d1c3      	bne.n	d76a0 <_ZN9TCPClient7connectEPKctm+0x64>
   d7718:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d771c:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7720:	f7fd fc8c 	bl	d503c <inet_htonl>
   d7724:	4581      	cmp	r9, r0
   d7726:	d1bb      	bne.n	d76a0 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d7728:	f104 0114 	add.w	r1, r4, #20
   d772c:	e7aa      	b.n	d7684 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d772e:	4625      	mov	r5, r4
   d7730:	e7e8      	b.n	d7704 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7732:	bf00      	nop
   d7734:	000d8804 	.word	0x000d8804

000d7738 <_ZN9TCPClient12flush_bufferEv>:
   d7738:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d773a:	2300      	movs	r3, #0
   d773c:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7740:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7742:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d7746:	4770      	bx	lr

000d7748 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d774c:	461f      	mov	r7, r3
    stop();
   d774e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7750:	460c      	mov	r4, r1
    stop();
   d7752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7754:	b08a      	sub	sp, #40	; 0x28
   d7756:	4605      	mov	r5, r0
   d7758:	4616      	mov	r6, r2
    stop();
   d775a:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d775c:	7d23      	ldrb	r3, [r4, #20]
   d775e:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d7762:	2b04      	cmp	r3, #4
   d7764:	bf0c      	ite	eq
   d7766:	2002      	moveq	r0, #2
   d7768:	200a      	movne	r0, #10
   d776a:	2206      	movs	r2, #6
   d776c:	2101      	movs	r1, #1
   d776e:	f7fd fd25 	bl	d51bc <sock_socket>
   d7772:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7776:	696b      	ldr	r3, [r5, #20]
   d7778:	681b      	ldr	r3, [r3, #0]
   d777a:	2b00      	cmp	r3, #0
   d777c:	da08      	bge.n	d7790 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d777e:	682b      	ldr	r3, [r5, #0]
   d7780:	4628      	mov	r0, r5
   d7782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7784:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7786:	4798      	blx	r3
}
   d7788:	4620      	mov	r0, r4
   d778a:	b00a      	add	sp, #40	; 0x28
   d778c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7790:	4628      	mov	r0, r5
   d7792:	f7ff ffd1 	bl	d7738 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7796:	b1b7      	cbz	r7, d77c6 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7798:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d779a:	a903      	add	r1, sp, #12
   d779c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d779e:	9303      	str	r3, [sp, #12]
   d77a0:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d77a4:	f7fd fbc6 	bl	d4f34 <if_index_to_name>
   d77a8:	2800      	cmp	r0, #0
   d77aa:	d1e8      	bne.n	d777e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d77ac:	6968      	ldr	r0, [r5, #20]
   d77ae:	2306      	movs	r3, #6
   d77b0:	9300      	str	r3, [sp, #0]
   d77b2:	6800      	ldr	r0, [r0, #0]
   d77b4:	ab03      	add	r3, sp, #12
   d77b6:	f241 020b 	movw	r2, #4107	; 0x100b
   d77ba:	f640 71ff 	movw	r1, #4095	; 0xfff
   d77be:	f7fd fcd5 	bl	d516c <sock_setsockopt>
   d77c2:	2800      	cmp	r0, #0
   d77c4:	d1db      	bne.n	d777e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d77c6:	221c      	movs	r2, #28
   d77c8:	2100      	movs	r1, #0
   d77ca:	a803      	add	r0, sp, #12
   d77cc:	f000 fd8a 	bl	d82e4 <memset>
    if (ip.version() == 4) {
   d77d0:	7d23      	ldrb	r3, [r4, #20]
   d77d2:	2b04      	cmp	r3, #4
   d77d4:	d11d      	bne.n	d7812 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d77d6:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d77da:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d77dc:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d77e0:	f7fd fc34 	bl	d504c <inet_htons>
   d77e4:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d77e8:	6860      	ldr	r0, [r4, #4]
   d77ea:	f7fd fc27 	bl	d503c <inet_htonl>
   d77ee:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d77f0:	696b      	ldr	r3, [r5, #20]
   d77f2:	221c      	movs	r2, #28
   d77f4:	6818      	ldr	r0, [r3, #0]
   d77f6:	a903      	add	r1, sp, #12
   d77f8:	f7fd fcc8 	bl	d518c <sock_connect>
   d77fc:	2800      	cmp	r0, #0
   d77fe:	d1be      	bne.n	d777e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7800:	3404      	adds	r4, #4
   d7802:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7804:	696d      	ldr	r5, [r5, #20]
   d7806:	358c      	adds	r5, #140	; 0x8c
   d7808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d780a:	6823      	ldr	r3, [r4, #0]
   d780c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d780e:	2401      	movs	r4, #1
   d7810:	e7ba      	b.n	d7788 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7812:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d7816:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d7818:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d781c:	f7fd fc16 	bl	d504c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7820:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7822:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7826:	1d23      	adds	r3, r4, #4
   d7828:	f104 0714 	add.w	r7, r4, #20
   d782c:	6818      	ldr	r0, [r3, #0]
   d782e:	6859      	ldr	r1, [r3, #4]
   d7830:	4632      	mov	r2, r6
   d7832:	c203      	stmia	r2!, {r0, r1}
   d7834:	3308      	adds	r3, #8
   d7836:	42bb      	cmp	r3, r7
   d7838:	4616      	mov	r6, r2
   d783a:	d1f7      	bne.n	d782c <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d783c:	e7d8      	b.n	d77f0 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d7840 <_ZN9TCPClient9availableEv>:
{
   d7840:	b530      	push	{r4, r5, lr}
   d7842:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7844:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d7848:	b08b      	sub	sp, #44	; 0x2c
   d784a:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d784c:	b12b      	cbz	r3, d785a <_ZN9TCPClient9availableEv+0x1a>
   d784e:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7852:	429a      	cmp	r2, r3
   d7854:	d101      	bne.n	d785a <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d7856:	f7ff ff6f 	bl	d7738 <_ZN9TCPClient12flush_bufferEv>
   d785a:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d785c:	6808      	ldr	r0, [r1, #0]
   d785e:	2800      	cmp	r0, #0
   d7860:	db18      	blt.n	d7894 <_ZN9TCPClient9availableEv+0x54>
   d7862:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d7866:	2d7f      	cmp	r5, #127	; 0x7f
   d7868:	d814      	bhi.n	d7894 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d786a:	3104      	adds	r1, #4
   d786c:	2308      	movs	r3, #8
   d786e:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7872:	4429      	add	r1, r5
   d7874:	f7fd fc92 	bl	d519c <sock_recv>
            if (ret > 0) {
   d7878:	2800      	cmp	r0, #0
   d787a:	dd13      	ble.n	d78a4 <_ZN9TCPClient9availableEv+0x64>
   d787c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d787e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7882:	b90a      	cbnz	r2, d7888 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7884:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7888:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d788a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d788e:	4410      	add	r0, r2
   d7890:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7894:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7896:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d789a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d789e:	1ac0      	subs	r0, r0, r3
   d78a0:	b00b      	add	sp, #44	; 0x2c
   d78a2:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d78a4:	f7fd fdb8 	bl	d5418 <__errno>
   d78a8:	6803      	ldr	r3, [r0, #0]
   d78aa:	2b0b      	cmp	r3, #11
   d78ac:	d0f2      	beq.n	d7894 <_ZN9TCPClient9availableEv+0x54>
   d78ae:	f7fd fdb3 	bl	d5418 <__errno>
   d78b2:	6803      	ldr	r3, [r0, #0]
   d78b4:	2b0b      	cmp	r3, #11
   d78b6:	d0ed      	beq.n	d7894 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d78b8:	2320      	movs	r3, #32
   d78ba:	2500      	movs	r5, #0
   d78bc:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d78c0:	f7fd fdaa 	bl	d5418 <__errno>
   d78c4:	6803      	ldr	r3, [r0, #0]
   d78c6:	9301      	str	r3, [sp, #4]
   d78c8:	4b08      	ldr	r3, [pc, #32]	; (d78ec <_ZN9TCPClient9availableEv+0xac>)
   d78ca:	4909      	ldr	r1, [pc, #36]	; (d78f0 <_ZN9TCPClient9availableEv+0xb0>)
   d78cc:	9300      	str	r3, [sp, #0]
   d78ce:	aa02      	add	r2, sp, #8
   d78d0:	462b      	mov	r3, r5
   d78d2:	2032      	movs	r0, #50	; 0x32
   d78d4:	f7fd fcd2 	bl	d527c <log_message>
                    sock_close(d_->sock);
   d78d8:	6963      	ldr	r3, [r4, #20]
   d78da:	6818      	ldr	r0, [r3, #0]
   d78dc:	f7fd fc4e 	bl	d517c <sock_close>
   d78e0:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d78e2:	f04f 32ff 	mov.w	r2, #4294967295
   d78e6:	601a      	str	r2, [r3, #0]
   d78e8:	e7d4      	b.n	d7894 <_ZN9TCPClient9availableEv+0x54>
   d78ea:	bf00      	nop
   d78ec:	000d88cc 	.word	0x000d88cc
   d78f0:	000d8618 	.word	0x000d8618

000d78f4 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d78f4:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d78f6:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d78f8:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d78fa:	6818      	ldr	r0, [r3, #0]
   d78fc:	2800      	cmp	r0, #0
   d78fe:	db01      	blt.n	d7904 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7900:	f7fd fc3c 	bl	d517c <sock_close>
   d7904:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7906:	f04f 32ff 	mov.w	r2, #4294967295
   d790a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d790c:	6960      	ldr	r0, [r4, #20]
   d790e:	2211      	movs	r2, #17
   d7910:	2100      	movs	r1, #0
   d7912:	308c      	adds	r0, #140	; 0x8c
   d7914:	f000 fce6 	bl	d82e4 <memset>
    flush_buffer();
   d7918:	4620      	mov	r0, r4
}
   d791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d791e:	f7ff bf0b 	b.w	d7738 <_ZN9TCPClient12flush_bufferEv>

000d7922 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7922:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7924:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d7926:	4604      	mov	r4, r0
          total(0) {
   d7928:	6001      	str	r1, [r0, #0]
   d792a:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d792e:	3088      	adds	r0, #136	; 0x88
   d7930:	f7ff fb4c 	bl	d6fcc <_ZN9IPAddressC1Ev>
}
   d7934:	4620      	mov	r0, r4
   d7936:	bd10      	pop	{r4, pc}

000d7938 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d7938:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d793a:	2300      	movs	r3, #0
   d793c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7940:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7944:	4a0e      	ldr	r2, [pc, #56]	; (d7980 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d7946:	6103      	str	r3, [r0, #16]
   d7948:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d794a:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d794c:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d794e:	20ac      	movs	r0, #172	; 0xac
   d7950:	9101      	str	r1, [sp, #4]
   d7952:	f7fc fb9e 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d7956:	1e05      	subs	r5, r0, #0
   d7958:	f105 060c 	add.w	r6, r5, #12
   d795c:	d008      	beq.n	d7970 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d795e:	2301      	movs	r3, #1
   d7960:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d7964:	4b07      	ldr	r3, [pc, #28]	; (d7984 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7966:	9901      	ldr	r1, [sp, #4]
   d7968:	602b      	str	r3, [r5, #0]
   d796a:	4630      	mov	r0, r6
   d796c:	f7ff ffd9 	bl	d7922 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7970:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7972:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7976:	f7ff fedf 	bl	d7738 <_ZN9TCPClient12flush_bufferEv>
}
   d797a:	b002      	add	sp, #8
   d797c:	bd70      	pop	{r4, r5, r6, pc}
   d797e:	bf00      	nop
   d7980:	000d8900 	.word	0x000d8900
   d7984:	000d88e4 	.word	0x000d88e4

000d7988 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7988:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d798a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d798e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7990:	f7ff ffd2 	bl	d7938 <_ZN9TCPClientC1Ei>
}
   d7994:	4620      	mov	r0, r4
   d7996:	bd10      	pop	{r4, pc}

000d7998 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7998:	b510      	push	{r4, lr}
   d799a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d799c:	6800      	ldr	r0, [r0, #0]
   d799e:	2800      	cmp	r0, #0
   d79a0:	db01      	blt.n	d79a6 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d79a2:	f7fd fbeb 	bl	d517c <sock_close>
    }
}
   d79a6:	4620      	mov	r0, r4
   d79a8:	bd10      	pop	{r4, pc}

000d79aa <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d79aa:	300c      	adds	r0, #12
   d79ac:	f7ff bff4 	b.w	d7998 <_ZN9TCPClient4DataD1Ev>

000d79b0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d79b0:	2300      	movs	r3, #0
   d79b2:	6840      	ldr	r0, [r0, #4]
   d79b4:	461a      	mov	r2, r3
   d79b6:	f7fd bcaf 	b.w	d5318 <network_connect>

000d79ba <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d79ba:	6840      	ldr	r0, [r0, #4]
   d79bc:	2200      	movs	r2, #0
   d79be:	2102      	movs	r1, #2
   d79c0:	f7fd bcba 	b.w	d5338 <network_disconnect>

000d79c4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d79c4:	2200      	movs	r2, #0
   d79c6:	6840      	ldr	r0, [r0, #4]
   d79c8:	4611      	mov	r1, r2
   d79ca:	f7fd bcad 	b.w	d5328 <network_connecting>

000d79ce <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d79ce:	2200      	movs	r2, #0
   d79d0:	6840      	ldr	r0, [r0, #4]
   d79d2:	4611      	mov	r1, r2
   d79d4:	f7fd bcb8 	b.w	d5348 <network_ready>

000d79d8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d79d8:	2300      	movs	r3, #0
   d79da:	6840      	ldr	r0, [r0, #4]
   d79dc:	461a      	mov	r2, r3
   d79de:	4619      	mov	r1, r3
   d79e0:	f7fd bcba 	b.w	d5358 <network_on>

000d79e4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d79e4:	2300      	movs	r3, #0
   d79e6:	6840      	ldr	r0, [r0, #4]
   d79e8:	461a      	mov	r2, r3
   d79ea:	4619      	mov	r1, r3
   d79ec:	f7fd bcbc 	b.w	d5368 <network_off>

000d79f0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d79f0:	6840      	ldr	r0, [r0, #4]
   d79f2:	2200      	movs	r2, #0
   d79f4:	f081 0101 	eor.w	r1, r1, #1
   d79f8:	f7fd bcbe 	b.w	d5378 <network_listen>

000d79fc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d79fc:	6840      	ldr	r0, [r0, #4]
   d79fe:	2200      	movs	r2, #0
   d7a00:	f7fd bcca 	b.w	d5398 <network_set_listen_timeout>

000d7a04 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7a04:	2200      	movs	r2, #0
   d7a06:	6840      	ldr	r0, [r0, #4]
   d7a08:	4611      	mov	r1, r2
   d7a0a:	f7fd bccd 	b.w	d53a8 <network_get_listen_timeout>

000d7a0e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7a0e:	2200      	movs	r2, #0
   d7a10:	6840      	ldr	r0, [r0, #4]
   d7a12:	4611      	mov	r1, r2
   d7a14:	f7fd bcb8 	b.w	d5388 <network_listening>

000d7a18 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7a1c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7a1e:	b095      	sub	sp, #84	; 0x54
   d7a20:	4616      	mov	r6, r2
   d7a22:	460d      	mov	r5, r1
   d7a24:	4607      	mov	r7, r0
    IPAddress addr;
   d7a26:	f7ff fad1 	bl	d6fcc <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7a2a:	4621      	mov	r1, r4
   d7a2c:	2218      	movs	r2, #24
   d7a2e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7a30:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7a32:	f000 fc57 	bl	d82e4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7a36:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7a38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7a3c:	4621      	mov	r1, r4
   d7a3e:	466b      	mov	r3, sp
   d7a40:	aa0c      	add	r2, sp, #48	; 0x30
   d7a42:	4630      	mov	r0, r6
   d7a44:	f7fd fa56 	bl	d4ef4 <netdb_getaddrinfo>
    if (!r) {
   d7a48:	4604      	mov	r4, r0
   d7a4a:	2800      	cmp	r0, #0
   d7a4c:	d146      	bne.n	d7adc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a4e:	4602      	mov	r2, r0
   d7a50:	2101      	movs	r1, #1
   d7a52:	6868      	ldr	r0, [r5, #4]
   d7a54:	f7fd fc78 	bl	d5348 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a58:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7a5a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a5c:	4622      	mov	r2, r4
   d7a5e:	6868      	ldr	r0, [r5, #4]
   d7a60:	f7fd fc72 	bl	d5348 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a64:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7a66:	4681      	mov	r9, r0
        bool ok = false;
   d7a68:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a6a:	2e00      	cmp	r6, #0
   d7a6c:	d036      	beq.n	d7adc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7a6e:	2900      	cmp	r1, #0
   d7a70:	d134      	bne.n	d7adc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7a72:	6873      	ldr	r3, [r6, #4]
   d7a74:	2b02      	cmp	r3, #2
   d7a76:	d003      	beq.n	d7a80 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7a78:	2b0a      	cmp	r3, #10
   d7a7a:	d00b      	beq.n	d7a94 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7a7c:	69f6      	ldr	r6, [r6, #28]
   d7a7e:	e7f4      	b.n	d7a6a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7a80:	f1b8 0f00 	cmp.w	r8, #0
   d7a84:	d004      	beq.n	d7a90 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7a86:	6971      	ldr	r1, [r6, #20]
   d7a88:	4638      	mov	r0, r7
   d7a8a:	3104      	adds	r1, #4
   d7a8c:	f7ff fae1 	bl	d7052 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7a90:	4641      	mov	r1, r8
   d7a92:	e7f3      	b.n	d7a7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7a94:	f1b9 0f00 	cmp.w	r9, #0
   d7a98:	d101      	bne.n	d7a9e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7a9a:	4649      	mov	r1, r9
   d7a9c:	e7ee      	b.n	d7a7c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7a9e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7aa0:	2210      	movs	r2, #16
   d7aa2:	a801      	add	r0, sp, #4
   d7aa4:	f000 fc1e 	bl	d82e4 <memset>
                    a.v = 6;
   d7aa8:	2306      	movs	r3, #6
   d7aaa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7aae:	ad01      	add	r5, sp, #4
   d7ab0:	f104 0308 	add.w	r3, r4, #8
   d7ab4:	3418      	adds	r4, #24
   d7ab6:	6818      	ldr	r0, [r3, #0]
   d7ab8:	6859      	ldr	r1, [r3, #4]
   d7aba:	462a      	mov	r2, r5
   d7abc:	c203      	stmia	r2!, {r0, r1}
   d7abe:	3308      	adds	r3, #8
   d7ac0:	42a3      	cmp	r3, r4
   d7ac2:	4615      	mov	r5, r2
   d7ac4:	d1f7      	bne.n	d7ab6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7ac6:	a901      	add	r1, sp, #4
   d7ac8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7aca:	ad07      	add	r5, sp, #28
   d7acc:	f7ff fa8c 	bl	d6fe8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ad2:	1d3c      	adds	r4, r7, #4
   d7ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7ad6:	682b      	ldr	r3, [r5, #0]
   d7ad8:	7023      	strb	r3, [r4, #0]
   d7ada:	e7de      	b.n	d7a9a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7adc:	9800      	ldr	r0, [sp, #0]
   d7ade:	f7fd fa01 	bl	d4ee4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7ae2:	4638      	mov	r0, r7
   d7ae4:	b015      	add	sp, #84	; 0x54
   d7ae6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7aec <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7aec:	4b02      	ldr	r3, [pc, #8]	; (d7af8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7aee:	4a03      	ldr	r2, [pc, #12]	; (d7afc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7af0:	601a      	str	r2, [r3, #0]
   d7af2:	2200      	movs	r2, #0
   d7af4:	605a      	str	r2, [r3, #4]

} // spark
   d7af6:	4770      	bx	lr
   d7af8:	2003e7c0 	.word	0x2003e7c0
   d7afc:	000d894c 	.word	0x000d894c

000d7b00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d7b00:	f100 0310 	add.w	r3, r0, #16
   d7b04:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7b06:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7b0a:	2901      	cmp	r1, #1
   d7b0c:	4618      	mov	r0, r3
   d7b0e:	d108      	bne.n	d7b22 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d7b10:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d7b14:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d7b18:	3a01      	subs	r2, #1
   d7b1a:	f103 0310 	add.w	r3, r3, #16
   d7b1e:	d1f2      	bne.n	d7b06 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d7b20:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d7b22:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7b24:	bf04      	itt	eq
   d7b26:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d7b2a:	1852      	addeq	r2, r2, r1
   d7b2c:	e7f4      	b.n	d7b18 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d7b2e <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d7b2e:	b40e      	push	{r1, r2, r3}
   d7b30:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7b32:	b088      	sub	sp, #32
   d7b34:	af00      	add	r7, sp, #0
   d7b36:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b3a:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d7b3c:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b40:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d7b42:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b44:	462b      	mov	r3, r5
   d7b46:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d7b48:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b4a:	f7fd fc5d 	bl	d5408 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d7b4e:	280f      	cmp	r0, #15
   d7b50:	687a      	ldr	r2, [r7, #4]
   d7b52:	d91a      	bls.n	d7b8a <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d7b54:	f100 0308 	add.w	r3, r0, #8
   d7b58:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d7b5c:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d7b5e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b62:	1c41      	adds	r1, r0, #1
   d7b64:	462b      	mov	r3, r5
   d7b66:	4668      	mov	r0, sp
        va_start(args, fmt);
   d7b68:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7b6a:	f7fd fc4d 	bl	d5408 <vsnprintf>
        if (n > 0) {
   d7b6e:	1e02      	subs	r2, r0, #0
   d7b70:	dd04      	ble.n	d7b7c <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d7b72:	6823      	ldr	r3, [r4, #0]
   d7b74:	4669      	mov	r1, sp
   d7b76:	689b      	ldr	r3, [r3, #8]
   d7b78:	4620      	mov	r0, r4
   d7b7a:	4798      	blx	r3
   d7b7c:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d7b7e:	3720      	adds	r7, #32
   d7b80:	46bd      	mov	sp, r7
   d7b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7b86:	b003      	add	sp, #12
   d7b88:	4770      	bx	lr
    } else if (n > 0) {
   d7b8a:	2800      	cmp	r0, #0
   d7b8c:	d0f7      	beq.n	d7b7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d7b8e:	6823      	ldr	r3, [r4, #0]
   d7b90:	4602      	mov	r2, r0
   d7b92:	689b      	ldr	r3, [r3, #8]
   d7b94:	f107 0110 	add.w	r1, r7, #16
   d7b98:	4620      	mov	r0, r4
   d7b9a:	4798      	blx	r3
}
   d7b9c:	e7ef      	b.n	d7b7e <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d7b9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7b9e:	b510      	push	{r4, lr}
          _M_dispose();
   d7ba0:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7ba2:	4604      	mov	r4, r0
          _M_dispose();
   d7ba4:	689b      	ldr	r3, [r3, #8]
   d7ba6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7ba8:	68a3      	ldr	r3, [r4, #8]
   d7baa:	3b01      	subs	r3, #1
   d7bac:	60a3      	str	r3, [r4, #8]
   d7bae:	b92b      	cbnz	r3, d7bbc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7bb0:	6823      	ldr	r3, [r4, #0]
   d7bb2:	4620      	mov	r0, r4
   d7bb4:	68db      	ldr	r3, [r3, #12]
    }
   d7bb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7bba:	4718      	bx	r3
    }
   d7bbc:	bd10      	pop	{r4, pc}

000d7bbe <_ZN5spark10JSONWriter5writeEc>:
inline void spark::JSONWriter::write(char c) {
   d7bbe:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d7bc0:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d7bc2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7bc6:	689b      	ldr	r3, [r3, #8]
   d7bc8:	2201      	movs	r2, #1
   d7bca:	f10d 0107 	add.w	r1, sp, #7
   d7bce:	4798      	blx	r3
}
   d7bd0:	b003      	add	sp, #12
   d7bd2:	f85d fb04 	ldr.w	pc, [sp], #4

000d7bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7bd6:	b538      	push	{r3, r4, r5, lr}
   d7bd8:	680b      	ldr	r3, [r1, #0]
   d7bda:	6003      	str	r3, [r0, #0]
   d7bdc:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d7bde:	6843      	ldr	r3, [r0, #4]
   d7be0:	429d      	cmp	r5, r3
    class __shared_ptr
   d7be2:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7be4:	d00c      	beq.n	d7c00 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7be6:	b115      	cbz	r5, d7bee <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d7be8:	686b      	ldr	r3, [r5, #4]
   d7bea:	3301      	adds	r3, #1
   d7bec:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d7bee:	6860      	ldr	r0, [r4, #4]
   d7bf0:	b128      	cbz	r0, d7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7bf2:	6843      	ldr	r3, [r0, #4]
   d7bf4:	3b01      	subs	r3, #1
   d7bf6:	6043      	str	r3, [r0, #4]
   d7bf8:	b90b      	cbnz	r3, d7bfe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d7bfa:	f7ff ffd0 	bl	d7b9e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d7bfe:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d7c00:	4620      	mov	r0, r4
   d7c02:	bd38      	pop	{r3, r4, r5, pc}

000d7c04 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7c04:	460b      	mov	r3, r1
   d7c06:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7c08:	2200      	movs	r2, #0
   d7c0a:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d7c0c:	e9c0 2200 	strd	r2, r2, [r0]
   d7c10:	4604      	mov	r4, r0
        t_ = t;
   d7c12:	6083      	str	r3, [r0, #8]
    if (t) {
   d7c14:	b90b      	cbnz	r3, d7c1a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d7c16:	4620      	mov	r0, r4
   d7c18:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d7c1a:	f7ff ffdc 	bl	d7bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d7c1e:	e7fa      	b.n	d7c16 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d7c20 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d7c20:	6883      	ldr	r3, [r0, #8]
   d7c22:	b1eb      	cbz	r3, d7c60 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d7c24:	781a      	ldrb	r2, [r3, #0]
   d7c26:	2a03      	cmp	r2, #3
   d7c28:	d81a      	bhi.n	d7c60 <_ZNK5spark9JSONValue4typeEv+0x40>
   d7c2a:	e8df f002 	tbb	[pc, r2]
   d7c2e:	1704      	.short	0x1704
   d7c30:	1b02      	.short	0x1b02
   d7c32:	2005      	movs	r0, #5
   d7c34:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d7c36:	6802      	ldr	r2, [r0, #0]
   d7c38:	685b      	ldr	r3, [r3, #4]
   d7c3a:	6852      	ldr	r2, [r2, #4]
   d7c3c:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d7c3e:	282d      	cmp	r0, #45	; 0x2d
   d7c40:	d012      	beq.n	d7c68 <_ZNK5spark9JSONValue4typeEv+0x48>
   d7c42:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7c46:	2b09      	cmp	r3, #9
   d7c48:	d90e      	bls.n	d7c68 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d7c4a:	2874      	cmp	r0, #116	; 0x74
   d7c4c:	d00e      	beq.n	d7c6c <_ZNK5spark9JSONValue4typeEv+0x4c>
   d7c4e:	2866      	cmp	r0, #102	; 0x66
   d7c50:	d00c      	beq.n	d7c6c <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d7c52:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7c56:	4258      	negs	r0, r3
   d7c58:	4158      	adcs	r0, r3
   d7c5a:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d7c5c:	2006      	movs	r0, #6
   d7c5e:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d7c60:	2000      	movs	r0, #0
   d7c62:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d7c64:	2004      	movs	r0, #4
   d7c66:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d7c68:	2003      	movs	r0, #3
   d7c6a:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d7c6c:	2002      	movs	r0, #2
}
   d7c6e:	4770      	bx	lr

000d7c70 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d7c70:	b510      	push	{r4, lr}
   d7c72:	4604      	mov	r4, r0
    switch (type()) {
   d7c74:	f7ff ffd4 	bl	d7c20 <_ZNK5spark9JSONValue4typeEv>
   d7c78:	2802      	cmp	r0, #2
   d7c7a:	d00e      	beq.n	d7c9a <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d7c7c:	1ec3      	subs	r3, r0, #3
   d7c7e:	b2db      	uxtb	r3, r3
   d7c80:	2b01      	cmp	r3, #1
   d7c82:	d814      	bhi.n	d7cae <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d7c84:	6822      	ldr	r2, [r4, #0]
   d7c86:	68a3      	ldr	r3, [r4, #8]
   d7c88:	6850      	ldr	r0, [r2, #4]
   d7c8a:	685b      	ldr	r3, [r3, #4]
}
   d7c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d7c90:	220a      	movs	r2, #10
   d7c92:	2100      	movs	r1, #0
   d7c94:	4418      	add	r0, r3
   d7c96:	f000 bc23 	b.w	d84e0 <strtol>
        const char* const s = d_->json + t_->start;
   d7c9a:	6822      	ldr	r2, [r4, #0]
   d7c9c:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7c9e:	6852      	ldr	r2, [r2, #4]
   d7ca0:	685b      	ldr	r3, [r3, #4]
   d7ca2:	5cd0      	ldrb	r0, [r2, r3]
   d7ca4:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d7ca8:	4258      	negs	r0, r3
   d7caa:	4158      	adcs	r0, r3
}
   d7cac:	bd10      	pop	{r4, pc}
    switch (type()) {
   d7cae:	2000      	movs	r0, #0
   d7cb0:	e7fc      	b.n	d7cac <_ZNK5spark9JSONValue5toIntEv+0x3c>
	...

000d7cb4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7cb4:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7cb6:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7cb8:	e9c0 3300 	strd	r3, r3, [r0]
   d7cbc:	4604      	mov	r4, r0
        n_(0) {
   d7cbe:	480e      	ldr	r0, [pc, #56]	; (d7cf8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7cc0:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7cc4:	b1a9      	cbz	r1, d7cf2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7cc6:	780b      	ldrb	r3, [r1, #0]
   d7cc8:	2b03      	cmp	r3, #3
   d7cca:	d006      	beq.n	d7cda <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d7ccc:	b98b      	cbnz	r3, d7cf2 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d7cce:	6813      	ldr	r3, [r2, #0]
   d7cd0:	6858      	ldr	r0, [r3, #4]
   d7cd2:	684b      	ldr	r3, [r1, #4]
   d7cd4:	5cc3      	ldrb	r3, [r0, r3]
   d7cd6:	2b6e      	cmp	r3, #110	; 0x6e
   d7cd8:	d007      	beq.n	d7cea <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d7cda:	6813      	ldr	r3, [r2, #0]
   d7cdc:	684d      	ldr	r5, [r1, #4]
   d7cde:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7ce0:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d7ce2:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7ce4:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7ce6:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7ce8:	60e3      	str	r3, [r4, #12]
   d7cea:	4611      	mov	r1, r2
   d7cec:	4620      	mov	r0, r4
   d7cee:	f7ff ff72 	bl	d7bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d7cf2:	4620      	mov	r0, r4
   d7cf4:	bd38      	pop	{r3, r4, r5, pc}
   d7cf6:	bf00      	nop
   d7cf8:	000d874e 	.word	0x000d874e

000d7cfc <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7cfc:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7cfe:	2500      	movs	r5, #0
   d7d00:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d7d02:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d7d06:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7d0a:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d7d0e:	4604      	mov	r4, r0
   d7d10:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d7d12:	b14b      	cbz	r3, d7d28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7d14:	781a      	ldrb	r2, [r3, #0]
   d7d16:	2a01      	cmp	r2, #1
   d7d18:	d106      	bne.n	d7d28 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7d1a:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d7d1e:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d7d20:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d7d22:	6143      	str	r3, [r0, #20]
   d7d24:	f7ff ff57 	bl	d7bd6 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d7d28:	4620      	mov	r0, r4
   d7d2a:	bd38      	pop	{r3, r4, r5, pc}

000d7d2c <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d7d2c:	b510      	push	{r4, lr}
    if (!n_) {
   d7d2e:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d7d30:	4604      	mov	r4, r0
    if (!n_) {
   d7d32:	b163      	cbz	r3, d7d4e <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d7d34:	6880      	ldr	r0, [r0, #8]
   d7d36:	60e0      	str	r0, [r4, #12]
    --n_;
   d7d38:	3b01      	subs	r3, #1
    ++t_;
   d7d3a:	3010      	adds	r0, #16
   d7d3c:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d7d3e:	6120      	str	r0, [r4, #16]
    --n_;
   d7d40:	6163      	str	r3, [r4, #20]
    if (n_) {
   d7d42:	b113      	cbz	r3, d7d4a <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d7d44:	f7ff fedc 	bl	d7b00 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d7d48:	60a0      	str	r0, [r4, #8]
    return true;
   d7d4a:	2001      	movs	r0, #1
   d7d4c:	e000      	b.n	d7d50 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d7d4e:	4618      	mov	r0, r3
}
   d7d50:	bd10      	pop	{r4, pc}

000d7d52 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d7d52:	b510      	push	{r4, lr}
    write('}');
   d7d54:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d7d56:	4604      	mov	r4, r0
    write('}');
   d7d58:	f7ff ff31 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d7d5c:	2301      	movs	r3, #1
   d7d5e:	7123      	strb	r3, [r4, #4]
}
   d7d60:	4620      	mov	r0, r4
   d7d62:	bd10      	pop	{r4, pc}

000d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d7d64:	b508      	push	{r3, lr}
    switch (state_) {
   d7d66:	7903      	ldrb	r3, [r0, #4]
   d7d68:	2b01      	cmp	r3, #1
   d7d6a:	d002      	beq.n	d7d72 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d7d6c:	2b02      	cmp	r3, #2
   d7d6e:	d004      	beq.n	d7d7a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d7d70:	bd08      	pop	{r3, pc}
        write(',');
   d7d72:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d7d74:	f7ff ff23 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
}
   d7d78:	e7fa      	b.n	d7d70 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d7d7a:	213a      	movs	r1, #58	; 0x3a
   d7d7c:	e7fa      	b.n	d7d74 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d7d7e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d7d7e:	b510      	push	{r4, lr}
   d7d80:	4604      	mov	r4, r0
    writeSeparator();
   d7d82:	f7ff ffef 	bl	d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d7d86:	4620      	mov	r0, r4
   d7d88:	217b      	movs	r1, #123	; 0x7b
   d7d8a:	f7ff ff18 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d7d8e:	2300      	movs	r3, #0
   d7d90:	7123      	strb	r3, [r4, #4]
}
   d7d92:	4620      	mov	r0, r4
   d7d94:	bd10      	pop	{r4, pc}
	...

000d7d98 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d7d98:	b513      	push	{r0, r1, r4, lr}
   d7d9a:	4604      	mov	r4, r0
   d7d9c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d7d9e:	f7ff ffe1 	bl	d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d7da2:	6823      	ldr	r3, [r4, #0]
   d7da4:	9a01      	ldr	r2, [sp, #4]
   d7da6:	68db      	ldr	r3, [r3, #12]
   d7da8:	4903      	ldr	r1, [pc, #12]	; (d7db8 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d7daa:	4620      	mov	r0, r4
   d7dac:	4798      	blx	r3
    state_ = NEXT;
   d7dae:	2301      	movs	r3, #1
}
   d7db0:	4620      	mov	r0, r4
    state_ = NEXT;
   d7db2:	7123      	strb	r3, [r4, #4]
}
   d7db4:	b002      	add	sp, #8
   d7db6:	bd10      	pop	{r4, pc}
   d7db8:	000d88d9 	.word	0x000d88d9

000d7dbc <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d7dbc:	b513      	push	{r0, r1, r4, lr}
   d7dbe:	4604      	mov	r4, r0
   d7dc0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d7dc2:	f7ff ffcf 	bl	d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7dc6:	6823      	ldr	r3, [r4, #0]
   d7dc8:	9a01      	ldr	r2, [sp, #4]
   d7dca:	68db      	ldr	r3, [r3, #12]
   d7dcc:	4903      	ldr	r1, [pc, #12]	; (d7ddc <_ZN5spark10JSONWriter5valueEj+0x20>)
   d7dce:	4620      	mov	r0, r4
   d7dd0:	4798      	blx	r3
    state_ = NEXT;
   d7dd2:	2301      	movs	r3, #1
}
   d7dd4:	4620      	mov	r0, r4
    state_ = NEXT;
   d7dd6:	7123      	strb	r3, [r4, #4]
}
   d7dd8:	b002      	add	sp, #8
   d7dda:	bd10      	pop	{r4, pc}
   d7ddc:	000d8978 	.word	0x000d8978

000d7de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7de4:	460d      	mov	r5, r1
   d7de6:	4617      	mov	r7, r2
    write('"');
   d7de8:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d7dea:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d7e8c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7dee:	4604      	mov	r4, r0
    const char* const end = str + size;
   d7df0:	442f      	add	r7, r5
    write('"');
   d7df2:	f7ff fee4 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d7df6:	4629      	mov	r1, r5
    while (s != end) {
   d7df8:	42bd      	cmp	r5, r7
   d7dfa:	462a      	mov	r2, r5
   d7dfc:	d038      	beq.n	d7e70 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d7dfe:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d7e02:	2e22      	cmp	r6, #34	; 0x22
   d7e04:	d003      	beq.n	d7e0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7e06:	2e5c      	cmp	r6, #92	; 0x5c
   d7e08:	d001      	beq.n	d7e0e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7e0a:	2e1f      	cmp	r6, #31
   d7e0c:	d8f4      	bhi.n	d7df8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d7e0e:	6823      	ldr	r3, [r4, #0]
   d7e10:	1a52      	subs	r2, r2, r1
   d7e12:	689b      	ldr	r3, [r3, #8]
   d7e14:	4620      	mov	r0, r4
   d7e16:	4798      	blx	r3
            write('\\');
   d7e18:	215c      	movs	r1, #92	; 0x5c
   d7e1a:	4620      	mov	r0, r4
   d7e1c:	f7ff fecf 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d7e20:	2e0d      	cmp	r6, #13
   d7e22:	d80a      	bhi.n	d7e3a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d7e24:	2e07      	cmp	r6, #7
   d7e26:	d91c      	bls.n	d7e62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d7e28:	f1a6 0308 	sub.w	r3, r6, #8
   d7e2c:	2b05      	cmp	r3, #5
   d7e2e:	d818      	bhi.n	d7e62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d7e30:	e8df f003 	tbb	[pc, r3]
   d7e34:	17110f0d 	.word	0x17110f0d
   d7e38:	1513      	.short	0x1513
   d7e3a:	2e22      	cmp	r6, #34	; 0x22
   d7e3c:	d001      	beq.n	d7e42 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d7e3e:	2e5c      	cmp	r6, #92	; 0x5c
   d7e40:	d10f      	bne.n	d7e62 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d7e42:	4631      	mov	r1, r6
                write('b');
   d7e44:	4620      	mov	r0, r4
   d7e46:	f7ff feba 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d7e4a:	4629      	mov	r1, r5
    while (s != end) {
   d7e4c:	e7d4      	b.n	d7df8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d7e4e:	2162      	movs	r1, #98	; 0x62
   d7e50:	e7f8      	b.n	d7e44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d7e52:	2174      	movs	r1, #116	; 0x74
   d7e54:	e7f6      	b.n	d7e44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d7e56:	216e      	movs	r1, #110	; 0x6e
   d7e58:	e7f4      	b.n	d7e44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d7e5a:	2166      	movs	r1, #102	; 0x66
   d7e5c:	e7f2      	b.n	d7e44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d7e5e:	2172      	movs	r1, #114	; 0x72
   d7e60:	e7f0      	b.n	d7e44 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d7e62:	6823      	ldr	r3, [r4, #0]
   d7e64:	4632      	mov	r2, r6
   d7e66:	68db      	ldr	r3, [r3, #12]
   d7e68:	4641      	mov	r1, r8
   d7e6a:	4620      	mov	r0, r4
   d7e6c:	4798      	blx	r3
                break;
   d7e6e:	e7ec      	b.n	d7e4a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d7e70:	428d      	cmp	r5, r1
   d7e72:	d004      	beq.n	d7e7e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d7e74:	6823      	ldr	r3, [r4, #0]
   d7e76:	1a6a      	subs	r2, r5, r1
   d7e78:	689b      	ldr	r3, [r3, #8]
   d7e7a:	4620      	mov	r0, r4
   d7e7c:	4798      	blx	r3
    }
    write('"');
   d7e7e:	2122      	movs	r1, #34	; 0x22
   d7e80:	4620      	mov	r0, r4
   d7e82:	f7ff fe9c 	bl	d7bbe <_ZN5spark10JSONWriter5writeEc>
}
   d7e86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7e8a:	bf00      	nop
   d7e8c:	000d897b 	.word	0x000d897b

000d7e90 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d7e90:	b513      	push	{r0, r1, r4, lr}
   d7e92:	4604      	mov	r4, r0
   d7e94:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7e98:	f7ff ff64 	bl	d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7e9c:	4620      	mov	r0, r4
   d7e9e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7ea2:	f7ff ff9d 	bl	d7de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7ea6:	2302      	movs	r3, #2
}
   d7ea8:	4620      	mov	r0, r4
    state_ = VALUE;
   d7eaa:	7123      	strb	r3, [r4, #4]
}
   d7eac:	b002      	add	sp, #8
   d7eae:	bd10      	pop	{r4, pc}

000d7eb0 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7eb0:	b513      	push	{r0, r1, r4, lr}
   d7eb2:	4604      	mov	r4, r0
   d7eb4:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7eb8:	f7ff ff54 	bl	d7d64 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d7ebc:	4620      	mov	r0, r4
   d7ebe:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7ec2:	f7ff ff8d 	bl	d7de0 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7ec6:	2301      	movs	r3, #1
}
   d7ec8:	4620      	mov	r0, r4
    state_ = NEXT;
   d7eca:	7123      	strb	r3, [r4, #4]
}
   d7ecc:	b002      	add	sp, #8
   d7ece:	bd10      	pop	{r4, pc}

000d7ed0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7ed0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7ed2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7ed4:	d902      	bls.n	d7edc <pinAvailable+0xc>
    return false;
   d7ed6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7ed8:	b002      	add	sp, #8
   d7eda:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7edc:	f1a0 030b 	sub.w	r3, r0, #11
   d7ee0:	2b02      	cmp	r3, #2
   d7ee2:	d81a      	bhi.n	d7f1a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7ee4:	4c17      	ldr	r4, [pc, #92]	; (d7f44 <pinAvailable+0x74>)
   d7ee6:	7821      	ldrb	r1, [r4, #0]
   d7ee8:	f3bf 8f5b 	dmb	ish
   d7eec:	f011 0101 	ands.w	r1, r1, #1
   d7ef0:	d10b      	bne.n	d7f0a <pinAvailable+0x3a>
   d7ef2:	4620      	mov	r0, r4
   d7ef4:	9101      	str	r1, [sp, #4]
   d7ef6:	f7fc f8df 	bl	d40b8 <__cxa_guard_acquire>
   d7efa:	9901      	ldr	r1, [sp, #4]
   d7efc:	b128      	cbz	r0, d7f0a <pinAvailable+0x3a>
   d7efe:	4812      	ldr	r0, [pc, #72]	; (d7f48 <pinAvailable+0x78>)
   d7f00:	f7fd fad8 	bl	d54b4 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7f04:	4620      	mov	r0, r4
   d7f06:	f7fc f8dc 	bl	d40c2 <__cxa_guard_release>
   d7f0a:	4b0f      	ldr	r3, [pc, #60]	; (d7f48 <pinAvailable+0x78>)
   d7f0c:	7818      	ldrb	r0, [r3, #0]
   d7f0e:	f7fd f965 	bl	d51dc <hal_spi_is_enabled>
   d7f12:	2800      	cmp	r0, #0
   d7f14:	d1df      	bne.n	d7ed6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7f16:	2001      	movs	r0, #1
   d7f18:	e7de      	b.n	d7ed8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7f1a:	2801      	cmp	r0, #1
   d7f1c:	d809      	bhi.n	d7f32 <pinAvailable+0x62>
   d7f1e:	f000 f857 	bl	d7fd0 <_Z19__fetch_global_Wirev>
   d7f22:	2100      	movs	r1, #0
   d7f24:	7c00      	ldrb	r0, [r0, #16]
   d7f26:	f7fd f911 	bl	d514c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7f2a:	f080 0001 	eor.w	r0, r0, #1
   d7f2e:	b2c0      	uxtb	r0, r0
   d7f30:	e7d2      	b.n	d7ed8 <pinAvailable+0x8>
   d7f32:	3809      	subs	r0, #9
   d7f34:	2801      	cmp	r0, #1
   d7f36:	d8ee      	bhi.n	d7f16 <pinAvailable+0x46>
   d7f38:	f7ff f9d6 	bl	d72e8 <_Z22__fetch_global_Serial1v>
   d7f3c:	7c00      	ldrb	r0, [r0, #16]
   d7f3e:	f7fd f8c5 	bl	d50cc <hal_usart_is_enabled>
   d7f42:	e7f2      	b.n	d7f2a <pinAvailable+0x5a>
   d7f44:	2003e7c8 	.word	0x2003e7c8
   d7f48:	2003e7cc 	.word	0x2003e7cc

000d7f4c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f4c:	2823      	cmp	r0, #35	; 0x23
{
   d7f4e:	b538      	push	{r3, r4, r5, lr}
   d7f50:	4604      	mov	r4, r0
   d7f52:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7f54:	d80a      	bhi.n	d7f6c <pinMode+0x20>
   d7f56:	29ff      	cmp	r1, #255	; 0xff
   d7f58:	d008      	beq.n	d7f6c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7f5a:	f7ff ffb9 	bl	d7ed0 <pinAvailable>
   d7f5e:	b128      	cbz	r0, d7f6c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7f60:	4629      	mov	r1, r5
   d7f62:	4620      	mov	r0, r4
}
   d7f64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7f68:	f7fc bfcc 	b.w	d4f04 <HAL_Pin_Mode>
}
   d7f6c:	bd38      	pop	{r3, r4, r5, pc}

000d7f6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7f6e:	b538      	push	{r3, r4, r5, lr}
   d7f70:	4604      	mov	r4, r0
   d7f72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7f74:	f7fc ffce 	bl	d4f14 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7f78:	28ff      	cmp	r0, #255	; 0xff
   d7f7a:	d010      	beq.n	d7f9e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7f7c:	2806      	cmp	r0, #6
   d7f7e:	d804      	bhi.n	d7f8a <digitalWrite+0x1c>
   d7f80:	234d      	movs	r3, #77	; 0x4d
   d7f82:	fa23 f000 	lsr.w	r0, r3, r0
   d7f86:	07c3      	lsls	r3, r0, #31
   d7f88:	d409      	bmi.n	d7f9e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7f8a:	4620      	mov	r0, r4
   d7f8c:	f7ff ffa0 	bl	d7ed0 <pinAvailable>
   d7f90:	b128      	cbz	r0, d7f9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7f92:	4629      	mov	r1, r5
   d7f94:	4620      	mov	r0, r4
}
   d7f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7f9a:	f7fc bfc3 	b.w	d4f24 <HAL_GPIO_Write>
}
   d7f9e:	bd38      	pop	{r3, r4, r5, pc}

000d7fa0 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7fa0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7fa2:	2300      	movs	r3, #0
   d7fa4:	2520      	movs	r5, #32
   d7fa6:	8043      	strh	r3, [r0, #2]
   d7fa8:	2314      	movs	r3, #20
{
   d7faa:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7fac:	8003      	strh	r3, [r0, #0]
   d7fae:	6085      	str	r5, [r0, #8]
   d7fb0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fb2:	4906      	ldr	r1, [pc, #24]	; (d7fcc <_Z17acquireWireBufferv+0x2c>)
   d7fb4:	4628      	mov	r0, r5
   d7fb6:	f000 f83c 	bl	d8032 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fba:	4904      	ldr	r1, [pc, #16]	; (d7fcc <_Z17acquireWireBufferv+0x2c>)
	};
   d7fbc:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7fbe:	4628      	mov	r0, r5
   d7fc0:	f000 f837 	bl	d8032 <_ZnajRKSt9nothrow_t>
	};
   d7fc4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7fc6:	4620      	mov	r0, r4
   d7fc8:	bd38      	pop	{r3, r4, r5, pc}
   d7fca:	bf00      	nop
   d7fcc:	000d8981 	.word	0x000d8981

000d7fd0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7fd0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7fd2:	4d0f      	ldr	r5, [pc, #60]	; (d8010 <_Z19__fetch_global_Wirev+0x40>)
   d7fd4:	7829      	ldrb	r1, [r5, #0]
   d7fd6:	f3bf 8f5b 	dmb	ish
   d7fda:	f011 0401 	ands.w	r4, r1, #1
{
   d7fde:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7fe0:	d113      	bne.n	d800a <_Z19__fetch_global_Wirev+0x3a>
   d7fe2:	4628      	mov	r0, r5
   d7fe4:	f7fc f868 	bl	d40b8 <__cxa_guard_acquire>
   d7fe8:	b178      	cbz	r0, d800a <_Z19__fetch_global_Wirev+0x3a>
   d7fea:	a801      	add	r0, sp, #4
   d7fec:	f7ff ffd8 	bl	d7fa0 <_Z17acquireWireBufferv>
   d7ff0:	aa01      	add	r2, sp, #4
   d7ff2:	4621      	mov	r1, r4
   d7ff4:	4807      	ldr	r0, [pc, #28]	; (d8014 <_Z19__fetch_global_Wirev+0x44>)
   d7ff6:	f7ff f9e7 	bl	d73c8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7ffa:	4628      	mov	r0, r5
   d7ffc:	f7fc f861 	bl	d40c2 <__cxa_guard_release>
   d8000:	4a05      	ldr	r2, [pc, #20]	; (d8018 <_Z19__fetch_global_Wirev+0x48>)
   d8002:	4906      	ldr	r1, [pc, #24]	; (d801c <_Z19__fetch_global_Wirev+0x4c>)
   d8004:	4803      	ldr	r0, [pc, #12]	; (d8014 <_Z19__fetch_global_Wirev+0x44>)
   d8006:	f000 f80b 	bl	d8020 <__aeabi_atexit>
	return wire;
}
   d800a:	4802      	ldr	r0, [pc, #8]	; (d8014 <_Z19__fetch_global_Wirev+0x44>)
   d800c:	b007      	add	sp, #28
   d800e:	bd30      	pop	{r4, r5, pc}
   d8010:	2003e7d8 	.word	0x2003e7d8
   d8014:	2003e7dc 	.word	0x2003e7dc
   d8018:	2003e428 	.word	0x2003e428
   d801c:	000d7371 	.word	0x000d7371

000d8020 <__aeabi_atexit>:
   d8020:	460b      	mov	r3, r1
   d8022:	4601      	mov	r1, r0
   d8024:	4618      	mov	r0, r3
   d8026:	f000 b919 	b.w	d825c <__cxa_atexit>

000d802a <_ZdlPvj>:
   d802a:	f7fc b836 	b.w	d409a <_ZdlPv>

000d802e <_ZnwjRKSt9nothrow_t>:
   d802e:	f7fc b830 	b.w	d4092 <_Znwj>

000d8032 <_ZnajRKSt9nothrow_t>:
   d8032:	f7fc b830 	b.w	d4096 <_Znaj>
	...

000d8038 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8038:	4901      	ldr	r1, [pc, #4]	; (d8040 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d803a:	f000 b8f9 	b.w	d8230 <_ZNKSt9type_infoeqERKS_>
   d803e:	bf00      	nop
   d8040:	000d899c 	.word	0x000d899c

000d8044 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8044:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8046:	2400      	movs	r4, #0
   d8048:	2310      	movs	r3, #16
   d804a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d804e:	6803      	ldr	r3, [r0, #0]
   d8050:	9400      	str	r4, [sp, #0]
   d8052:	699e      	ldr	r6, [r3, #24]
   d8054:	f88d 4004 	strb.w	r4, [sp, #4]
   d8058:	4615      	mov	r5, r2
   d805a:	466b      	mov	r3, sp
   d805c:	6812      	ldr	r2, [r2, #0]
   d805e:	47b0      	blx	r6
   d8060:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8064:	f003 0306 	and.w	r3, r3, #6
   d8068:	2b06      	cmp	r3, #6
   d806a:	bf03      	ittte	eq
   d806c:	9b00      	ldreq	r3, [sp, #0]
   d806e:	602b      	streq	r3, [r5, #0]
   d8070:	2001      	moveq	r0, #1
   d8072:	4620      	movne	r0, r4
   d8074:	b004      	add	sp, #16
   d8076:	bd70      	pop	{r4, r5, r6, pc}

000d8078 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8078:	9800      	ldr	r0, [sp, #0]
   d807a:	4290      	cmp	r0, r2
   d807c:	bf14      	ite	ne
   d807e:	2001      	movne	r0, #1
   d8080:	2006      	moveq	r0, #6
   d8082:	4770      	bx	lr

000d8084 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8084:	b510      	push	{r4, lr}
   d8086:	4b03      	ldr	r3, [pc, #12]	; (d8094 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8088:	6003      	str	r3, [r0, #0]
   d808a:	4604      	mov	r4, r0
   d808c:	f000 f8cd 	bl	d822a <_ZNSt9type_infoD1Ev>
   d8090:	4620      	mov	r0, r4
   d8092:	bd10      	pop	{r4, pc}
   d8094:	000d89dc 	.word	0x000d89dc

000d8098 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8098:	b510      	push	{r4, lr}
   d809a:	4604      	mov	r4, r0
   d809c:	f7ff fff2 	bl	d8084 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d80a0:	4620      	mov	r0, r4
   d80a2:	2108      	movs	r1, #8
   d80a4:	f7ff ffc1 	bl	d802a <_ZdlPvj>
   d80a8:	4620      	mov	r0, r4
   d80aa:	bd10      	pop	{r4, pc}

000d80ac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d80ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d80b0:	461f      	mov	r7, r3
   d80b2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d80b6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d80ba:	4598      	cmp	r8, r3
   d80bc:	4606      	mov	r6, r0
   d80be:	4615      	mov	r5, r2
   d80c0:	d107      	bne.n	d80d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d80c2:	9907      	ldr	r1, [sp, #28]
   d80c4:	f000 f8b4 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d80c8:	b118      	cbz	r0, d80d2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d80ca:	7165      	strb	r5, [r4, #5]
   d80cc:	2000      	movs	r0, #0
   d80ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d80d2:	4639      	mov	r1, r7
   d80d4:	4630      	mov	r0, r6
   d80d6:	f000 f8ab 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d80da:	2800      	cmp	r0, #0
   d80dc:	d0f6      	beq.n	d80cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d80de:	2301      	movs	r3, #1
   d80e0:	f8c4 8000 	str.w	r8, [r4]
   d80e4:	7125      	strb	r5, [r4, #4]
   d80e6:	71a3      	strb	r3, [r4, #6]
   d80e8:	e7f0      	b.n	d80cc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d80ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d80ea:	b538      	push	{r3, r4, r5, lr}
   d80ec:	4615      	mov	r5, r2
   d80ee:	461c      	mov	r4, r3
   d80f0:	f000 f89e 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d80f4:	b120      	cbz	r0, d8100 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d80f6:	2308      	movs	r3, #8
   d80f8:	60e3      	str	r3, [r4, #12]
   d80fa:	2306      	movs	r3, #6
   d80fc:	6025      	str	r5, [r4, #0]
   d80fe:	7123      	strb	r3, [r4, #4]
   d8100:	bd38      	pop	{r3, r4, r5, pc}

000d8102 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8102:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8104:	4605      	mov	r5, r0
   d8106:	460c      	mov	r4, r1
   d8108:	9201      	str	r2, [sp, #4]
   d810a:	461e      	mov	r6, r3
   d810c:	f000 f890 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d8110:	b950      	cbnz	r0, d8128 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8112:	2e03      	cmp	r6, #3
   d8114:	d808      	bhi.n	d8128 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8116:	6823      	ldr	r3, [r4, #0]
   d8118:	9a01      	ldr	r2, [sp, #4]
   d811a:	695b      	ldr	r3, [r3, #20]
   d811c:	4629      	mov	r1, r5
   d811e:	4620      	mov	r0, r4
   d8120:	b002      	add	sp, #8
   d8122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8126:	4718      	bx	r3
   d8128:	b002      	add	sp, #8
   d812a:	bd70      	pop	{r4, r5, r6, pc}

000d812c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d812c:	b510      	push	{r4, lr}
   d812e:	4b03      	ldr	r3, [pc, #12]	; (d813c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8130:	6003      	str	r3, [r0, #0]
   d8132:	4604      	mov	r4, r0
   d8134:	f7ff ffa6 	bl	d8084 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8138:	4620      	mov	r0, r4
   d813a:	bd10      	pop	{r4, pc}
   d813c:	000d8a3c 	.word	0x000d8a3c

000d8140 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8140:	b510      	push	{r4, lr}
   d8142:	4604      	mov	r4, r0
   d8144:	f7ff fff2 	bl	d812c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8148:	4620      	mov	r0, r4
   d814a:	210c      	movs	r1, #12
   d814c:	f7ff ff6d 	bl	d802a <_ZdlPvj>
   d8150:	4620      	mov	r0, r4
   d8152:	bd10      	pop	{r4, pc}

000d8154 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8156:	9f08      	ldr	r7, [sp, #32]
   d8158:	4297      	cmp	r7, r2
   d815a:	4605      	mov	r5, r0
   d815c:	460e      	mov	r6, r1
   d815e:	4614      	mov	r4, r2
   d8160:	d00a      	beq.n	d8178 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8162:	68a8      	ldr	r0, [r5, #8]
   d8164:	6802      	ldr	r2, [r0, #0]
   d8166:	9708      	str	r7, [sp, #32]
   d8168:	6a15      	ldr	r5, [r2, #32]
   d816a:	4631      	mov	r1, r6
   d816c:	4622      	mov	r2, r4
   d816e:	46ac      	mov	ip, r5
   d8170:	b003      	add	sp, #12
   d8172:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8176:	4760      	bx	ip
   d8178:	4619      	mov	r1, r3
   d817a:	9301      	str	r3, [sp, #4]
   d817c:	f000 f858 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d8180:	9b01      	ldr	r3, [sp, #4]
   d8182:	2800      	cmp	r0, #0
   d8184:	d0ed      	beq.n	d8162 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8186:	2006      	movs	r0, #6
   d8188:	b003      	add	sp, #12
   d818a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d818c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d818c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8190:	460d      	mov	r5, r1
   d8192:	4619      	mov	r1, r3
   d8194:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8198:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d819c:	4681      	mov	r9, r0
   d819e:	4617      	mov	r7, r2
   d81a0:	4698      	mov	r8, r3
   d81a2:	f000 f845 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d81a6:	b190      	cbz	r0, d81ce <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d81a8:	2d00      	cmp	r5, #0
   d81aa:	6034      	str	r4, [r6, #0]
   d81ac:	7137      	strb	r7, [r6, #4]
   d81ae:	db09      	blt.n	d81c4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d81b0:	1961      	adds	r1, r4, r5
   d81b2:	458a      	cmp	sl, r1
   d81b4:	bf0c      	ite	eq
   d81b6:	2106      	moveq	r1, #6
   d81b8:	2101      	movne	r1, #1
   d81ba:	71b1      	strb	r1, [r6, #6]
   d81bc:	2000      	movs	r0, #0
   d81be:	b001      	add	sp, #4
   d81c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d81c4:	3502      	adds	r5, #2
   d81c6:	d1f9      	bne.n	d81bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d81c8:	2301      	movs	r3, #1
   d81ca:	71b3      	strb	r3, [r6, #6]
   d81cc:	e7f6      	b.n	d81bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d81ce:	4554      	cmp	r4, sl
   d81d0:	d106      	bne.n	d81e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d81d2:	4659      	mov	r1, fp
   d81d4:	4648      	mov	r0, r9
   d81d6:	f000 f82b 	bl	d8230 <_ZNKSt9type_infoeqERKS_>
   d81da:	b108      	cbz	r0, d81e0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d81dc:	7177      	strb	r7, [r6, #5]
   d81de:	e7ed      	b.n	d81bc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d81e0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d81e4:	6803      	ldr	r3, [r0, #0]
   d81e6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d81ea:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d81ee:	69dc      	ldr	r4, [r3, #28]
   d81f0:	463a      	mov	r2, r7
   d81f2:	4643      	mov	r3, r8
   d81f4:	4629      	mov	r1, r5
   d81f6:	46a4      	mov	ip, r4
   d81f8:	b001      	add	sp, #4
   d81fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81fe:	4760      	bx	ip

000d8200 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8204:	4607      	mov	r7, r0
   d8206:	460c      	mov	r4, r1
   d8208:	4615      	mov	r5, r2
   d820a:	461e      	mov	r6, r3
   d820c:	f7ff ff6d 	bl	d80ea <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8210:	b948      	cbnz	r0, d8226 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8212:	68b8      	ldr	r0, [r7, #8]
   d8214:	6803      	ldr	r3, [r0, #0]
   d8216:	699f      	ldr	r7, [r3, #24]
   d8218:	462a      	mov	r2, r5
   d821a:	4633      	mov	r3, r6
   d821c:	4621      	mov	r1, r4
   d821e:	46bc      	mov	ip, r7
   d8220:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8224:	4760      	bx	ip
   d8226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d822a <_ZNSt9type_infoD1Ev>:
   d822a:	4770      	bx	lr

000d822c <_ZNKSt9type_info14__is_pointer_pEv>:
   d822c:	2000      	movs	r0, #0
   d822e:	4770      	bx	lr

000d8230 <_ZNKSt9type_infoeqERKS_>:
   d8230:	4281      	cmp	r1, r0
   d8232:	b508      	push	{r3, lr}
   d8234:	d00e      	beq.n	d8254 <_ZNKSt9type_infoeqERKS_+0x24>
   d8236:	6840      	ldr	r0, [r0, #4]
   d8238:	7803      	ldrb	r3, [r0, #0]
   d823a:	2b2a      	cmp	r3, #42	; 0x2a
   d823c:	d00c      	beq.n	d8258 <_ZNKSt9type_infoeqERKS_+0x28>
   d823e:	6849      	ldr	r1, [r1, #4]
   d8240:	780b      	ldrb	r3, [r1, #0]
   d8242:	2b2a      	cmp	r3, #42	; 0x2a
   d8244:	bf08      	it	eq
   d8246:	3101      	addeq	r1, #1
   d8248:	f000 f88f 	bl	d836a <strcmp>
   d824c:	fab0 f080 	clz	r0, r0
   d8250:	0940      	lsrs	r0, r0, #5
   d8252:	bd08      	pop	{r3, pc}
   d8254:	2001      	movs	r0, #1
   d8256:	e7fc      	b.n	d8252 <_ZNKSt9type_infoeqERKS_+0x22>
   d8258:	2000      	movs	r0, #0
   d825a:	e7fa      	b.n	d8252 <_ZNKSt9type_infoeqERKS_+0x22>

000d825c <__cxa_atexit>:
   d825c:	b510      	push	{r4, lr}
   d825e:	4c05      	ldr	r4, [pc, #20]	; (d8274 <__cxa_atexit+0x18>)
   d8260:	4613      	mov	r3, r2
   d8262:	b12c      	cbz	r4, d8270 <__cxa_atexit+0x14>
   d8264:	460a      	mov	r2, r1
   d8266:	4601      	mov	r1, r0
   d8268:	2002      	movs	r0, #2
   d826a:	f3af 8000 	nop.w
   d826e:	bd10      	pop	{r4, pc}
   d8270:	4620      	mov	r0, r4
   d8272:	e7fc      	b.n	d826e <__cxa_atexit+0x12>
   d8274:	00000000 	.word	0x00000000

000d8278 <memcmp>:
   d8278:	b530      	push	{r4, r5, lr}
   d827a:	3901      	subs	r1, #1
   d827c:	2400      	movs	r4, #0
   d827e:	42a2      	cmp	r2, r4
   d8280:	d101      	bne.n	d8286 <memcmp+0xe>
   d8282:	2000      	movs	r0, #0
   d8284:	e005      	b.n	d8292 <memcmp+0x1a>
   d8286:	5d03      	ldrb	r3, [r0, r4]
   d8288:	3401      	adds	r4, #1
   d828a:	5d0d      	ldrb	r5, [r1, r4]
   d828c:	42ab      	cmp	r3, r5
   d828e:	d0f6      	beq.n	d827e <memcmp+0x6>
   d8290:	1b58      	subs	r0, r3, r5
   d8292:	bd30      	pop	{r4, r5, pc}

000d8294 <memcpy>:
   d8294:	440a      	add	r2, r1
   d8296:	4291      	cmp	r1, r2
   d8298:	f100 33ff 	add.w	r3, r0, #4294967295
   d829c:	d100      	bne.n	d82a0 <memcpy+0xc>
   d829e:	4770      	bx	lr
   d82a0:	b510      	push	{r4, lr}
   d82a2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d82a6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d82aa:	4291      	cmp	r1, r2
   d82ac:	d1f9      	bne.n	d82a2 <memcpy+0xe>
   d82ae:	bd10      	pop	{r4, pc}

000d82b0 <memmove>:
   d82b0:	4288      	cmp	r0, r1
   d82b2:	b510      	push	{r4, lr}
   d82b4:	eb01 0402 	add.w	r4, r1, r2
   d82b8:	d902      	bls.n	d82c0 <memmove+0x10>
   d82ba:	4284      	cmp	r4, r0
   d82bc:	4623      	mov	r3, r4
   d82be:	d807      	bhi.n	d82d0 <memmove+0x20>
   d82c0:	1e43      	subs	r3, r0, #1
   d82c2:	42a1      	cmp	r1, r4
   d82c4:	d008      	beq.n	d82d8 <memmove+0x28>
   d82c6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d82ca:	f803 2f01 	strb.w	r2, [r3, #1]!
   d82ce:	e7f8      	b.n	d82c2 <memmove+0x12>
   d82d0:	4402      	add	r2, r0
   d82d2:	4601      	mov	r1, r0
   d82d4:	428a      	cmp	r2, r1
   d82d6:	d100      	bne.n	d82da <memmove+0x2a>
   d82d8:	bd10      	pop	{r4, pc}
   d82da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d82de:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d82e2:	e7f7      	b.n	d82d4 <memmove+0x24>

000d82e4 <memset>:
   d82e4:	4402      	add	r2, r0
   d82e6:	4603      	mov	r3, r0
   d82e8:	4293      	cmp	r3, r2
   d82ea:	d100      	bne.n	d82ee <memset+0xa>
   d82ec:	4770      	bx	lr
   d82ee:	f803 1b01 	strb.w	r1, [r3], #1
   d82f2:	e7f9      	b.n	d82e8 <memset+0x4>

000d82f4 <srand>:
   d82f4:	b538      	push	{r3, r4, r5, lr}
   d82f6:	4b0d      	ldr	r3, [pc, #52]	; (d832c <srand+0x38>)
   d82f8:	681d      	ldr	r5, [r3, #0]
   d82fa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d82fc:	4604      	mov	r4, r0
   d82fe:	b97b      	cbnz	r3, d8320 <srand+0x2c>
   d8300:	2018      	movs	r0, #24
   d8302:	f7fd f861 	bl	d53c8 <malloc>
   d8306:	4a0a      	ldr	r2, [pc, #40]	; (d8330 <srand+0x3c>)
   d8308:	4b0a      	ldr	r3, [pc, #40]	; (d8334 <srand+0x40>)
   d830a:	63a8      	str	r0, [r5, #56]	; 0x38
   d830c:	e9c0 2300 	strd	r2, r3, [r0]
   d8310:	4b09      	ldr	r3, [pc, #36]	; (d8338 <srand+0x44>)
   d8312:	6083      	str	r3, [r0, #8]
   d8314:	230b      	movs	r3, #11
   d8316:	8183      	strh	r3, [r0, #12]
   d8318:	2201      	movs	r2, #1
   d831a:	2300      	movs	r3, #0
   d831c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8320:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8322:	2200      	movs	r2, #0
   d8324:	611c      	str	r4, [r3, #16]
   d8326:	615a      	str	r2, [r3, #20]
   d8328:	bd38      	pop	{r3, r4, r5, pc}
   d832a:	bf00      	nop
   d832c:	2003e3c4 	.word	0x2003e3c4
   d8330:	abcd330e 	.word	0xabcd330e
   d8334:	e66d1234 	.word	0xe66d1234
   d8338:	0005deec 	.word	0x0005deec

000d833c <strchr>:
   d833c:	b2c9      	uxtb	r1, r1
   d833e:	4603      	mov	r3, r0
   d8340:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8344:	b11a      	cbz	r2, d834e <strchr+0x12>
   d8346:	428a      	cmp	r2, r1
   d8348:	d1f9      	bne.n	d833e <strchr+0x2>
   d834a:	4618      	mov	r0, r3
   d834c:	4770      	bx	lr
   d834e:	2900      	cmp	r1, #0
   d8350:	bf18      	it	ne
   d8352:	2300      	movne	r3, #0
   d8354:	e7f9      	b.n	d834a <strchr+0xe>

000d8356 <strchrnul>:
   d8356:	b510      	push	{r4, lr}
   d8358:	4604      	mov	r4, r0
   d835a:	f7ff ffef 	bl	d833c <strchr>
   d835e:	b918      	cbnz	r0, d8368 <strchrnul+0x12>
   d8360:	4620      	mov	r0, r4
   d8362:	f000 f814 	bl	d838e <strlen>
   d8366:	4420      	add	r0, r4
   d8368:	bd10      	pop	{r4, pc}

000d836a <strcmp>:
   d836a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d836e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8372:	2a01      	cmp	r2, #1
   d8374:	bf28      	it	cs
   d8376:	429a      	cmpcs	r2, r3
   d8378:	d0f7      	beq.n	d836a <strcmp>
   d837a:	1ad0      	subs	r0, r2, r3
   d837c:	4770      	bx	lr

000d837e <strcpy>:
   d837e:	4603      	mov	r3, r0
   d8380:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8384:	f803 2b01 	strb.w	r2, [r3], #1
   d8388:	2a00      	cmp	r2, #0
   d838a:	d1f9      	bne.n	d8380 <strcpy+0x2>
   d838c:	4770      	bx	lr

000d838e <strlen>:
   d838e:	4603      	mov	r3, r0
   d8390:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8394:	2a00      	cmp	r2, #0
   d8396:	d1fb      	bne.n	d8390 <strlen+0x2>
   d8398:	1a18      	subs	r0, r3, r0
   d839a:	3801      	subs	r0, #1
   d839c:	4770      	bx	lr

000d839e <strncmp>:
   d839e:	b510      	push	{r4, lr}
   d83a0:	b16a      	cbz	r2, d83be <strncmp+0x20>
   d83a2:	3901      	subs	r1, #1
   d83a4:	1884      	adds	r4, r0, r2
   d83a6:	f810 3b01 	ldrb.w	r3, [r0], #1
   d83aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d83ae:	4293      	cmp	r3, r2
   d83b0:	d103      	bne.n	d83ba <strncmp+0x1c>
   d83b2:	42a0      	cmp	r0, r4
   d83b4:	d001      	beq.n	d83ba <strncmp+0x1c>
   d83b6:	2b00      	cmp	r3, #0
   d83b8:	d1f5      	bne.n	d83a6 <strncmp+0x8>
   d83ba:	1a98      	subs	r0, r3, r2
   d83bc:	bd10      	pop	{r4, pc}
   d83be:	4610      	mov	r0, r2
   d83c0:	e7fc      	b.n	d83bc <strncmp+0x1e>

000d83c2 <strrchr>:
   d83c2:	b538      	push	{r3, r4, r5, lr}
   d83c4:	4603      	mov	r3, r0
   d83c6:	460c      	mov	r4, r1
   d83c8:	b969      	cbnz	r1, d83e6 <strrchr+0x24>
   d83ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d83ce:	f7ff bfb5 	b.w	d833c <strchr>
   d83d2:	1c43      	adds	r3, r0, #1
   d83d4:	4605      	mov	r5, r0
   d83d6:	4621      	mov	r1, r4
   d83d8:	4618      	mov	r0, r3
   d83da:	f7ff ffaf 	bl	d833c <strchr>
   d83de:	2800      	cmp	r0, #0
   d83e0:	d1f7      	bne.n	d83d2 <strrchr+0x10>
   d83e2:	4628      	mov	r0, r5
   d83e4:	bd38      	pop	{r3, r4, r5, pc}
   d83e6:	2500      	movs	r5, #0
   d83e8:	e7f5      	b.n	d83d6 <strrchr+0x14>
	...

000d83ec <_strtol_l.isra.0>:
   d83ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d83f0:	4e3a      	ldr	r6, [pc, #232]	; (d84dc <_strtol_l.isra.0+0xf0>)
   d83f2:	4686      	mov	lr, r0
   d83f4:	468c      	mov	ip, r1
   d83f6:	4660      	mov	r0, ip
   d83f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d83fc:	5da5      	ldrb	r5, [r4, r6]
   d83fe:	f015 0508 	ands.w	r5, r5, #8
   d8402:	d1f8      	bne.n	d83f6 <_strtol_l.isra.0+0xa>
   d8404:	2c2d      	cmp	r4, #45	; 0x2d
   d8406:	d133      	bne.n	d8470 <_strtol_l.isra.0+0x84>
   d8408:	f89c 4000 	ldrb.w	r4, [ip]
   d840c:	f04f 0801 	mov.w	r8, #1
   d8410:	f100 0c02 	add.w	ip, r0, #2
   d8414:	2b00      	cmp	r3, #0
   d8416:	d05c      	beq.n	d84d2 <_strtol_l.isra.0+0xe6>
   d8418:	2b10      	cmp	r3, #16
   d841a:	d10c      	bne.n	d8436 <_strtol_l.isra.0+0x4a>
   d841c:	2c30      	cmp	r4, #48	; 0x30
   d841e:	d10a      	bne.n	d8436 <_strtol_l.isra.0+0x4a>
   d8420:	f89c 0000 	ldrb.w	r0, [ip]
   d8424:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8428:	2858      	cmp	r0, #88	; 0x58
   d842a:	d14d      	bne.n	d84c8 <_strtol_l.isra.0+0xdc>
   d842c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8430:	2310      	movs	r3, #16
   d8432:	f10c 0c02 	add.w	ip, ip, #2
   d8436:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d843a:	3f01      	subs	r7, #1
   d843c:	2600      	movs	r6, #0
   d843e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8442:	4630      	mov	r0, r6
   d8444:	fb03 7a19 	mls	sl, r3, r9, r7
   d8448:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d844c:	2d09      	cmp	r5, #9
   d844e:	d818      	bhi.n	d8482 <_strtol_l.isra.0+0x96>
   d8450:	462c      	mov	r4, r5
   d8452:	42a3      	cmp	r3, r4
   d8454:	dd24      	ble.n	d84a0 <_strtol_l.isra.0+0xb4>
   d8456:	1c75      	adds	r5, r6, #1
   d8458:	d007      	beq.n	d846a <_strtol_l.isra.0+0x7e>
   d845a:	4581      	cmp	r9, r0
   d845c:	d31d      	bcc.n	d849a <_strtol_l.isra.0+0xae>
   d845e:	d101      	bne.n	d8464 <_strtol_l.isra.0+0x78>
   d8460:	45a2      	cmp	sl, r4
   d8462:	db1a      	blt.n	d849a <_strtol_l.isra.0+0xae>
   d8464:	fb00 4003 	mla	r0, r0, r3, r4
   d8468:	2601      	movs	r6, #1
   d846a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d846e:	e7eb      	b.n	d8448 <_strtol_l.isra.0+0x5c>
   d8470:	2c2b      	cmp	r4, #43	; 0x2b
   d8472:	bf08      	it	eq
   d8474:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8478:	46a8      	mov	r8, r5
   d847a:	bf08      	it	eq
   d847c:	f100 0c02 	addeq.w	ip, r0, #2
   d8480:	e7c8      	b.n	d8414 <_strtol_l.isra.0+0x28>
   d8482:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8486:	2d19      	cmp	r5, #25
   d8488:	d801      	bhi.n	d848e <_strtol_l.isra.0+0xa2>
   d848a:	3c37      	subs	r4, #55	; 0x37
   d848c:	e7e1      	b.n	d8452 <_strtol_l.isra.0+0x66>
   d848e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8492:	2d19      	cmp	r5, #25
   d8494:	d804      	bhi.n	d84a0 <_strtol_l.isra.0+0xb4>
   d8496:	3c57      	subs	r4, #87	; 0x57
   d8498:	e7db      	b.n	d8452 <_strtol_l.isra.0+0x66>
   d849a:	f04f 36ff 	mov.w	r6, #4294967295
   d849e:	e7e4      	b.n	d846a <_strtol_l.isra.0+0x7e>
   d84a0:	1c73      	adds	r3, r6, #1
   d84a2:	d106      	bne.n	d84b2 <_strtol_l.isra.0+0xc6>
   d84a4:	2322      	movs	r3, #34	; 0x22
   d84a6:	f8ce 3000 	str.w	r3, [lr]
   d84aa:	4638      	mov	r0, r7
   d84ac:	b942      	cbnz	r2, d84c0 <_strtol_l.isra.0+0xd4>
   d84ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d84b2:	f1b8 0f00 	cmp.w	r8, #0
   d84b6:	d000      	beq.n	d84ba <_strtol_l.isra.0+0xce>
   d84b8:	4240      	negs	r0, r0
   d84ba:	2a00      	cmp	r2, #0
   d84bc:	d0f7      	beq.n	d84ae <_strtol_l.isra.0+0xc2>
   d84be:	b10e      	cbz	r6, d84c4 <_strtol_l.isra.0+0xd8>
   d84c0:	f10c 31ff 	add.w	r1, ip, #4294967295
   d84c4:	6011      	str	r1, [r2, #0]
   d84c6:	e7f2      	b.n	d84ae <_strtol_l.isra.0+0xc2>
   d84c8:	2430      	movs	r4, #48	; 0x30
   d84ca:	2b00      	cmp	r3, #0
   d84cc:	d1b3      	bne.n	d8436 <_strtol_l.isra.0+0x4a>
   d84ce:	2308      	movs	r3, #8
   d84d0:	e7b1      	b.n	d8436 <_strtol_l.isra.0+0x4a>
   d84d2:	2c30      	cmp	r4, #48	; 0x30
   d84d4:	d0a4      	beq.n	d8420 <_strtol_l.isra.0+0x34>
   d84d6:	230a      	movs	r3, #10
   d84d8:	e7ad      	b.n	d8436 <_strtol_l.isra.0+0x4a>
   d84da:	bf00      	nop
   d84dc:	000d8a76 	.word	0x000d8a76

000d84e0 <strtol>:
   d84e0:	4613      	mov	r3, r2
   d84e2:	460a      	mov	r2, r1
   d84e4:	4601      	mov	r1, r0
   d84e6:	4802      	ldr	r0, [pc, #8]	; (d84f0 <strtol+0x10>)
   d84e8:	6800      	ldr	r0, [r0, #0]
   d84ea:	f7ff bf7f 	b.w	d83ec <_strtol_l.isra.0>
   d84ee:	bf00      	nop
   d84f0:	2003e3c4 	.word	0x2003e3c4

000d84f4 <dynalib_user>:
   d84f4:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d8504:	00000000 72617453 676e6974 6e6f4300     ....Starting.Con
   d8514:	7463656e 20676e69 6d206f74 20747471     necting to mqtt 
   d8524:	76726573 43007265 656e6e6f 64657463     server.Connected
   d8534:	206f7420 7474716d 72657320 00726576      to mqtt server.
   d8544:	6e727574 68746e6f 67696c65 34737468     turnonthelights4
   d8554:	64610032 006e696d 61727061 726f625f     2.admin.apra_bor
   d8564:	315f6e6f 6e6f4300 7463656e 43006465     on_1.Connected.C
   d8574:	646c756f 2074276e 6e6e6f63 00746365     ouldn't connect.
   d8584:	61707261 7365742f 64252f74 6e6f6300     arpa/test/%d.con
   d8594:	682e6f64 73617461 2e616b61 006d6f63     do.hatasaka.com.

000d85a4 <_ZTVN5spark10LogHandlerE>:
	...
   d85b4:	000d40a5 000d40c9                       .@...@..

000d85bc <_ZTVN5spark16SerialLogHandlerE>:
	...
   d85c4:	000d4131 000d4165 000d6ac9 000d40cb     1A..eA...j...@..
   d85d4:	514d0400 00045454 49514d06 03706473     ..MQTT...MQIsdp.

000d85e4 <_ZTVN5spark13EthernetClassE>:
	...
   d85ec:	000d5497 000d548d 000d5483 000d5479     .T...T...T..yT..
   d85fc:	000d546d 000d5461 000d5455 000d544d     mT..aT..UT..MT..
   d860c:	000d5443 000d5439 000d7a19 69726977     CT..9T...z..wiri
   d861c:	5300676e 65747379 6c73206d 20706565     ng.System sleep 
   d862c:	666e6f63 72756769 6f697461 7369206e     configuration is
   d863c:	766e6920 64696c61 6977002e 676e6972      invalid..wiring
   d864c:	656c622e 61745300 64207472 6f637369     .ble.Start disco
   d865c:	69726576 7320676e 69767265 2e736563     vering services.
   d866c:	69614600 2064656c 61206f74 6e657070     .Failed to appen
   d867c:	65702064 43207265 72746e65 64206c61     d peer Central d
   d868c:	63697665 43002e65 656e6e6f 64657463     evice..Connected
   d869c:	20796220 746e6543 206c6172 69766564      by Central devi
   d86ac:	002e6563 63736944 656e6e6f 64657463     ce..Disconnected
   d86bc:	20796220 6f6d6572 64206574 63697665      by remote devic
   d86cc:	00002e65                                e...

000d86d0 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d86d8:	000d57ab 000d57cd 000d5a1f 000d57db     .W...W...Z...W..
   d86e8:	000d57ad                                .W..

000d86ec <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d86f4:	64756162 72655300 006c6169 69726553     baud.Serial.Seri
   d8704:	00316c61 4e4f534a 65727453 6f4c6d61     al1.JSONStreamLo
   d8714:	6e614867 72656c64 70706100 31302500     gHandler.app.%01
   d8724:	00207530 2c00205d 29280020 2000203a     0u .] ., .(): . 
   d8734:	6f63005b 3d206564 69250020 74656400     [.code = .%i.det
   d8744:	736c6961 00203d20 63000a0d 6c006600     ails = ....c.f.l
   d8754:	6e66006e 646f6300 65640065 6c696174     n.fn.code.detail
   d8764:	00000000                                ....

000d8768 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8770:	000d5e87 000d5ead 000d5e6d 000d7b2f     .^...^..m^../{..

000d8780 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d8788:	000d62f1 000d6309 000d6ac9 000d40cb     .b...c...j...@..

000d8798 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d87a0:	000d631d 000d6331 000d6c6d 000d5e75     .c..1c..ml..u^..

000d87b0 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d87b8:	000d5e85 000d5ebb 000d6a05 000d5e77     .^...^...j..w^..

000d87c8 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d87d0:	000d5e83 000d5ec9 000d6239 000d5ee5     .^...^..9b...^..
   d87e0:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d87f0:	007a2553 74637361 00656d69              S%z.asctime.

000d87fc <_ZTV9IPAddress>:
	...
   d8804:	000d6f69 000d6f59 000d6f5b              io..Yo..[o..

000d8810 <_ZTV9USBSerial>:
	...
   d8818:	000d7081 000d70e9 000d70bf 000d5d61     .p...p...p..a]..
   d8828:	000d70b1 000d7083 000d7093 000d70e3     .p...p...p...p..
   d8838:	000d70a3 000d707d                       .p..}p..

000d8840 <_ZTVN5spark13CellularClassE>:
	...
   d8848:	000d71f3 000d71e9 000d71df 000d7195     .q...q...q...q..
   d8858:	000d71d3 000d71c7 000d71bb 000d71b3     .q...q...q...q..
   d8868:	000d71a9 000d719f 000d7a19              .q...q...z..

000d8874 <_ZTV11USARTSerial>:
	...
   d887c:	000d722d 000d7299 000d7271 000d5d61     -r...r..qr..a]..
   d888c:	000d7241 000d725d 000d724f 000d726b     Ar..]r..Or..kr..
   d889c:	000d722f 000d7233                       /r..3r..

000d88a4 <_ZTV7TwoWire>:
	...
   d88ac:	000d7371 000d73bb 000d7393 000d7373     qs...s...s..ss..
   d88bc:	000d739b 000d73a3 000d73ab 000d73b3     .s...s...s...s..
   d88cc:	76636572 72726520 3d20726f 00642520     recv error = %d.

000d88dc <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d88e4:	000d746f 000d7491 000d79ab 000d749f     ot...t...y...t..
   d88f4:	000d7471                                qt..

000d88f8 <_ZTV9TCPClient>:
	...
   d8900:	000d751d 000d7551 000d73ed 000d7407     .u..Qu...s...t..
   d8910:	000d7841 000d75b3 000d7585 000d7431     Ax...u...u..1t..
   d8920:	000d7749 000d763d 000d75e7 000d78f5     Iw..=v...u...x..
   d8930:	000d7433 000d7465 000d7419 000d74a3     3t..et...t...t..
   d8940:	000d7565                                eu..

000d8944 <_ZTVN5spark12NetworkClassE>:
	...
   d894c:	000d79b1 000d79bb 000d79c5 000d79cf     .y...y...y...y..
   d895c:	000d79d9 000d79e5 000d79f1 000d79fd     .y...y...y...y..
   d896c:	000d7a05 000d7a0f 000d7a19 75007525     .z...z...z..%u.u
   d897c:	78343025                                 %04x.

000d8981 <_ZSt7nothrow>:
	...

000d8982 <_ZTSSt19_Sp_make_shared_tag>:
   d8982:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d8992:	5f646572 00676174                        red_tag...

000d899c <_ZTISt19_Sp_make_shared_tag>:
   d899c:	000d89dc 000d8982                       ........

000d89a4 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d89a4:	000d8a3c 000d89b0 000d8a60              <.......`...

000d89b0 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d89b0:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d89c0:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d89d0:	00000045                                E...

000d89d4 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d89d4:	00000000 000d89a4 000d8085 000d8099     ................
   d89e4:	000d822d 000d822d 000d8103 000d8045     -...-.......E...
   d89f4:	000d80eb 000d80ad 000d8079              ........y...

000d8a00 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d8a00:	000d8a3c 000d8a0c 000d89a4              <...........

000d8a0c <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d8a0c:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d8a1c:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d8a2c:	456f666e 00000000                       nfoE....

000d8a34 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d8a34:	00000000 000d8a00 000d812d 000d8141     ........-...A...
   d8a44:	000d822d 000d822d 000d8103 000d8045     -...-.......E...
   d8a54:	000d8201 000d818d 000d8155              ........U...

000d8a60 <_ZTISt9type_info>:
   d8a60:	000d89dc 000d8a68                       ....h...

000d8a68 <_ZTSSt9type_info>:
   d8a68:	74397453 5f657079 6f666e69               St9type_info.

000d8a75 <_ctype_>:
   d8a75:	20202000 20202020 28282020 20282828     .         ((((( 
   d8a85:	20202020 20202020 20202020 20202020                     
   d8a95:	10108820 10101010 10101010 10101010      ...............
   d8aa5:	04040410 04040404 10040404 10101010     ................
   d8ab5:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d8ac5:	01010101 01010101 01010101 10101010     ................
   d8ad5:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d8ae5:	02020202 02020202 02020202 10101010     ................
   d8af5:	00000020 00000000 00000000 00000000      ...............
	...

000d8b76 <link_const_variable_data_end>:
	...

000d8b78 <link_constructors_location>:
   d8b78:	000d451d 	.word	0x000d451d
   d8b7c:	000d54a1 	.word	0x000d54a1
   d8b80:	000d5609 	.word	0x000d5609
   d8b84:	000d5d39 	.word	0x000d5d39
   d8b88:	000d6ab9 	.word	0x000d6ab9
   d8b8c:	000d6de1 	.word	0x000d6de1
   d8b90:	000d6e19 	.word	0x000d6e19
   d8b94:	000d71fd 	.word	0x000d71fd
   d8b98:	000d7aed 	.word	0x000d7aed

000d8b9c <link_constructors_end>:
   d8b9c:	00000000 	.word	0x00000000
